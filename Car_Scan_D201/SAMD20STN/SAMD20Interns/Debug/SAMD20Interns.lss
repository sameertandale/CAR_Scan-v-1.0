
SAMD20Interns.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003344  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  20000000  00003344  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  2000006c  000033b0  0001006c  2**2
                  ALLOC
  3 .stack        00002000  200001a8  000034ec  0001006c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001006c  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
  6 .debug_info   000140cb  00000000  00000000  00010105  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002620  00000000  00000000  000241d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003fa6  00000000  00000000  000267f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000470  00000000  00000000  0002a796  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000498  00000000  00000000  0002ac06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001207f  00000000  00000000  0002b09e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ae0  00000000  00000000  0003d11d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005b0f6  00000000  00000000  00046bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000131c  00000000  00000000  000a1cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021a8 	.word	0x200021a8
       4:	00001159 	.word	0x00001159
       8:	00001155 	.word	0x00001155
       c:	00001155 	.word	0x00001155
	...
      2c:	00001155 	.word	0x00001155
	...
      38:	00001155 	.word	0x00001155
      3c:	00001155 	.word	0x00001155
      40:	00001155 	.word	0x00001155
      44:	00001155 	.word	0x00001155
      48:	00001155 	.word	0x00001155
      4c:	00001155 	.word	0x00001155
      50:	00001155 	.word	0x00001155
      54:	00001155 	.word	0x00001155
      58:	00001155 	.word	0x00001155
      5c:	00000b31 	.word	0x00000b31
      60:	00000b41 	.word	0x00000b41
      64:	00000b51 	.word	0x00000b51
      68:	00000b61 	.word	0x00000b61
      6c:	00000b71 	.word	0x00000b71
      70:	00000b81 	.word	0x00000b81
      74:	00001155 	.word	0x00001155
      78:	00001155 	.word	0x00001155
      7c:	00001155 	.word	0x00001155
      80:	00001155 	.word	0x00001155
      84:	00001155 	.word	0x00001155
      88:	00001155 	.word	0x00001155
      8c:	00001155 	.word	0x00001155
      90:	00001155 	.word	0x00001155
      94:	00001155 	.word	0x00001155
      98:	00001155 	.word	0x00001155
      9c:	00001155 	.word	0x00001155
      a0:	00001155 	.word	0x00001155

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a1b      	subs	r3, r3, r0
      ae:	2b06      	cmp	r3, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2b00      	cmp	r3, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4798      	blx	r3
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00003344 	.word	0x00003344
      c4:	00003344 	.word	0x00003344
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a1b      	subs	r3, r3, r0
      d4:	109b      	asrs	r3, r3, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d3      	adds	r3, r2, r3
      da:	1059      	asrs	r1, r3, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4a04      	ldr	r2, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2a00      	cmp	r2, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4790      	blx	r2
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00003344 	.word	0x00003344
      f0:	00003344 	.word	0x00003344
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2b00      	cmp	r3, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	2000006c 	.word	0x2000006c
     11c:	00000000 	.word	0x00000000
     120:	00003344 	.word	0x00003344

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6803      	ldr	r3, [r0, #0]
     138:	2b00      	cmp	r3, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2b00      	cmp	r3, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4798      	blx	r3
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00003344 	.word	0x00003344
     154:	20000070 	.word	0x20000070
     158:	00003344 	.word	0x00003344
     15c:	00000000 	.word	0x00000000

00000160 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     160:	b500      	push	{lr}
     162:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     164:	ab01      	add	r3, sp, #4
     166:	2280      	movs	r2, #128	; 0x80
     168:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     16a:	780a      	ldrb	r2, [r1, #0]
     16c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     16e:	784a      	ldrb	r2, [r1, #1]
     170:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     172:	788a      	ldrb	r2, [r1, #2]
     174:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     176:	1c19      	adds	r1, r3, #0
     178:	4b01      	ldr	r3, [pc, #4]	; (180 <port_pin_set_config+0x20>)
     17a:	4798      	blx	r3
}
     17c:	b003      	add	sp, #12
     17e:	bd00      	pop	{pc}
     180:	00001101 	.word	0x00001101

00000184 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     184:	b510      	push	{r4, lr}
     186:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     188:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     18a:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     18c:	4299      	cmp	r1, r3
     18e:	d30c      	bcc.n	1aa <_sercom_get_sync_baud_val+0x26>
     190:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     192:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     194:	1c60      	adds	r0, r4, #1
     196:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     198:	428b      	cmp	r3, r1
     19a:	d801      	bhi.n	1a0 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     19c:	1c04      	adds	r4, r0, #0
     19e:	e7f8      	b.n	192 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1a0:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     1a2:	2cff      	cmp	r4, #255	; 0xff
     1a4:	d801      	bhi.n	1aa <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     1a6:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     1a8:	2000      	movs	r0, #0
	}
}
     1aa:	bd10      	pop	{r4, pc}
     1ac:	0000      	movs	r0, r0
	...

000001b0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     1b2:	465f      	mov	r7, fp
     1b4:	4656      	mov	r6, sl
     1b6:	464d      	mov	r5, r9
     1b8:	4644      	mov	r4, r8
     1ba:	b4f0      	push	{r4, r5, r6, r7}
     1bc:	b087      	sub	sp, #28
     1be:	1c06      	adds	r6, r0, #0
     1c0:	1c0d      	adds	r5, r1, #0
     1c2:	9204      	str	r2, [sp, #16]
     1c4:	aa10      	add	r2, sp, #64	; 0x40
     1c6:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1c8:	1c32      	adds	r2, r6, #0
     1ca:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     1cc:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     1ce:	428a      	cmp	r2, r1
     1d0:	d900      	bls.n	1d4 <_sercom_get_async_baud_val+0x24>
     1d2:	e0b3      	b.n	33c <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     1d4:	2b00      	cmp	r3, #0
     1d6:	d14b      	bne.n	270 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     1d8:	2100      	movs	r1, #0
     1da:	1c32      	adds	r2, r6, #0
     1dc:	4c5e      	ldr	r4, [pc, #376]	; (358 <_sercom_get_async_baud_val+0x1a8>)
     1de:	47a0      	blx	r4
     1e0:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     1e2:	1c2e      	adds	r6, r5, #0
     1e4:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     1e6:	2000      	movs	r0, #0
     1e8:	2100      	movs	r1, #0
     1ea:	2200      	movs	r2, #0
     1ec:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     1ee:	243f      	movs	r4, #63	; 0x3f
     1f0:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     1f2:	2501      	movs	r5, #1
     1f4:	46a8      	mov	r8, r5
     1f6:	9002      	str	r0, [sp, #8]
     1f8:	9103      	str	r1, [sp, #12]
     1fa:	4661      	mov	r1, ip
     1fc:	3920      	subs	r1, #32
     1fe:	d403      	bmi.n	208 <_sercom_get_async_baud_val+0x58>
     200:	4640      	mov	r0, r8
     202:	4088      	lsls	r0, r1
     204:	4681      	mov	r9, r0
     206:	e005      	b.n	214 <_sercom_get_async_baud_val+0x64>
     208:	2120      	movs	r1, #32
     20a:	4665      	mov	r5, ip
     20c:	1b4c      	subs	r4, r1, r5
     20e:	4640      	mov	r0, r8
     210:	40e0      	lsrs	r0, r4
     212:	4681      	mov	r9, r0
     214:	4641      	mov	r1, r8
     216:	4664      	mov	r4, ip
     218:	40a1      	lsls	r1, r4
     21a:	468a      	mov	sl, r1

		r = r << 1;
     21c:	1c10      	adds	r0, r2, #0
     21e:	1c19      	adds	r1, r3, #0
     220:	1880      	adds	r0, r0, r2
     222:	4159      	adcs	r1, r3
     224:	1c02      	adds	r2, r0, #0
     226:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     228:	465d      	mov	r5, fp
     22a:	464c      	mov	r4, r9
     22c:	4225      	tst	r5, r4
     22e:	d002      	beq.n	236 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     230:	4642      	mov	r2, r8
     232:	4302      	orrs	r2, r0
     234:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     236:	429f      	cmp	r7, r3
     238:	d80c      	bhi.n	254 <_sercom_get_async_baud_val+0xa4>
     23a:	d101      	bne.n	240 <_sercom_get_async_baud_val+0x90>
     23c:	4296      	cmp	r6, r2
     23e:	d809      	bhi.n	254 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     240:	1b92      	subs	r2, r2, r6
     242:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     244:	4650      	mov	r0, sl
     246:	9d02      	ldr	r5, [sp, #8]
     248:	4328      	orrs	r0, r5
     24a:	4649      	mov	r1, r9
     24c:	9c03      	ldr	r4, [sp, #12]
     24e:	4321      	orrs	r1, r4
     250:	9002      	str	r0, [sp, #8]
     252:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     254:	4665      	mov	r5, ip
     256:	3d01      	subs	r5, #1
     258:	46ac      	mov	ip, r5
     25a:	d2ce      	bcs.n	1fa <_sercom_get_async_baud_val+0x4a>
     25c:	9802      	ldr	r0, [sp, #8]
     25e:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     260:	4b3c      	ldr	r3, [pc, #240]	; (354 <_sercom_get_async_baud_val+0x1a4>)
     262:	4a3b      	ldr	r2, [pc, #236]	; (350 <_sercom_get_async_baud_val+0x1a0>)
     264:	1a12      	subs	r2, r2, r0
     266:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     268:	0c12      	lsrs	r2, r2, #16
     26a:	041b      	lsls	r3, r3, #16
     26c:	431a      	orrs	r2, r3
     26e:	e062      	b.n	336 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     270:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     272:	2b01      	cmp	r3, #1
     274:	d15f      	bne.n	336 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     276:	0f4f      	lsrs	r7, r1, #29
     278:	46b9      	mov	r9, r7
     27a:	00cd      	lsls	r5, r1, #3
     27c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     27e:	2100      	movs	r1, #0
     280:	1c32      	adds	r2, r6, #0
     282:	2300      	movs	r3, #0
     284:	4c34      	ldr	r4, [pc, #208]	; (358 <_sercom_get_async_baud_val+0x1a8>)
     286:	47a0      	blx	r4
     288:	1c06      	adds	r6, r0, #0
     28a:	1c0f      	adds	r7, r1, #0
     28c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     28e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     290:	9602      	str	r6, [sp, #8]
     292:	9703      	str	r7, [sp, #12]
     294:	469a      	mov	sl, r3
     296:	4650      	mov	r0, sl
     298:	b2c0      	uxtb	r0, r0
     29a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     29c:	2100      	movs	r1, #0
     29e:	4688      	mov	r8, r1
     2a0:	2200      	movs	r2, #0
     2a2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     2a4:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     2a6:	1c27      	adds	r7, r4, #0
     2a8:	3f20      	subs	r7, #32
     2aa:	d403      	bmi.n	2b4 <_sercom_get_async_baud_val+0x104>
     2ac:	1c2e      	adds	r6, r5, #0
     2ae:	40be      	lsls	r6, r7
     2b0:	9601      	str	r6, [sp, #4]
     2b2:	e004      	b.n	2be <_sercom_get_async_baud_val+0x10e>
     2b4:	2020      	movs	r0, #32
     2b6:	1b07      	subs	r7, r0, r4
     2b8:	1c29      	adds	r1, r5, #0
     2ba:	40f9      	lsrs	r1, r7
     2bc:	9101      	str	r1, [sp, #4]
     2be:	1c2e      	adds	r6, r5, #0
     2c0:	40a6      	lsls	r6, r4
     2c2:	9600      	str	r6, [sp, #0]

		r = r << 1;
     2c4:	1c10      	adds	r0, r2, #0
     2c6:	1c19      	adds	r1, r3, #0
     2c8:	1880      	adds	r0, r0, r2
     2ca:	4159      	adcs	r1, r3
     2cc:	1c02      	adds	r2, r0, #0
     2ce:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     2d0:	465f      	mov	r7, fp
     2d2:	4037      	ands	r7, r6
     2d4:	46bc      	mov	ip, r7
     2d6:	9e01      	ldr	r6, [sp, #4]
     2d8:	464f      	mov	r7, r9
     2da:	403e      	ands	r6, r7
     2dc:	4667      	mov	r7, ip
     2de:	433e      	orrs	r6, r7
     2e0:	d002      	beq.n	2e8 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     2e2:	1c2a      	adds	r2, r5, #0
     2e4:	4302      	orrs	r2, r0
     2e6:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     2e8:	9803      	ldr	r0, [sp, #12]
     2ea:	4298      	cmp	r0, r3
     2ec:	d80b      	bhi.n	306 <_sercom_get_async_baud_val+0x156>
     2ee:	d102      	bne.n	2f6 <_sercom_get_async_baud_val+0x146>
     2f0:	9902      	ldr	r1, [sp, #8]
     2f2:	4291      	cmp	r1, r2
     2f4:	d807      	bhi.n	306 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     2f6:	9e02      	ldr	r6, [sp, #8]
     2f8:	9f03      	ldr	r7, [sp, #12]
     2fa:	1b92      	subs	r2, r2, r6
     2fc:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     2fe:	4647      	mov	r7, r8
     300:	9800      	ldr	r0, [sp, #0]
     302:	4307      	orrs	r7, r0
     304:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     306:	3c01      	subs	r4, #1
     308:	d2cd      	bcs.n	2a6 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     30a:	4641      	mov	r1, r8
     30c:	4652      	mov	r2, sl
     30e:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     310:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     312:	4c12      	ldr	r4, [pc, #72]	; (35c <_sercom_get_async_baud_val+0x1ac>)
     314:	42a3      	cmp	r3, r4
     316:	d908      	bls.n	32a <_sercom_get_async_baud_val+0x17a>
     318:	9a05      	ldr	r2, [sp, #20]
     31a:	3201      	adds	r2, #1
     31c:	b2d2      	uxtb	r2, r2
     31e:	9205      	str	r2, [sp, #20]
     320:	2601      	movs	r6, #1
     322:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     324:	4657      	mov	r7, sl
     326:	2f08      	cmp	r7, #8
     328:	d1b5      	bne.n	296 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     32a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     32c:	9805      	ldr	r0, [sp, #20]
     32e:	2808      	cmp	r0, #8
     330:	d004      	beq.n	33c <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     332:	0342      	lsls	r2, r0, #13
     334:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     336:	9c04      	ldr	r4, [sp, #16]
     338:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     33a:	2400      	movs	r4, #0
}
     33c:	1c20      	adds	r0, r4, #0
     33e:	b007      	add	sp, #28
     340:	bc3c      	pop	{r2, r3, r4, r5}
     342:	4690      	mov	r8, r2
     344:	4699      	mov	r9, r3
     346:	46a2      	mov	sl, r4
     348:	46ab      	mov	fp, r5
     34a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34c:	46c0      	nop			; (mov r8, r8)
     34e:	46c0      	nop			; (mov r8, r8)
     350:	00000000 	.word	0x00000000
     354:	00000001 	.word	0x00000001
     358:	000016d1 	.word	0x000016d1
     35c:	00001fff 	.word	0x00001fff

00000360 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     360:	b510      	push	{r4, lr}
     362:	b082      	sub	sp, #8
     364:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     366:	4b0f      	ldr	r3, [pc, #60]	; (3a4 <sercom_set_gclk_generator+0x44>)
     368:	781b      	ldrb	r3, [r3, #0]
     36a:	2b00      	cmp	r3, #0
     36c:	d001      	beq.n	372 <sercom_set_gclk_generator+0x12>
     36e:	2900      	cmp	r1, #0
     370:	d00d      	beq.n	38e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     372:	a901      	add	r1, sp, #4
     374:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     376:	200c      	movs	r0, #12
     378:	4b0b      	ldr	r3, [pc, #44]	; (3a8 <sercom_set_gclk_generator+0x48>)
     37a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     37c:	200c      	movs	r0, #12
     37e:	4b0b      	ldr	r3, [pc, #44]	; (3ac <sercom_set_gclk_generator+0x4c>)
     380:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     382:	4b08      	ldr	r3, [pc, #32]	; (3a4 <sercom_set_gclk_generator+0x44>)
     384:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     386:	2201      	movs	r2, #1
     388:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     38a:	2000      	movs	r0, #0
     38c:	e007      	b.n	39e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     38e:	4b05      	ldr	r3, [pc, #20]	; (3a4 <sercom_set_gclk_generator+0x44>)
     390:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     392:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     394:	1b14      	subs	r4, r2, r4
     396:	1e62      	subs	r2, r4, #1
     398:	4194      	sbcs	r4, r2
     39a:	4264      	negs	r4, r4
     39c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     39e:	b002      	add	sp, #8
     3a0:	bd10      	pop	{r4, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	20000088 	.word	0x20000088
     3a8:	00001021 	.word	0x00001021
     3ac:	00000f91 	.word	0x00000f91

000003b0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3b0:	4b44      	ldr	r3, [pc, #272]	; (4c4 <_sercom_get_default_pad+0x114>)
     3b2:	4298      	cmp	r0, r3
     3b4:	d033      	beq.n	41e <_sercom_get_default_pad+0x6e>
     3b6:	d806      	bhi.n	3c6 <_sercom_get_default_pad+0x16>
     3b8:	4b43      	ldr	r3, [pc, #268]	; (4c8 <_sercom_get_default_pad+0x118>)
     3ba:	4298      	cmp	r0, r3
     3bc:	d00d      	beq.n	3da <_sercom_get_default_pad+0x2a>
     3be:	4b43      	ldr	r3, [pc, #268]	; (4cc <_sercom_get_default_pad+0x11c>)
     3c0:	4298      	cmp	r0, r3
     3c2:	d01b      	beq.n	3fc <_sercom_get_default_pad+0x4c>
     3c4:	e06f      	b.n	4a6 <_sercom_get_default_pad+0xf6>
     3c6:	4b42      	ldr	r3, [pc, #264]	; (4d0 <_sercom_get_default_pad+0x120>)
     3c8:	4298      	cmp	r0, r3
     3ca:	d04a      	beq.n	462 <_sercom_get_default_pad+0xb2>
     3cc:	4b41      	ldr	r3, [pc, #260]	; (4d4 <_sercom_get_default_pad+0x124>)
     3ce:	4298      	cmp	r0, r3
     3d0:	d058      	beq.n	484 <_sercom_get_default_pad+0xd4>
     3d2:	4b41      	ldr	r3, [pc, #260]	; (4d8 <_sercom_get_default_pad+0x128>)
     3d4:	4298      	cmp	r0, r3
     3d6:	d166      	bne.n	4a6 <_sercom_get_default_pad+0xf6>
     3d8:	e032      	b.n	440 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3da:	2901      	cmp	r1, #1
     3dc:	d065      	beq.n	4aa <_sercom_get_default_pad+0xfa>
     3de:	2900      	cmp	r1, #0
     3e0:	d004      	beq.n	3ec <_sercom_get_default_pad+0x3c>
     3e2:	2902      	cmp	r1, #2
     3e4:	d006      	beq.n	3f4 <_sercom_get_default_pad+0x44>
     3e6:	2903      	cmp	r1, #3
     3e8:	d006      	beq.n	3f8 <_sercom_get_default_pad+0x48>
     3ea:	e001      	b.n	3f0 <_sercom_get_default_pad+0x40>
     3ec:	483b      	ldr	r0, [pc, #236]	; (4dc <_sercom_get_default_pad+0x12c>)
     3ee:	e067      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f0:	2000      	movs	r0, #0
     3f2:	e065      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f4:	483a      	ldr	r0, [pc, #232]	; (4e0 <_sercom_get_default_pad+0x130>)
     3f6:	e063      	b.n	4c0 <_sercom_get_default_pad+0x110>
     3f8:	483a      	ldr	r0, [pc, #232]	; (4e4 <_sercom_get_default_pad+0x134>)
     3fa:	e061      	b.n	4c0 <_sercom_get_default_pad+0x110>
     3fc:	2901      	cmp	r1, #1
     3fe:	d056      	beq.n	4ae <_sercom_get_default_pad+0xfe>
     400:	2900      	cmp	r1, #0
     402:	d004      	beq.n	40e <_sercom_get_default_pad+0x5e>
     404:	2902      	cmp	r1, #2
     406:	d006      	beq.n	416 <_sercom_get_default_pad+0x66>
     408:	2903      	cmp	r1, #3
     40a:	d006      	beq.n	41a <_sercom_get_default_pad+0x6a>
     40c:	e001      	b.n	412 <_sercom_get_default_pad+0x62>
     40e:	2003      	movs	r0, #3
     410:	e056      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     412:	2000      	movs	r0, #0
     414:	e054      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     416:	4834      	ldr	r0, [pc, #208]	; (4e8 <_sercom_get_default_pad+0x138>)
     418:	e052      	b.n	4c0 <_sercom_get_default_pad+0x110>
     41a:	4834      	ldr	r0, [pc, #208]	; (4ec <_sercom_get_default_pad+0x13c>)
     41c:	e050      	b.n	4c0 <_sercom_get_default_pad+0x110>
     41e:	2901      	cmp	r1, #1
     420:	d047      	beq.n	4b2 <_sercom_get_default_pad+0x102>
     422:	2900      	cmp	r1, #0
     424:	d004      	beq.n	430 <_sercom_get_default_pad+0x80>
     426:	2902      	cmp	r1, #2
     428:	d006      	beq.n	438 <_sercom_get_default_pad+0x88>
     42a:	2903      	cmp	r1, #3
     42c:	d006      	beq.n	43c <_sercom_get_default_pad+0x8c>
     42e:	e001      	b.n	434 <_sercom_get_default_pad+0x84>
     430:	482f      	ldr	r0, [pc, #188]	; (4f0 <_sercom_get_default_pad+0x140>)
     432:	e045      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     434:	2000      	movs	r0, #0
     436:	e043      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     438:	482e      	ldr	r0, [pc, #184]	; (4f4 <_sercom_get_default_pad+0x144>)
     43a:	e041      	b.n	4c0 <_sercom_get_default_pad+0x110>
     43c:	482e      	ldr	r0, [pc, #184]	; (4f8 <_sercom_get_default_pad+0x148>)
     43e:	e03f      	b.n	4c0 <_sercom_get_default_pad+0x110>
     440:	2901      	cmp	r1, #1
     442:	d038      	beq.n	4b6 <_sercom_get_default_pad+0x106>
     444:	2900      	cmp	r1, #0
     446:	d004      	beq.n	452 <_sercom_get_default_pad+0xa2>
     448:	2902      	cmp	r1, #2
     44a:	d006      	beq.n	45a <_sercom_get_default_pad+0xaa>
     44c:	2903      	cmp	r1, #3
     44e:	d006      	beq.n	45e <_sercom_get_default_pad+0xae>
     450:	e001      	b.n	456 <_sercom_get_default_pad+0xa6>
     452:	482a      	ldr	r0, [pc, #168]	; (4fc <_sercom_get_default_pad+0x14c>)
     454:	e034      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     456:	2000      	movs	r0, #0
     458:	e032      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     45a:	4829      	ldr	r0, [pc, #164]	; (500 <_sercom_get_default_pad+0x150>)
     45c:	e030      	b.n	4c0 <_sercom_get_default_pad+0x110>
     45e:	4829      	ldr	r0, [pc, #164]	; (504 <_sercom_get_default_pad+0x154>)
     460:	e02e      	b.n	4c0 <_sercom_get_default_pad+0x110>
     462:	2901      	cmp	r1, #1
     464:	d029      	beq.n	4ba <_sercom_get_default_pad+0x10a>
     466:	2900      	cmp	r1, #0
     468:	d004      	beq.n	474 <_sercom_get_default_pad+0xc4>
     46a:	2902      	cmp	r1, #2
     46c:	d006      	beq.n	47c <_sercom_get_default_pad+0xcc>
     46e:	2903      	cmp	r1, #3
     470:	d006      	beq.n	480 <_sercom_get_default_pad+0xd0>
     472:	e001      	b.n	478 <_sercom_get_default_pad+0xc8>
     474:	4824      	ldr	r0, [pc, #144]	; (508 <_sercom_get_default_pad+0x158>)
     476:	e023      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     478:	2000      	movs	r0, #0
     47a:	e021      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     47c:	4823      	ldr	r0, [pc, #140]	; (50c <_sercom_get_default_pad+0x15c>)
     47e:	e01f      	b.n	4c0 <_sercom_get_default_pad+0x110>
     480:	4823      	ldr	r0, [pc, #140]	; (510 <_sercom_get_default_pad+0x160>)
     482:	e01d      	b.n	4c0 <_sercom_get_default_pad+0x110>
     484:	2901      	cmp	r1, #1
     486:	d01a      	beq.n	4be <_sercom_get_default_pad+0x10e>
     488:	2900      	cmp	r1, #0
     48a:	d004      	beq.n	496 <_sercom_get_default_pad+0xe6>
     48c:	2902      	cmp	r1, #2
     48e:	d006      	beq.n	49e <_sercom_get_default_pad+0xee>
     490:	2903      	cmp	r1, #3
     492:	d006      	beq.n	4a2 <_sercom_get_default_pad+0xf2>
     494:	e001      	b.n	49a <_sercom_get_default_pad+0xea>
     496:	481f      	ldr	r0, [pc, #124]	; (514 <_sercom_get_default_pad+0x164>)
     498:	e012      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     49a:	2000      	movs	r0, #0
     49c:	e010      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     49e:	481e      	ldr	r0, [pc, #120]	; (518 <_sercom_get_default_pad+0x168>)
     4a0:	e00e      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4a2:	481e      	ldr	r0, [pc, #120]	; (51c <_sercom_get_default_pad+0x16c>)
     4a4:	e00c      	b.n	4c0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     4a6:	2000      	movs	r0, #0
     4a8:	e00a      	b.n	4c0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4aa:	481d      	ldr	r0, [pc, #116]	; (520 <_sercom_get_default_pad+0x170>)
     4ac:	e008      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4ae:	481d      	ldr	r0, [pc, #116]	; (524 <_sercom_get_default_pad+0x174>)
     4b0:	e006      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4b2:	481d      	ldr	r0, [pc, #116]	; (528 <_sercom_get_default_pad+0x178>)
     4b4:	e004      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4b6:	481d      	ldr	r0, [pc, #116]	; (52c <_sercom_get_default_pad+0x17c>)
     4b8:	e002      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4ba:	481d      	ldr	r0, [pc, #116]	; (530 <_sercom_get_default_pad+0x180>)
     4bc:	e000      	b.n	4c0 <_sercom_get_default_pad+0x110>
     4be:	481d      	ldr	r0, [pc, #116]	; (534 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     4c0:	4770      	bx	lr
     4c2:	46c0      	nop			; (mov r8, r8)
     4c4:	42001000 	.word	0x42001000
     4c8:	42000800 	.word	0x42000800
     4cc:	42000c00 	.word	0x42000c00
     4d0:	42001800 	.word	0x42001800
     4d4:	42001c00 	.word	0x42001c00
     4d8:	42001400 	.word	0x42001400
     4dc:	00040003 	.word	0x00040003
     4e0:	00060003 	.word	0x00060003
     4e4:	00070003 	.word	0x00070003
     4e8:	001e0003 	.word	0x001e0003
     4ec:	001f0003 	.word	0x001f0003
     4f0:	00080003 	.word	0x00080003
     4f4:	000a0003 	.word	0x000a0003
     4f8:	000b0003 	.word	0x000b0003
     4fc:	00100003 	.word	0x00100003
     500:	00120003 	.word	0x00120003
     504:	00130003 	.word	0x00130003
     508:	000c0003 	.word	0x000c0003
     50c:	000e0003 	.word	0x000e0003
     510:	000f0003 	.word	0x000f0003
     514:	00160003 	.word	0x00160003
     518:	00180003 	.word	0x00180003
     51c:	00190003 	.word	0x00190003
     520:	00050003 	.word	0x00050003
     524:	00010003 	.word	0x00010003
     528:	00090003 	.word	0x00090003
     52c:	00110003 	.word	0x00110003
     530:	000d0003 	.word	0x000d0003
     534:	00170003 	.word	0x00170003

00000538 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     538:	b570      	push	{r4, r5, r6, lr}
     53a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     53c:	4a0c      	ldr	r2, [pc, #48]	; (570 <_sercom_get_sercom_inst_index+0x38>)
     53e:	466b      	mov	r3, sp
     540:	ca70      	ldmia	r2!, {r4, r5, r6}
     542:	c370      	stmia	r3!, {r4, r5, r6}
     544:	ca32      	ldmia	r2!, {r1, r4, r5}
     546:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     548:	9e00      	ldr	r6, [sp, #0]
     54a:	4286      	cmp	r6, r0
     54c:	d006      	beq.n	55c <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     54e:	2301      	movs	r3, #1
     550:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     552:	4669      	mov	r1, sp
     554:	5852      	ldr	r2, [r2, r1]
     556:	4282      	cmp	r2, r0
     558:	d103      	bne.n	562 <_sercom_get_sercom_inst_index+0x2a>
     55a:	e000      	b.n	55e <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     55c:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     55e:	b2d8      	uxtb	r0, r3
     560:	e003      	b.n	56a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     562:	3301      	adds	r3, #1
     564:	2b06      	cmp	r3, #6
     566:	d1f3      	bne.n	550 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     568:	2000      	movs	r0, #0
}
     56a:	b006      	add	sp, #24
     56c:	bd70      	pop	{r4, r5, r6, pc}
     56e:	46c0      	nop			; (mov r8, r8)
     570:	000031a8 	.word	0x000031a8

00000574 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     574:	b5f0      	push	{r4, r5, r6, r7, lr}
     576:	4647      	mov	r7, r8
     578:	b480      	push	{r7}
     57a:	1c0c      	adds	r4, r1, #0
     57c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     57e:	2800      	cmp	r0, #0
     580:	d10c      	bne.n	59c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     582:	2a00      	cmp	r2, #0
     584:	dd0d      	ble.n	5a2 <_read+0x2e>
     586:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     588:	4e09      	ldr	r6, [pc, #36]	; (5b0 <_read+0x3c>)
     58a:	4d0a      	ldr	r5, [pc, #40]	; (5b4 <_read+0x40>)
     58c:	6830      	ldr	r0, [r6, #0]
     58e:	1c21      	adds	r1, r4, #0
     590:	682b      	ldr	r3, [r5, #0]
     592:	4798      	blx	r3
		ptr++;
     594:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     596:	42bc      	cmp	r4, r7
     598:	d1f8      	bne.n	58c <_read+0x18>
     59a:	e004      	b.n	5a6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     59c:	2001      	movs	r0, #1
     59e:	4240      	negs	r0, r0
     5a0:	e002      	b.n	5a8 <_read+0x34>
	}

	for (; len > 0; --len) {
     5a2:	2000      	movs	r0, #0
     5a4:	e000      	b.n	5a8 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     5a6:	4640      	mov	r0, r8
	}
	return nChars;
}
     5a8:	bc04      	pop	{r2}
     5aa:	4690      	mov	r8, r2
     5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5ae:	46c0      	nop			; (mov r8, r8)
     5b0:	20000140 	.word	0x20000140
     5b4:	20000138 	.word	0x20000138

000005b8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ba:	4647      	mov	r7, r8
     5bc:	b480      	push	{r7}
     5be:	1c0e      	adds	r6, r1, #0
     5c0:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     5c2:	3801      	subs	r0, #1
     5c4:	2802      	cmp	r0, #2
     5c6:	d810      	bhi.n	5ea <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     5c8:	2a00      	cmp	r2, #0
     5ca:	d011      	beq.n	5f0 <_write+0x38>
     5cc:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     5ce:	4b0d      	ldr	r3, [pc, #52]	; (604 <_write+0x4c>)
     5d0:	4698      	mov	r8, r3
     5d2:	4f0d      	ldr	r7, [pc, #52]	; (608 <_write+0x50>)
     5d4:	4643      	mov	r3, r8
     5d6:	6818      	ldr	r0, [r3, #0]
     5d8:	5d31      	ldrb	r1, [r6, r4]
     5da:	683b      	ldr	r3, [r7, #0]
     5dc:	4798      	blx	r3
     5de:	2800      	cmp	r0, #0
     5e0:	db08      	blt.n	5f4 <_write+0x3c>
			return -1;
		}
		++nChars;
     5e2:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     5e4:	42a5      	cmp	r5, r4
     5e6:	d1f5      	bne.n	5d4 <_write+0x1c>
     5e8:	e007      	b.n	5fa <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     5ea:	2001      	movs	r0, #1
     5ec:	4240      	negs	r0, r0
     5ee:	e005      	b.n	5fc <_write+0x44>
	}

	for (; len != 0; --len) {
     5f0:	2000      	movs	r0, #0
     5f2:	e003      	b.n	5fc <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     5f4:	2001      	movs	r0, #1
     5f6:	4240      	negs	r0, r0
     5f8:	e000      	b.n	5fc <_write+0x44>
		}
		++nChars;
     5fa:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     5fc:	bc04      	pop	{r2}
     5fe:	4690      	mov	r8, r2
     600:	bdf0      	pop	{r4, r5, r6, r7, pc}
     602:	46c0      	nop			; (mov r8, r8)
     604:	20000140 	.word	0x20000140
     608:	2000013c 	.word	0x2000013c

0000060c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	465f      	mov	r7, fp
     610:	4656      	mov	r6, sl
     612:	464d      	mov	r5, r9
     614:	4644      	mov	r4, r8
     616:	b4f0      	push	{r4, r5, r6, r7}
     618:	b08d      	sub	sp, #52	; 0x34
     61a:	1c05      	adds	r5, r0, #0
     61c:	1c0c      	adds	r4, r1, #0
     61e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     620:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     622:	1c08      	adds	r0, r1, #0
     624:	4b78      	ldr	r3, [pc, #480]	; (808 <usart_init+0x1fc>)
     626:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     628:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     62a:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     62c:	07ca      	lsls	r2, r1, #31
     62e:	d500      	bpl.n	632 <usart_init+0x26>
     630:	e0e2      	b.n	7f8 <usart_init+0x1ec>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     632:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     634:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     636:	0797      	lsls	r7, r2, #30
     638:	d500      	bpl.n	63c <usart_init+0x30>
     63a:	e0dd      	b.n	7f8 <usart_init+0x1ec>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     63c:	4b73      	ldr	r3, [pc, #460]	; (80c <usart_init+0x200>)
     63e:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     640:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     642:	2701      	movs	r7, #1
     644:	4097      	lsls	r7, r2
     646:	1c3a      	adds	r2, r7, #0
     648:	430a      	orrs	r2, r1
     64a:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     64c:	a90b      	add	r1, sp, #44	; 0x2c
     64e:	7f73      	ldrb	r3, [r6, #29]
     650:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     652:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     654:	b2c7      	uxtb	r7, r0
     656:	1c38      	adds	r0, r7, #0
     658:	4b6d      	ldr	r3, [pc, #436]	; (810 <usart_init+0x204>)
     65a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     65c:	1c38      	adds	r0, r7, #0
     65e:	4b6d      	ldr	r3, [pc, #436]	; (814 <usart_init+0x208>)
     660:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     662:	7f70      	ldrb	r0, [r6, #29]
     664:	2100      	movs	r1, #0
     666:	4b6c      	ldr	r3, [pc, #432]	; (818 <usart_init+0x20c>)
     668:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     66a:	7af3      	ldrb	r3, [r6, #11]
     66c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     66e:	7d33      	ldrb	r3, [r6, #20]
     670:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     672:	7d73      	ldrb	r3, [r6, #21]
     674:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     676:	682f      	ldr	r7, [r5, #0]
     678:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     67a:	1c38      	adds	r0, r7, #0
     67c:	4b62      	ldr	r3, [pc, #392]	; (808 <usart_init+0x1fc>)
     67e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     680:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     682:	2200      	movs	r2, #0
     684:	466b      	mov	r3, sp
     686:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     688:	6831      	ldr	r1, [r6, #0]
     68a:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
     68c:	68f2      	ldr	r2, [r6, #12]
     68e:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     690:	7db3      	ldrb	r3, [r6, #22]
     692:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     694:	6873      	ldr	r3, [r6, #4]
     696:	2b00      	cmp	r3, #0
     698:	d013      	beq.n	6c2 <usart_init+0xb6>
     69a:	2280      	movs	r2, #128	; 0x80
     69c:	0552      	lsls	r2, r2, #21
     69e:	4293      	cmp	r3, r2
     6a0:	d12b      	bne.n	6fa <usart_init+0xee>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     6a2:	7df3      	ldrb	r3, [r6, #23]
     6a4:	2b00      	cmp	r3, #0
     6a6:	d001      	beq.n	6ac <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6a8:	682a      	ldr	r2, [r5, #0]
     6aa:	e02a      	b.n	702 <usart_init+0xf6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     6ac:	6937      	ldr	r7, [r6, #16]
     6ae:	b2c0      	uxtb	r0, r0
     6b0:	4b5a      	ldr	r3, [pc, #360]	; (81c <usart_init+0x210>)
     6b2:	4798      	blx	r3
     6b4:	1c01      	adds	r1, r0, #0
     6b6:	1c38      	adds	r0, r7, #0
     6b8:	466a      	mov	r2, sp
     6ba:	3216      	adds	r2, #22
     6bc:	4b58      	ldr	r3, [pc, #352]	; (820 <usart_init+0x214>)
     6be:	4798      	blx	r3
     6c0:	e01c      	b.n	6fc <usart_init+0xf0>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     6c2:	7df3      	ldrb	r3, [r6, #23]
     6c4:	2b00      	cmp	r3, #0
     6c6:	d009      	beq.n	6dc <usart_init+0xd0>
				status_code =
     6c8:	2310      	movs	r3, #16
     6ca:	9300      	str	r3, [sp, #0]
     6cc:	6930      	ldr	r0, [r6, #16]
     6ce:	69b1      	ldr	r1, [r6, #24]
     6d0:	466a      	mov	r2, sp
     6d2:	3216      	adds	r2, #22
     6d4:	2300      	movs	r3, #0
     6d6:	4f53      	ldr	r7, [pc, #332]	; (824 <usart_init+0x218>)
     6d8:	47b8      	blx	r7
     6da:	e00f      	b.n	6fc <usart_init+0xf0>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     6dc:	6931      	ldr	r1, [r6, #16]
     6de:	468b      	mov	fp, r1
     6e0:	b2c0      	uxtb	r0, r0
     6e2:	4b4e      	ldr	r3, [pc, #312]	; (81c <usart_init+0x210>)
     6e4:	4798      	blx	r3
     6e6:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     6e8:	2310      	movs	r3, #16
     6ea:	9300      	str	r3, [sp, #0]
     6ec:	4658      	mov	r0, fp
     6ee:	466a      	mov	r2, sp
     6f0:	3216      	adds	r2, #22
     6f2:	2300      	movs	r3, #0
     6f4:	4f4b      	ldr	r7, [pc, #300]	; (824 <usart_init+0x218>)
     6f6:	47b8      	blx	r7
     6f8:	e000      	b.n	6fc <usart_init+0xf0>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     6fa:	2000      	movs	r0, #0
     6fc:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     6fe:	d17b      	bne.n	7f8 <usart_init+0x1ec>
     700:	e7d2      	b.n	6a8 <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     702:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     704:	0418      	lsls	r0, r3, #16
     706:	d4fc      	bmi.n	702 <usart_init+0xf6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     708:	466b      	mov	r3, sp
     70a:	3316      	adds	r3, #22
     70c:	881b      	ldrh	r3, [r3, #0]
     70e:	9f03      	ldr	r7, [sp, #12]
     710:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     712:	4651      	mov	r1, sl
     714:	4648      	mov	r0, r9
     716:	4301      	orrs	r1, r0
     718:	6872      	ldr	r2, [r6, #4]
     71a:	4311      	orrs	r1, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     71c:	4647      	mov	r7, r8
     71e:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     720:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     722:	7df3      	ldrb	r3, [r6, #23]
     724:	2b00      	cmp	r3, #0
     726:	d101      	bne.n	72c <usart_init+0x120>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     728:	2304      	movs	r3, #4
     72a:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     72c:	7d30      	ldrb	r0, [r6, #20]
     72e:	0440      	lsls	r0, r0, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     730:	7d73      	ldrb	r3, [r6, #21]
     732:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     734:	4318      	orrs	r0, r3
     736:	7af2      	ldrb	r2, [r6, #11]
     738:	7ab3      	ldrb	r3, [r6, #10]
     73a:	4313      	orrs	r3, r2
     73c:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     73e:	8933      	ldrh	r3, [r6, #8]
     740:	2bff      	cmp	r3, #255	; 0xff
     742:	d003      	beq.n	74c <usart_init+0x140>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     744:	2280      	movs	r2, #128	; 0x80
     746:	0452      	lsls	r2, r2, #17
     748:	4311      	orrs	r1, r2
#endif
		ctrlb |= config->parity;
     74a:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     74c:	7f33      	ldrb	r3, [r6, #28]
     74e:	2b00      	cmp	r3, #0
     750:	d103      	bne.n	75a <usart_init+0x14e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     752:	4b35      	ldr	r3, [pc, #212]	; (828 <usart_init+0x21c>)
     754:	681b      	ldr	r3, [r3, #0]
     756:	039a      	lsls	r2, r3, #14
     758:	d501      	bpl.n	75e <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     75a:	2380      	movs	r3, #128	; 0x80
     75c:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     75e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     760:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     762:	041f      	lsls	r7, r3, #16
     764:	d4fc      	bmi.n	760 <usart_init+0x154>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     766:	9f03      	ldr	r7, [sp, #12]
     768:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     76a:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     76c:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     76e:	0418      	lsls	r0, r3, #16
     770:	d4fc      	bmi.n	76c <usart_init+0x160>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     772:	9f03      	ldr	r7, [sp, #12]
     774:	6039      	str	r1, [r7, #0]
     776:	ab0a      	add	r3, sp, #40	; 0x28
     778:	2280      	movs	r2, #128	; 0x80
     77a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     77c:	2200      	movs	r2, #0
     77e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     780:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     782:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     784:	6a30      	ldr	r0, [r6, #32]
     786:	9006      	str	r0, [sp, #24]
     788:	6a71      	ldr	r1, [r6, #36]	; 0x24
     78a:	9107      	str	r1, [sp, #28]
     78c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     78e:	9208      	str	r2, [sp, #32]
     790:	6af6      	ldr	r6, [r6, #44]	; 0x2c
     792:	9609      	str	r6, [sp, #36]	; 0x24
     794:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     796:	1c1e      	adds	r6, r3, #0
     798:	b2f9      	uxtb	r1, r7
     79a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     79c:	aa06      	add	r2, sp, #24
     79e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     7a0:	2800      	cmp	r0, #0
     7a2:	d102      	bne.n	7aa <usart_init+0x19e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     7a4:	1c20      	adds	r0, r4, #0
     7a6:	4b21      	ldr	r3, [pc, #132]	; (82c <usart_init+0x220>)
     7a8:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     7aa:	1c41      	adds	r1, r0, #1
     7ac:	d005      	beq.n	7ba <usart_init+0x1ae>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     7ae:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     7b0:	0c00      	lsrs	r0, r0, #16
     7b2:	b2c0      	uxtb	r0, r0
     7b4:	1c31      	adds	r1, r6, #0
     7b6:	4a1e      	ldr	r2, [pc, #120]	; (830 <usart_init+0x224>)
     7b8:	4790      	blx	r2
     7ba:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     7bc:	2f04      	cmp	r7, #4
     7be:	d1eb      	bne.n	798 <usart_init+0x18c>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     7c0:	2300      	movs	r3, #0
     7c2:	60ab      	str	r3, [r5, #8]
     7c4:	60eb      	str	r3, [r5, #12]
     7c6:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
     7c8:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     7ca:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     7cc:	2200      	movs	r2, #0
     7ce:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     7d0:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     7d2:	2320      	movs	r3, #32
     7d4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     7d6:	2321      	movs	r3, #33	; 0x21
     7d8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     7da:	2322      	movs	r3, #34	; 0x22
     7dc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     7de:	2323      	movs	r3, #35	; 0x23
     7e0:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     7e2:	6828      	ldr	r0, [r5, #0]
     7e4:	4b08      	ldr	r3, [pc, #32]	; (808 <usart_init+0x1fc>)
     7e6:	4798      	blx	r3
     7e8:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     7ea:	4912      	ldr	r1, [pc, #72]	; (834 <usart_init+0x228>)
     7ec:	4b12      	ldr	r3, [pc, #72]	; (838 <usart_init+0x22c>)
     7ee:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     7f0:	00a4      	lsls	r4, r4, #2
     7f2:	4b12      	ldr	r3, [pc, #72]	; (83c <usart_init+0x230>)
     7f4:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     7f6:	2300      	movs	r3, #0
}
     7f8:	1c18      	adds	r0, r3, #0
     7fa:	b00d      	add	sp, #52	; 0x34
     7fc:	bc3c      	pop	{r2, r3, r4, r5}
     7fe:	4690      	mov	r8, r2
     800:	4699      	mov	r9, r3
     802:	46a2      	mov	sl, r4
     804:	46ab      	mov	fp, r5
     806:	bdf0      	pop	{r4, r5, r6, r7, pc}
     808:	00000539 	.word	0x00000539
     80c:	40000400 	.word	0x40000400
     810:	00001021 	.word	0x00001021
     814:	00000f91 	.word	0x00000f91
     818:	00000361 	.word	0x00000361
     81c:	0000103d 	.word	0x0000103d
     820:	00000185 	.word	0x00000185
     824:	000001b1 	.word	0x000001b1
     828:	41002000 	.word	0x41002000
     82c:	000003b1 	.word	0x000003b1
     830:	00001101 	.word	0x00001101
     834:	0000098d 	.word	0x0000098d
     838:	00000ac9 	.word	0x00000ac9
     83c:	20000144 	.word	0x20000144

00000840 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     840:	b510      	push	{r4, lr}
     842:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     844:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     846:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     848:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     84a:	2c00      	cmp	r4, #0
     84c:	d00e      	beq.n	86c <usart_write_wait+0x2c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     84e:	69d2      	ldr	r2, [r2, #28]
     850:	0c12      	lsrs	r2, r2, #16
		return STATUS_BUSY;
     852:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     854:	2a00      	cmp	r2, #0
     856:	d109      	bne.n	86c <usart_write_wait+0x2c>
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     858:	691a      	ldr	r2, [r3, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     85a:	0410      	lsls	r0, r2, #16
     85c:	d4fc      	bmi.n	858 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     85e:	8319      	strh	r1, [r3, #24]

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     860:	2102      	movs	r1, #2
     862:	68da      	ldr	r2, [r3, #12]
     864:	0c12      	lsrs	r2, r2, #16
     866:	420a      	tst	r2, r1
     868:	d0fb      	beq.n	862 <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     86a:	2000      	movs	r0, #0
}
     86c:	bd10      	pop	{r4, pc}
     86e:	46c0      	nop			; (mov r8, r8)

00000870 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     870:	b510      	push	{r4, lr}
     872:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     874:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     876:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     878:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     87a:	2a00      	cmp	r2, #0
     87c:	d023      	beq.n	8c6 <usart_read_wait+0x56>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     87e:	69db      	ldr	r3, [r3, #28]
     880:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     882:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     884:	2b00      	cmp	r3, #0
     886:	d11e      	bne.n	8c6 <usart_read_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     888:	68e3      	ldr	r3, [r4, #12]
     88a:	035a      	lsls	r2, r3, #13
     88c:	d51b      	bpl.n	8c6 <usart_read_wait+0x56>
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     88e:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     890:	041a      	lsls	r2, r3, #16
     892:	d4fc      	bmi.n	88e <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     894:	6923      	ldr	r3, [r4, #16]
     896:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     898:	075a      	lsls	r2, r3, #29
     89a:	d011      	beq.n	8c0 <usart_read_wait+0x50>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     89c:	079a      	lsls	r2, r3, #30
     89e:	d503      	bpl.n	8a8 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     8a0:	2302      	movs	r3, #2
     8a2:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_BAD_FORMAT;
     8a4:	201a      	movs	r0, #26
     8a6:	e00e      	b.n	8c6 <usart_read_wait+0x56>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     8a8:	075a      	lsls	r2, r3, #29
     8aa:	d503      	bpl.n	8b4 <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     8ac:	2304      	movs	r3, #4
     8ae:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_OVERFLOW;
     8b0:	201e      	movs	r0, #30
     8b2:	e008      	b.n	8c6 <usart_read_wait+0x56>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     8b4:	07da      	lsls	r2, r3, #31
     8b6:	d503      	bpl.n	8c0 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     8b8:	2301      	movs	r3, #1
     8ba:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_BAD_DATA;
     8bc:	2013      	movs	r0, #19
     8be:	e002      	b.n	8c6 <usart_read_wait+0x56>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     8c0:	69a3      	ldr	r3, [r4, #24]
     8c2:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     8c4:	2000      	movs	r0, #0
}
     8c6:	bd10      	pop	{r4, pc}

000008c8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ca:	4657      	mov	r7, sl
     8cc:	464e      	mov	r6, r9
     8ce:	4645      	mov	r5, r8
     8d0:	b4e0      	push	{r5, r6, r7}
     8d2:	1c06      	adds	r6, r0, #0
     8d4:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     8d6:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     8d8:	2a00      	cmp	r2, #0
     8da:	d04d      	beq.n	978 <usart_write_buffer_wait+0xb0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8dc:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     8de:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8e0:	2b00      	cmp	r3, #0
     8e2:	d049      	beq.n	978 <usart_write_buffer_wait+0xb0>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8e4:	6834      	ldr	r4, [r6, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     8e6:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8e8:	0419      	lsls	r1, r3, #16
     8ea:	d4fc      	bmi.n	8e6 <usart_write_buffer_wait+0x1e>
     8ec:	4692      	mov	sl, r2
     8ee:	2700      	movs	r7, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     8f0:	2501      	movs	r5, #1
     8f2:	4a24      	ldr	r2, [pc, #144]	; (984 <usart_write_buffer_wait+0xbc>)
     8f4:	4691      	mov	r9, r2
     8f6:	e020      	b.n	93a <usart_write_buffer_wait+0x72>
     8f8:	68e2      	ldr	r2, [r4, #12]
     8fa:	0c12      	lsrs	r2, r2, #16
     8fc:	422a      	tst	r2, r5
     8fe:	d104      	bne.n	90a <usart_write_buffer_wait+0x42>
				break;
			} else if (i == USART_TIMEOUT) {
     900:	2b01      	cmp	r3, #1
     902:	d02b      	beq.n	95c <usart_write_buffer_wait+0x94>
     904:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     906:	2b00      	cmp	r3, #0
     908:	d1f6      	bne.n	8f8 <usart_write_buffer_wait+0x30>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     90a:	1c7b      	adds	r3, r7, #1
     90c:	b29b      	uxth	r3, r3
     90e:	4642      	mov	r2, r8
     910:	5dd1      	ldrb	r1, [r2, r7]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     912:	7972      	ldrb	r2, [r6, #5]
     914:	2a01      	cmp	r2, #1
     916:	d001      	beq.n	91c <usart_write_buffer_wait+0x54>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     918:	1c1f      	adds	r7, r3, #0
     91a:	e005      	b.n	928 <usart_write_buffer_wait+0x60>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     91c:	1cba      	adds	r2, r7, #2
     91e:	b297      	uxth	r7, r2
     920:	4642      	mov	r2, r8
     922:	5cd3      	ldrb	r3, [r2, r3]
     924:	021b      	lsls	r3, r3, #8
     926:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     928:	1c30      	adds	r0, r6, #0
     92a:	4b17      	ldr	r3, [pc, #92]	; (988 <usart_write_buffer_wait+0xc0>)
     92c:	4798      	blx	r3
     92e:	4653      	mov	r3, sl
     930:	3b01      	subs	r3, #1
     932:	b29b      	uxth	r3, r3
     934:	469a      	mov	sl, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     936:	2b00      	cmp	r3, #0
     938:	d018      	beq.n	96c <usart_write_buffer_wait+0xa4>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     93a:	68e3      	ldr	r3, [r4, #12]
     93c:	0c1b      	lsrs	r3, r3, #16
     93e:	422b      	tst	r3, r5
     940:	d1e3      	bne.n	90a <usart_write_buffer_wait+0x42>
     942:	464b      	mov	r3, r9
     944:	e7d8      	b.n	8f8 <usart_write_buffer_wait+0x30>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     946:	68e2      	ldr	r2, [r4, #12]
     948:	0c12      	lsrs	r2, r2, #16
     94a:	420a      	tst	r2, r1
     94c:	d108      	bne.n	960 <usart_write_buffer_wait+0x98>
			break;
		} else if (i == USART_TIMEOUT) {
     94e:	2b01      	cmp	r3, #1
     950:	d008      	beq.n	964 <usart_write_buffer_wait+0x9c>
     952:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     954:	2b00      	cmp	r3, #0
     956:	d1f6      	bne.n	946 <usart_write_buffer_wait+0x7e>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     958:	2000      	movs	r0, #0
     95a:	e00d      	b.n	978 <usart_write_buffer_wait+0xb0>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     95c:	2012      	movs	r0, #18
     95e:	e00b      	b.n	978 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     960:	2000      	movs	r0, #0
     962:	e009      	b.n	978 <usart_write_buffer_wait+0xb0>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     964:	2012      	movs	r0, #18
     966:	e007      	b.n	978 <usart_write_buffer_wait+0xb0>
		}
	}

	return STATUS_OK;
     968:	2000      	movs	r0, #0
     96a:	e005      	b.n	978 <usart_write_buffer_wait+0xb0>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     96c:	68e3      	ldr	r3, [r4, #12]
     96e:	0399      	lsls	r1, r3, #14
     970:	d4fa      	bmi.n	968 <usart_write_buffer_wait+0xa0>
     972:	4b04      	ldr	r3, [pc, #16]	; (984 <usart_write_buffer_wait+0xbc>)
     974:	2102      	movs	r1, #2
     976:	e7e6      	b.n	946 <usart_write_buffer_wait+0x7e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     978:	bc1c      	pop	{r2, r3, r4}
     97a:	4690      	mov	r8, r2
     97c:	4699      	mov	r9, r3
     97e:	46a2      	mov	sl, r4
     980:	bdf0      	pop	{r4, r5, r6, r7, pc}
     982:	46c0      	nop			; (mov r8, r8)
     984:	0000ffff 	.word	0x0000ffff
     988:	00000841 	.word	0x00000841

0000098c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     98e:	0080      	lsls	r0, r0, #2
     990:	4b4b      	ldr	r3, [pc, #300]	; (ac0 <_usart_interrupt_handler+0x134>)
     992:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     994:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     996:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     998:	0419      	lsls	r1, r3, #16
     99a:	d4fc      	bmi.n	996 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     99c:	68e6      	ldr	r6, [r4, #12]
     99e:	0c36      	lsrs	r6, r6, #16
	interrupt_status &= usart_hw->INTENSET.reg;
     9a0:	68e3      	ldr	r3, [r4, #12]
     9a2:	041b      	lsls	r3, r3, #16
     9a4:	0e1b      	lsrs	r3, r3, #24
     9a6:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     9a8:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     9aa:	5ceb      	ldrb	r3, [r5, r3]
     9ac:	2220      	movs	r2, #32
     9ae:	5caa      	ldrb	r2, [r5, r2]
     9b0:	1c17      	adds	r7, r2, #0
     9b2:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     9b4:	07f2      	lsls	r2, r6, #31
     9b6:	d520      	bpl.n	9fa <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     9b8:	69eb      	ldr	r3, [r5, #28]
     9ba:	0c1b      	lsrs	r3, r3, #16
     9bc:	d01b      	beq.n	9f6 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9be:	69ab      	ldr	r3, [r5, #24]
     9c0:	781a      	ldrb	r2, [r3, #0]
     9c2:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9c4:	1c59      	adds	r1, r3, #1
     9c6:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9c8:	7969      	ldrb	r1, [r5, #5]
     9ca:	2901      	cmp	r1, #1
     9cc:	d104      	bne.n	9d8 <_usart_interrupt_handler+0x4c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9ce:	7859      	ldrb	r1, [r3, #1]
     9d0:	0209      	lsls	r1, r1, #8
     9d2:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     9d4:	3302      	adds	r3, #2
     9d6:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9d8:	05d3      	lsls	r3, r2, #23
     9da:	0ddb      	lsrs	r3, r3, #23
     9dc:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     9de:	69eb      	ldr	r3, [r5, #28]
     9e0:	0c1b      	lsrs	r3, r3, #16
     9e2:	3b01      	subs	r3, #1
     9e4:	b29b      	uxth	r3, r3
     9e6:	83eb      	strh	r3, [r5, #30]
     9e8:	2b00      	cmp	r3, #0
     9ea:	d106      	bne.n	9fa <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9ec:	2301      	movs	r3, #1
     9ee:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9f0:	2302      	movs	r3, #2
     9f2:	7363      	strb	r3, [r4, #13]
     9f4:	e001      	b.n	9fa <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9f6:	2301      	movs	r3, #1
     9f8:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9fa:	07b3      	lsls	r3, r6, #30
     9fc:	d509      	bpl.n	a12 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9fe:	2302      	movs	r3, #2
     a00:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     a02:	2200      	movs	r2, #0
     a04:	2323      	movs	r3, #35	; 0x23
     a06:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     a08:	07f9      	lsls	r1, r7, #31
     a0a:	d502      	bpl.n	a12 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a0c:	1c28      	adds	r0, r5, #0
     a0e:	68aa      	ldr	r2, [r5, #8]
     a10:	4790      	blx	r2

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     a12:	0773      	lsls	r3, r6, #29
     a14:	d552      	bpl.n	abc <_usart_interrupt_handler+0x130>

		if (module->remaining_rx_buffer_length) {
     a16:	69eb      	ldr	r3, [r5, #28]
     a18:	b29b      	uxth	r3, r3
     a1a:	2b00      	cmp	r3, #0
     a1c:	d04c      	beq.n	ab8 <_usart_interrupt_handler+0x12c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a1e:	6923      	ldr	r3, [r4, #16]
     a20:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a22:	0759      	lsls	r1, r3, #29
     a24:	d025      	beq.n	a72 <_usart_interrupt_handler+0xe6>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a26:	079a      	lsls	r2, r3, #30
     a28:	d508      	bpl.n	a3c <_usart_interrupt_handler+0xb0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a2a:	221a      	movs	r2, #26
     a2c:	2322      	movs	r3, #34	; 0x22
     a2e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     a30:	6922      	ldr	r2, [r4, #16]
     a32:	b292      	uxth	r2, r2
     a34:	2302      	movs	r3, #2
     a36:	4313      	orrs	r3, r2
     a38:	8223      	strh	r3, [r4, #16]
     a3a:	e014      	b.n	a66 <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a3c:	0759      	lsls	r1, r3, #29
     a3e:	d508      	bpl.n	a52 <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     a40:	221e      	movs	r2, #30
     a42:	2322      	movs	r3, #34	; 0x22
     a44:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     a46:	6922      	ldr	r2, [r4, #16]
     a48:	b292      	uxth	r2, r2
     a4a:	2304      	movs	r3, #4
     a4c:	4313      	orrs	r3, r2
     a4e:	8223      	strh	r3, [r4, #16]
     a50:	e009      	b.n	a66 <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a52:	07da      	lsls	r2, r3, #31
     a54:	d507      	bpl.n	a66 <_usart_interrupt_handler+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a56:	2213      	movs	r2, #19
     a58:	2322      	movs	r3, #34	; 0x22
     a5a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a5c:	6922      	ldr	r2, [r4, #16]
     a5e:	b292      	uxth	r2, r2
     a60:	2301      	movs	r3, #1
     a62:	4313      	orrs	r3, r2
     a64:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a66:	077b      	lsls	r3, r7, #29
     a68:	d528      	bpl.n	abc <_usart_interrupt_handler+0x130>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a6a:	692b      	ldr	r3, [r5, #16]
     a6c:	1c28      	adds	r0, r5, #0
     a6e:	4798      	blx	r3
     a70:	e024      	b.n	abc <_usart_interrupt_handler+0x130>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a72:	69a2      	ldr	r2, [r4, #24]
     a74:	05d2      	lsls	r2, r2, #23
     a76:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a78:	b2d3      	uxtb	r3, r2
     a7a:	6969      	ldr	r1, [r5, #20]
     a7c:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a7e:	696b      	ldr	r3, [r5, #20]
     a80:	1c59      	adds	r1, r3, #1
     a82:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a84:	7969      	ldrb	r1, [r5, #5]
     a86:	2901      	cmp	r1, #1
     a88:	d104      	bne.n	a94 <_usart_interrupt_handler+0x108>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a8a:	0a12      	lsrs	r2, r2, #8
     a8c:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     a8e:	696b      	ldr	r3, [r5, #20]
     a90:	3301      	adds	r3, #1
     a92:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a94:	69eb      	ldr	r3, [r5, #28]
     a96:	b29b      	uxth	r3, r3
     a98:	3b01      	subs	r3, #1
     a9a:	b29b      	uxth	r3, r3
     a9c:	83ab      	strh	r3, [r5, #28]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d10c      	bne.n	abc <_usart_interrupt_handler+0x130>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     aa2:	2304      	movs	r3, #4
     aa4:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     aa6:	2200      	movs	r2, #0
     aa8:	2322      	movs	r3, #34	; 0x22
     aaa:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     aac:	07ba      	lsls	r2, r7, #30
     aae:	d505      	bpl.n	abc <_usart_interrupt_handler+0x130>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     ab0:	68eb      	ldr	r3, [r5, #12]
     ab2:	1c28      	adds	r0, r5, #0
     ab4:	4798      	blx	r3
     ab6:	e001      	b.n	abc <_usart_interrupt_handler+0x130>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ab8:	2304      	movs	r3, #4
     aba:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000144 	.word	0x20000144

00000ac4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     ac4:	4770      	bx	lr
     ac6:	46c0      	nop			; (mov r8, r8)

00000ac8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     aca:	4b0a      	ldr	r3, [pc, #40]	; (af4 <_sercom_set_handler+0x2c>)
     acc:	781b      	ldrb	r3, [r3, #0]
     ace:	2b00      	cmp	r3, #0
     ad0:	d10c      	bne.n	aec <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ad2:	4f09      	ldr	r7, [pc, #36]	; (af8 <_sercom_set_handler+0x30>)
     ad4:	4e09      	ldr	r6, [pc, #36]	; (afc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     ad6:	4d0a      	ldr	r5, [pc, #40]	; (b00 <_sercom_set_handler+0x38>)
     ad8:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     ada:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     adc:	195a      	adds	r2, r3, r5
     ade:	6014      	str	r4, [r2, #0]
     ae0:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     ae2:	2b18      	cmp	r3, #24
     ae4:	d1f9      	bne.n	ada <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     ae6:	2201      	movs	r2, #1
     ae8:	4b02      	ldr	r3, [pc, #8]	; (af4 <_sercom_set_handler+0x2c>)
     aea:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     aec:	0080      	lsls	r0, r0, #2
     aee:	4b02      	ldr	r3, [pc, #8]	; (af8 <_sercom_set_handler+0x30>)
     af0:	50c1      	str	r1, [r0, r3]
}
     af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af4:	2000008c 	.word	0x2000008c
     af8:	20000090 	.word	0x20000090
     afc:	00000ac5 	.word	0x00000ac5
     b00:	20000144 	.word	0x20000144

00000b04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b04:	b510      	push	{r4, lr}
     b06:	b082      	sub	sp, #8
     b08:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b0a:	4668      	mov	r0, sp
     b0c:	4905      	ldr	r1, [pc, #20]	; (b24 <_sercom_get_interrupt_vector+0x20>)
     b0e:	2206      	movs	r2, #6
     b10:	4b05      	ldr	r3, [pc, #20]	; (b28 <_sercom_get_interrupt_vector+0x24>)
     b12:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b14:	1c20      	adds	r0, r4, #0
     b16:	4b05      	ldr	r3, [pc, #20]	; (b2c <_sercom_get_interrupt_vector+0x28>)
     b18:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b1a:	466b      	mov	r3, sp
     b1c:	5618      	ldrsb	r0, [r3, r0]
}
     b1e:	b002      	add	sp, #8
     b20:	bd10      	pop	{r4, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	000031c0 	.word	0x000031c0
     b28:	0000175d 	.word	0x0000175d
     b2c:	00000539 	.word	0x00000539

00000b30 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b30:	b508      	push	{r3, lr}
     b32:	4b02      	ldr	r3, [pc, #8]	; (b3c <SERCOM0_Handler+0xc>)
     b34:	681b      	ldr	r3, [r3, #0]
     b36:	2000      	movs	r0, #0
     b38:	4798      	blx	r3
     b3a:	bd08      	pop	{r3, pc}
     b3c:	20000090 	.word	0x20000090

00000b40 <SERCOM1_Handler>:
     b40:	b508      	push	{r3, lr}
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <SERCOM1_Handler+0xc>)
     b44:	685b      	ldr	r3, [r3, #4]
     b46:	2001      	movs	r0, #1
     b48:	4798      	blx	r3
     b4a:	bd08      	pop	{r3, pc}
     b4c:	20000090 	.word	0x20000090

00000b50 <SERCOM2_Handler>:
     b50:	b508      	push	{r3, lr}
     b52:	4b02      	ldr	r3, [pc, #8]	; (b5c <SERCOM2_Handler+0xc>)
     b54:	689b      	ldr	r3, [r3, #8]
     b56:	2002      	movs	r0, #2
     b58:	4798      	blx	r3
     b5a:	bd08      	pop	{r3, pc}
     b5c:	20000090 	.word	0x20000090

00000b60 <SERCOM3_Handler>:
     b60:	b508      	push	{r3, lr}
     b62:	4b02      	ldr	r3, [pc, #8]	; (b6c <SERCOM3_Handler+0xc>)
     b64:	68db      	ldr	r3, [r3, #12]
     b66:	2003      	movs	r0, #3
     b68:	4798      	blx	r3
     b6a:	bd08      	pop	{r3, pc}
     b6c:	20000090 	.word	0x20000090

00000b70 <SERCOM4_Handler>:
     b70:	b508      	push	{r3, lr}
     b72:	4b02      	ldr	r3, [pc, #8]	; (b7c <SERCOM4_Handler+0xc>)
     b74:	691b      	ldr	r3, [r3, #16]
     b76:	2004      	movs	r0, #4
     b78:	4798      	blx	r3
     b7a:	bd08      	pop	{r3, pc}
     b7c:	20000090 	.word	0x20000090

00000b80 <SERCOM5_Handler>:
     b80:	b508      	push	{r3, lr}
     b82:	4b02      	ldr	r3, [pc, #8]	; (b8c <SERCOM5_Handler+0xc>)
     b84:	695b      	ldr	r3, [r3, #20]
     b86:	2005      	movs	r0, #5
     b88:	4798      	blx	r3
     b8a:	bd08      	pop	{r3, pc}
     b8c:	20000090 	.word	0x20000090

00000b90 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     b90:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     b92:	4b08      	ldr	r3, [pc, #32]	; (bb4 <delay_cycles_ms+0x24>)
     b94:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     b96:	4a08      	ldr	r2, [pc, #32]	; (bb8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     b98:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b9a:	2180      	movs	r1, #128	; 0x80
     b9c:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     b9e:	e006      	b.n	bae <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     ba0:	2c00      	cmp	r4, #0
     ba2:	d004      	beq.n	bae <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     ba4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     ba6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ba8:	6813      	ldr	r3, [r2, #0]
     baa:	420b      	tst	r3, r1
     bac:	d0fc      	beq.n	ba8 <delay_cycles_ms+0x18>
     bae:	3801      	subs	r0, #1
     bb0:	d2f6      	bcs.n	ba0 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     bb2:	bd30      	pop	{r4, r5, pc}
     bb4:	20000000 	.word	0x20000000
     bb8:	e000e010 	.word	0xe000e010

00000bbc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     bbc:	4770      	bx	lr
     bbe:	46c0      	nop			; (mov r8, r8)

00000bc0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <cpu_irq_enter_critical+0x34>)
     bc2:	681b      	ldr	r3, [r3, #0]
     bc4:	2b00      	cmp	r3, #0
     bc6:	d110      	bne.n	bea <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bc8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bcc:	2b00      	cmp	r3, #0
     bce:	d109      	bne.n	be4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     bd0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bd2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bd6:	2200      	movs	r2, #0
     bd8:	4b07      	ldr	r3, [pc, #28]	; (bf8 <cpu_irq_enter_critical+0x38>)
     bda:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bdc:	2201      	movs	r2, #1
     bde:	4b07      	ldr	r3, [pc, #28]	; (bfc <cpu_irq_enter_critical+0x3c>)
     be0:	701a      	strb	r2, [r3, #0]
     be2:	e002      	b.n	bea <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     be4:	2200      	movs	r2, #0
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <cpu_irq_enter_critical+0x3c>)
     be8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bea:	4b02      	ldr	r3, [pc, #8]	; (bf4 <cpu_irq_enter_critical+0x34>)
     bec:	681a      	ldr	r2, [r3, #0]
     bee:	3201      	adds	r2, #1
     bf0:	601a      	str	r2, [r3, #0]
}
     bf2:	4770      	bx	lr
     bf4:	200000a8 	.word	0x200000a8
     bf8:	20000004 	.word	0x20000004
     bfc:	200000ac 	.word	0x200000ac

00000c00 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c00:	4b08      	ldr	r3, [pc, #32]	; (c24 <cpu_irq_leave_critical+0x24>)
     c02:	681a      	ldr	r2, [r3, #0]
     c04:	3a01      	subs	r2, #1
     c06:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c08:	681b      	ldr	r3, [r3, #0]
     c0a:	2b00      	cmp	r3, #0
     c0c:	d109      	bne.n	c22 <cpu_irq_leave_critical+0x22>
     c0e:	4b06      	ldr	r3, [pc, #24]	; (c28 <cpu_irq_leave_critical+0x28>)
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b00      	cmp	r3, #0
     c14:	d005      	beq.n	c22 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c16:	2201      	movs	r2, #1
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <cpu_irq_leave_critical+0x2c>)
     c1a:	701a      	strb	r2, [r3, #0]
     c1c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c20:	b662      	cpsie	i
	}
}
     c22:	4770      	bx	lr
     c24:	200000a8 	.word	0x200000a8
     c28:	200000ac 	.word	0x200000ac
     c2c:	20000004 	.word	0x20000004

00000c30 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c30:	b508      	push	{r3, lr}
	switch (clock_source) {
     c32:	2807      	cmp	r0, #7
     c34:	d82b      	bhi.n	c8e <system_clock_source_get_hz+0x5e>
     c36:	0080      	lsls	r0, r0, #2
     c38:	4b17      	ldr	r3, [pc, #92]	; (c98 <system_clock_source_get_hz+0x68>)
     c3a:	581b      	ldr	r3, [r3, r0]
     c3c:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     c3e:	2080      	movs	r0, #128	; 0x80
     c40:	0200      	lsls	r0, r0, #8
     c42:	e027      	b.n	c94 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     c44:	4b15      	ldr	r3, [pc, #84]	; (c9c <system_clock_source_get_hz+0x6c>)
     c46:	68d8      	ldr	r0, [r3, #12]
     c48:	e024      	b.n	c94 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c4a:	4b15      	ldr	r3, [pc, #84]	; (ca0 <system_clock_source_get_hz+0x70>)
     c4c:	6a18      	ldr	r0, [r3, #32]
     c4e:	0580      	lsls	r0, r0, #22
     c50:	0f80      	lsrs	r0, r0, #30
     c52:	4b14      	ldr	r3, [pc, #80]	; (ca4 <system_clock_source_get_hz+0x74>)
     c54:	40c3      	lsrs	r3, r0
     c56:	1c18      	adds	r0, r3, #0
     c58:	e01c      	b.n	c94 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     c5a:	4b10      	ldr	r3, [pc, #64]	; (c9c <system_clock_source_get_hz+0x6c>)
     c5c:	6918      	ldr	r0, [r3, #16]
     c5e:	e019      	b.n	c94 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c60:	4b0e      	ldr	r3, [pc, #56]	; (c9c <system_clock_source_get_hz+0x6c>)
     c62:	681b      	ldr	r3, [r3, #0]
     c64:	2002      	movs	r0, #2
     c66:	4018      	ands	r0, r3
     c68:	d014      	beq.n	c94 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c6a:	490d      	ldr	r1, [pc, #52]	; (ca0 <system_clock_source_get_hz+0x70>)
     c6c:	2210      	movs	r2, #16
     c6e:	68cb      	ldr	r3, [r1, #12]
     c70:	421a      	tst	r2, r3
     c72:	d0fc      	beq.n	c6e <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     c74:	4b09      	ldr	r3, [pc, #36]	; (c9c <system_clock_source_get_hz+0x6c>)
     c76:	681b      	ldr	r3, [r3, #0]
     c78:	075a      	lsls	r2, r3, #29
     c7a:	d50a      	bpl.n	c92 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c7c:	2000      	movs	r0, #0
     c7e:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <system_clock_source_get_hz+0x78>)
     c80:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     c82:	4b06      	ldr	r3, [pc, #24]	; (c9c <system_clock_source_get_hz+0x6c>)
     c84:	689b      	ldr	r3, [r3, #8]
     c86:	041b      	lsls	r3, r3, #16
     c88:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c8a:	4358      	muls	r0, r3
     c8c:	e002      	b.n	c94 <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
     c8e:	2000      	movs	r0, #0
     c90:	e000      	b.n	c94 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     c92:	4806      	ldr	r0, [pc, #24]	; (cac <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
     c94:	bd08      	pop	{r3, pc}
     c96:	46c0      	nop			; (mov r8, r8)
     c98:	000031c8 	.word	0x000031c8
     c9c:	200000b0 	.word	0x200000b0
     ca0:	40000800 	.word	0x40000800
     ca4:	007a1200 	.word	0x007a1200
     ca8:	0000103d 	.word	0x0000103d
     cac:	02dc6c00 	.word	0x02dc6c00

00000cb0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     cb0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     cb2:	4b0c      	ldr	r3, [pc, #48]	; (ce4 <system_clock_source_osc8m_set_config+0x34>)
     cb4:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     cb6:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     cb8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     cba:	7840      	ldrb	r0, [r0, #1]
     cbc:	2201      	movs	r2, #1
     cbe:	4010      	ands	r0, r2
     cc0:	0180      	lsls	r0, r0, #6
     cc2:	2640      	movs	r6, #64	; 0x40
     cc4:	43b4      	bics	r4, r6
     cc6:	4304      	orrs	r4, r0
     cc8:	402a      	ands	r2, r5
     cca:	01d0      	lsls	r0, r2, #7
     ccc:	2280      	movs	r2, #128	; 0x80
     cce:	4394      	bics	r4, r2
     cd0:	1c22      	adds	r2, r4, #0
     cd2:	4302      	orrs	r2, r0
     cd4:	2003      	movs	r0, #3
     cd6:	4001      	ands	r1, r0
     cd8:	0209      	lsls	r1, r1, #8
     cda:	4803      	ldr	r0, [pc, #12]	; (ce8 <system_clock_source_osc8m_set_config+0x38>)
     cdc:	4002      	ands	r2, r0
     cde:	430a      	orrs	r2, r1
     ce0:	621a      	str	r2, [r3, #32]
}
     ce2:	bd70      	pop	{r4, r5, r6, pc}
     ce4:	40000800 	.word	0x40000800
     ce8:	fffffcff 	.word	0xfffffcff

00000cec <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     cec:	2807      	cmp	r0, #7
     cee:	d83d      	bhi.n	d6c <system_clock_source_enable+0x80>
     cf0:	0080      	lsls	r0, r0, #2
     cf2:	4b1f      	ldr	r3, [pc, #124]	; (d70 <system_clock_source_enable+0x84>)
     cf4:	581b      	ldr	r3, [r3, r0]
     cf6:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     cf8:	2000      	movs	r0, #0
     cfa:	e038      	b.n	d6e <system_clock_source_enable+0x82>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     cfc:	4b1d      	ldr	r3, [pc, #116]	; (d74 <system_clock_source_enable+0x88>)
     cfe:	6a19      	ldr	r1, [r3, #32]
     d00:	2202      	movs	r2, #2
     d02:	430a      	orrs	r2, r1
     d04:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     d06:	2000      	movs	r0, #0
     d08:	e031      	b.n	d6e <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d0a:	4b1a      	ldr	r3, [pc, #104]	; (d74 <system_clock_source_enable+0x88>)
     d0c:	6999      	ldr	r1, [r3, #24]
     d0e:	2202      	movs	r2, #2
     d10:	430a      	orrs	r2, r1
     d12:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d14:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     d16:	e02a      	b.n	d6e <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d18:	4b16      	ldr	r3, [pc, #88]	; (d74 <system_clock_source_enable+0x88>)
     d1a:	691a      	ldr	r2, [r3, #16]
     d1c:	b292      	uxth	r2, r2
     d1e:	2102      	movs	r1, #2
     d20:	430a      	orrs	r2, r1
     d22:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d24:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     d26:	e022      	b.n	d6e <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d28:	4b12      	ldr	r3, [pc, #72]	; (d74 <system_clock_source_enable+0x88>)
     d2a:	695a      	ldr	r2, [r3, #20]
     d2c:	b292      	uxth	r2, r2
     d2e:	2102      	movs	r1, #2
     d30:	430a      	orrs	r2, r1
     d32:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d34:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     d36:	e01a      	b.n	d6e <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d38:	4b0f      	ldr	r3, [pc, #60]	; (d78 <system_clock_source_enable+0x8c>)
     d3a:	6819      	ldr	r1, [r3, #0]
     d3c:	2202      	movs	r2, #2
     d3e:	430a      	orrs	r2, r1
     d40:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d42:	681a      	ldr	r2, [r3, #0]
     d44:	4b0d      	ldr	r3, [pc, #52]	; (d7c <system_clock_source_enable+0x90>)
     d46:	401a      	ands	r2, r3
     d48:	4b0a      	ldr	r3, [pc, #40]	; (d74 <system_clock_source_enable+0x88>)
     d4a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d4c:	1c19      	adds	r1, r3, #0
     d4e:	2210      	movs	r2, #16
     d50:	68cb      	ldr	r3, [r1, #12]
     d52:	421a      	tst	r2, r3
     d54:	d0fc      	beq.n	d50 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     d56:	4a08      	ldr	r2, [pc, #32]	; (d78 <system_clock_source_enable+0x8c>)
     d58:	6891      	ldr	r1, [r2, #8]
     d5a:	4b06      	ldr	r3, [pc, #24]	; (d74 <system_clock_source_enable+0x88>)
     d5c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     d5e:	6851      	ldr	r1, [r2, #4]
     d60:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     d62:	6812      	ldr	r2, [r2, #0]
     d64:	b292      	uxth	r2, r2
     d66:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d68:	2000      	movs	r0, #0
     d6a:	e000      	b.n	d6e <system_clock_source_enable+0x82>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d6c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     d6e:	4770      	bx	lr
     d70:	000031e8 	.word	0x000031e8
     d74:	40000800 	.word	0x40000800
     d78:	200000b0 	.word	0x200000b0
     d7c:	0000ff7f 	.word	0x0000ff7f

00000d80 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
     d80:	b530      	push	{r4, r5, lr}
     d82:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d84:	22c2      	movs	r2, #194	; 0xc2
     d86:	00d2      	lsls	r2, r2, #3
     d88:	4b13      	ldr	r3, [pc, #76]	; (dd8 <system_clock_init+0x58>)
     d8a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d8c:	4b13      	ldr	r3, [pc, #76]	; (ddc <system_clock_init+0x5c>)
     d8e:	685a      	ldr	r2, [r3, #4]
     d90:	211e      	movs	r1, #30
     d92:	438a      	bics	r2, r1
     d94:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     d96:	a803      	add	r0, sp, #12
     d98:	2400      	movs	r4, #0
     d9a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d9c:	2501      	movs	r5, #1
     d9e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     da0:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     da2:	4b0f      	ldr	r3, [pc, #60]	; (de0 <system_clock_init+0x60>)
     da4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     da6:	2006      	movs	r0, #6
     da8:	4b0e      	ldr	r3, [pc, #56]	; (de4 <system_clock_init+0x64>)
     daa:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <system_clock_init+0x68>)
     dae:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     db0:	4b0e      	ldr	r3, [pc, #56]	; (dec <system_clock_init+0x6c>)
     db2:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     db4:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     db6:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     db8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     dba:	466a      	mov	r2, sp
     dbc:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     dbe:	2306      	movs	r3, #6
     dc0:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     dc2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     dc4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     dc6:	2000      	movs	r0, #0
     dc8:	4669      	mov	r1, sp
     dca:	4b09      	ldr	r3, [pc, #36]	; (df0 <system_clock_init+0x70>)
     dcc:	4798      	blx	r3
     dce:	2000      	movs	r0, #0
     dd0:	4b08      	ldr	r3, [pc, #32]	; (df4 <system_clock_init+0x74>)
     dd2:	4798      	blx	r3
#endif
}
     dd4:	b005      	add	sp, #20
     dd6:	bd30      	pop	{r4, r5, pc}
     dd8:	40000800 	.word	0x40000800
     ddc:	41004000 	.word	0x41004000
     de0:	00000cb1 	.word	0x00000cb1
     de4:	00000ced 	.word	0x00000ced
     de8:	00000df9 	.word	0x00000df9
     dec:	40000400 	.word	0x40000400
     df0:	00000e1d 	.word	0x00000e1d
     df4:	00000ecd 	.word	0x00000ecd

00000df8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     df8:	4b06      	ldr	r3, [pc, #24]	; (e14 <system_gclk_init+0x1c>)
     dfa:	6999      	ldr	r1, [r3, #24]
     dfc:	2208      	movs	r2, #8
     dfe:	430a      	orrs	r2, r1
     e00:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e02:	2201      	movs	r2, #1
     e04:	4b04      	ldr	r3, [pc, #16]	; (e18 <system_gclk_init+0x20>)
     e06:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e08:	1c19      	adds	r1, r3, #0
     e0a:	680b      	ldr	r3, [r1, #0]
     e0c:	4213      	tst	r3, r2
     e0e:	d1fc      	bne.n	e0a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e10:	4770      	bx	lr
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	40000400 	.word	0x40000400
     e18:	40000c00 	.word	0x40000c00

00000e1c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e1e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e20:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e22:	780d      	ldrb	r5, [r1, #0]
     e24:	022d      	lsls	r5, r5, #8
     e26:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e28:	784b      	ldrb	r3, [r1, #1]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d002      	beq.n	e34 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e2e:	2380      	movs	r3, #128	; 0x80
     e30:	02db      	lsls	r3, r3, #11
     e32:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e34:	7a4b      	ldrb	r3, [r1, #9]
     e36:	2b00      	cmp	r3, #0
     e38:	d002      	beq.n	e40 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e3a:	2380      	movs	r3, #128	; 0x80
     e3c:	031b      	lsls	r3, r3, #12
     e3e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e40:	684c      	ldr	r4, [r1, #4]
     e42:	2c01      	cmp	r4, #1
     e44:	d917      	bls.n	e76 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e46:	1e63      	subs	r3, r4, #1
     e48:	421c      	tst	r4, r3
     e4a:	d10f      	bne.n	e6c <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e4c:	2c02      	cmp	r4, #2
     e4e:	d906      	bls.n	e5e <system_gclk_gen_set_config+0x42>
     e50:	2302      	movs	r3, #2
     e52:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     e54:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     e56:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e58:	429c      	cmp	r4, r3
     e5a:	d8fb      	bhi.n	e54 <system_gclk_gen_set_config+0x38>
     e5c:	e000      	b.n	e60 <system_gclk_gen_set_config+0x44>
     e5e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e60:	0217      	lsls	r7, r2, #8
     e62:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e64:	2380      	movs	r3, #128	; 0x80
     e66:	035b      	lsls	r3, r3, #13
     e68:	431d      	orrs	r5, r3
     e6a:	e004      	b.n	e76 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e6c:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     e6e:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e70:	2380      	movs	r3, #128	; 0x80
     e72:	029b      	lsls	r3, r3, #10
     e74:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e76:	7a0b      	ldrb	r3, [r1, #8]
     e78:	2b00      	cmp	r3, #0
     e7a:	d002      	beq.n	e82 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e7c:	2380      	movs	r3, #128	; 0x80
     e7e:	039b      	lsls	r3, r3, #14
     e80:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
     e82:	4a0e      	ldr	r2, [pc, #56]	; (ebc <system_gclk_gen_set_config+0xa0>)
     e84:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
     e86:	0419      	lsls	r1, r3, #16
     e88:	d4fc      	bmi.n	e84 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e8a:	4b0d      	ldr	r3, [pc, #52]	; (ec0 <system_gclk_gen_set_config+0xa4>)
     e8c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e8e:	4b0d      	ldr	r3, [pc, #52]	; (ec4 <system_gclk_gen_set_config+0xa8>)
     e90:	701e      	strb	r6, [r3, #0]
     e92:	490a      	ldr	r1, [pc, #40]	; (ebc <system_gclk_gen_set_config+0xa0>)
     e94:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e96:	041a      	lsls	r2, r3, #16
     e98:	d4fc      	bmi.n	e94 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <system_gclk_gen_set_config+0xa0>)
     e9c:	609f      	str	r7, [r3, #8]
     e9e:	1c1a      	adds	r2, r3, #0
     ea0:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
     ea2:	0419      	lsls	r1, r3, #16
     ea4:	d4fc      	bmi.n	ea0 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     ea6:	4b05      	ldr	r3, [pc, #20]	; (ebc <system_gclk_gen_set_config+0xa0>)
     ea8:	6859      	ldr	r1, [r3, #4]
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	0252      	lsls	r2, r2, #9
     eae:	400a      	ands	r2, r1
     eb0:	4315      	orrs	r5, r2
     eb2:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eb4:	4b04      	ldr	r3, [pc, #16]	; (ec8 <system_gclk_gen_set_config+0xac>)
     eb6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	40000c00 	.word	0x40000c00
     ec0:	00000bc1 	.word	0x00000bc1
     ec4:	40000c08 	.word	0x40000c08
     ec8:	00000c01 	.word	0x00000c01

00000ecc <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     ecc:	b510      	push	{r4, lr}
     ece:	1c04      	adds	r4, r0, #0
     ed0:	4a0a      	ldr	r2, [pc, #40]	; (efc <system_gclk_gen_enable+0x30>)
     ed2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     ed4:	0419      	lsls	r1, r3, #16
     ed6:	d4fc      	bmi.n	ed2 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ed8:	4b09      	ldr	r3, [pc, #36]	; (f00 <system_gclk_gen_enable+0x34>)
     eda:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     edc:	4b09      	ldr	r3, [pc, #36]	; (f04 <system_gclk_gen_enable+0x38>)
     ede:	701c      	strb	r4, [r3, #0]
     ee0:	4a06      	ldr	r2, [pc, #24]	; (efc <system_gclk_gen_enable+0x30>)
     ee2:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     ee4:	0419      	lsls	r1, r3, #16
     ee6:	d4fc      	bmi.n	ee2 <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     ee8:	4b04      	ldr	r3, [pc, #16]	; (efc <system_gclk_gen_enable+0x30>)
     eea:	6859      	ldr	r1, [r3, #4]
     eec:	2280      	movs	r2, #128	; 0x80
     eee:	0252      	lsls	r2, r2, #9
     ef0:	430a      	orrs	r2, r1
     ef2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ef4:	4b04      	ldr	r3, [pc, #16]	; (f08 <system_gclk_gen_enable+0x3c>)
     ef6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ef8:	bd10      	pop	{r4, pc}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	40000c00 	.word	0x40000c00
     f00:	00000bc1 	.word	0x00000bc1
     f04:	40000c04 	.word	0x40000c04
     f08:	00000c01 	.word	0x00000c01

00000f0c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f0c:	b570      	push	{r4, r5, r6, lr}
     f0e:	1c04      	adds	r4, r0, #0
     f10:	4a18      	ldr	r2, [pc, #96]	; (f74 <system_gclk_gen_get_hz+0x68>)
     f12:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     f14:	0419      	lsls	r1, r3, #16
     f16:	d4fc      	bmi.n	f12 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f18:	4b17      	ldr	r3, [pc, #92]	; (f78 <system_gclk_gen_get_hz+0x6c>)
     f1a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f1c:	4b17      	ldr	r3, [pc, #92]	; (f7c <system_gclk_gen_get_hz+0x70>)
     f1e:	701c      	strb	r4, [r3, #0]
     f20:	4a14      	ldr	r2, [pc, #80]	; (f74 <system_gclk_gen_get_hz+0x68>)
     f22:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     f24:	0419      	lsls	r1, r3, #16
     f26:	d4fc      	bmi.n	f22 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     f28:	4e12      	ldr	r6, [pc, #72]	; (f74 <system_gclk_gen_get_hz+0x68>)
     f2a:	6870      	ldr	r0, [r6, #4]
     f2c:	04c0      	lsls	r0, r0, #19
     f2e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     f30:	4b13      	ldr	r3, [pc, #76]	; (f80 <system_gclk_gen_get_hz+0x74>)
     f32:	4798      	blx	r3
     f34:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f36:	4b11      	ldr	r3, [pc, #68]	; (f7c <system_gclk_gen_get_hz+0x70>)
     f38:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     f3a:	6876      	ldr	r6, [r6, #4]
     f3c:	02f6      	lsls	r6, r6, #11
     f3e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f40:	4b10      	ldr	r3, [pc, #64]	; (f84 <system_gclk_gen_get_hz+0x78>)
     f42:	701c      	strb	r4, [r3, #0]
     f44:	4a0b      	ldr	r2, [pc, #44]	; (f74 <system_gclk_gen_get_hz+0x68>)
     f46:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
     f48:	0419      	lsls	r1, r3, #16
     f4a:	d4fc      	bmi.n	f46 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f4c:	4b09      	ldr	r3, [pc, #36]	; (f74 <system_gclk_gen_get_hz+0x68>)
     f4e:	689c      	ldr	r4, [r3, #8]
     f50:	0224      	lsls	r4, r4, #8
     f52:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f54:	4b0c      	ldr	r3, [pc, #48]	; (f88 <system_gclk_gen_get_hz+0x7c>)
     f56:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f58:	2e00      	cmp	r6, #0
     f5a:	d107      	bne.n	f6c <system_gclk_gen_get_hz+0x60>
     f5c:	2c01      	cmp	r4, #1
     f5e:	d907      	bls.n	f70 <system_gclk_gen_get_hz+0x64>
		gen_input_hz /= divider;
     f60:	1c28      	adds	r0, r5, #0
     f62:	1c21      	adds	r1, r4, #0
     f64:	4b09      	ldr	r3, [pc, #36]	; (f8c <system_gclk_gen_get_hz+0x80>)
     f66:	4798      	blx	r3
     f68:	1c05      	adds	r5, r0, #0
     f6a:	e001      	b.n	f70 <system_gclk_gen_get_hz+0x64>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     f6c:	3401      	adds	r4, #1
     f6e:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     f70:	1c28      	adds	r0, r5, #0
     f72:	bd70      	pop	{r4, r5, r6, pc}
     f74:	40000c00 	.word	0x40000c00
     f78:	00000bc1 	.word	0x00000bc1
     f7c:	40000c04 	.word	0x40000c04
     f80:	00000c31 	.word	0x00000c31
     f84:	40000c08 	.word	0x40000c08
     f88:	00000c01 	.word	0x00000c01
     f8c:	00001631 	.word	0x00001631

00000f90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f90:	b510      	push	{r4, lr}
     f92:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <system_gclk_chan_enable+0x20>)
     f96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <system_gclk_chan_enable+0x24>)
     f9a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f9c:	4b06      	ldr	r3, [pc, #24]	; (fb8 <system_gclk_chan_enable+0x28>)
     f9e:	6819      	ldr	r1, [r3, #0]
     fa0:	0c09      	lsrs	r1, r1, #16
     fa2:	2280      	movs	r2, #128	; 0x80
     fa4:	01d2      	lsls	r2, r2, #7
     fa6:	430a      	orrs	r2, r1
     fa8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <system_gclk_chan_enable+0x2c>)
     fac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fae:	bd10      	pop	{r4, pc}
     fb0:	00000bc1 	.word	0x00000bc1
     fb4:	40000c02 	.word	0x40000c02
     fb8:	40000c00 	.word	0x40000c00
     fbc:	00000c01 	.word	0x00000c01

00000fc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     fc0:	b510      	push	{r4, lr}
     fc2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fc4:	4b10      	ldr	r3, [pc, #64]	; (1008 <system_gclk_chan_disable+0x48>)
     fc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fc8:	4b10      	ldr	r3, [pc, #64]	; (100c <system_gclk_chan_disable+0x4c>)
     fca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     fcc:	4b10      	ldr	r3, [pc, #64]	; (1010 <system_gclk_chan_disable+0x50>)
     fce:	6818      	ldr	r0, [r3, #0]
     fd0:	0100      	lsls	r0, r0, #4
     fd2:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     fd4:	8859      	ldrh	r1, [r3, #2]
     fd6:	4a0f      	ldr	r2, [pc, #60]	; (1014 <system_gclk_chan_disable+0x54>)
     fd8:	400a      	ands	r2, r1
     fda:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     fdc:	681a      	ldr	r2, [r3, #0]
     fde:	0c12      	lsrs	r2, r2, #16
     fe0:	490d      	ldr	r1, [pc, #52]	; (1018 <system_gclk_chan_disable+0x58>)
     fe2:	400a      	ands	r2, r1
     fe4:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     fe6:	1c19      	adds	r1, r3, #0
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	01d2      	lsls	r2, r2, #7
     fec:	680b      	ldr	r3, [r1, #0]
     fee:	0c1b      	lsrs	r3, r3, #16
     ff0:	4213      	tst	r3, r2
     ff2:	d1fb      	bne.n	fec <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     ff4:	4b06      	ldr	r3, [pc, #24]	; (1010 <system_gclk_chan_disable+0x50>)
     ff6:	0201      	lsls	r1, r0, #8
     ff8:	8858      	ldrh	r0, [r3, #2]
     ffa:	4a06      	ldr	r2, [pc, #24]	; (1014 <system_gclk_chan_disable+0x54>)
     ffc:	4002      	ands	r2, r0
     ffe:	430a      	orrs	r2, r1
    1000:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1002:	4b06      	ldr	r3, [pc, #24]	; (101c <system_gclk_chan_disable+0x5c>)
    1004:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1006:	bd10      	pop	{r4, pc}
    1008:	00000bc1 	.word	0x00000bc1
    100c:	40000c02 	.word	0x40000c02
    1010:	40000c00 	.word	0x40000c00
    1014:	fffff0ff 	.word	0xfffff0ff
    1018:	ffffbfff 	.word	0xffffbfff
    101c:	00000c01 	.word	0x00000c01

00001020 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1020:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1022:	780c      	ldrb	r4, [r1, #0]
    1024:	0224      	lsls	r4, r4, #8
    1026:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1028:	4b02      	ldr	r3, [pc, #8]	; (1034 <system_gclk_chan_set_config+0x14>)
    102a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    102c:	b2a4      	uxth	r4, r4
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <system_gclk_chan_set_config+0x18>)
    1030:	805c      	strh	r4, [r3, #2]
}
    1032:	bd10      	pop	{r4, pc}
    1034:	00000fc1 	.word	0x00000fc1
    1038:	40000c00 	.word	0x40000c00

0000103c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    103c:	b510      	push	{r4, lr}
    103e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1040:	4b06      	ldr	r3, [pc, #24]	; (105c <system_gclk_chan_get_hz+0x20>)
    1042:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1044:	4b06      	ldr	r3, [pc, #24]	; (1060 <system_gclk_chan_get_hz+0x24>)
    1046:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1048:	4b06      	ldr	r3, [pc, #24]	; (1064 <system_gclk_chan_get_hz+0x28>)
    104a:	681c      	ldr	r4, [r3, #0]
    104c:	0124      	lsls	r4, r4, #4
    104e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <system_gclk_chan_get_hz+0x2c>)
    1052:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1054:	1c20      	adds	r0, r4, #0
    1056:	4b05      	ldr	r3, [pc, #20]	; (106c <system_gclk_chan_get_hz+0x30>)
    1058:	4798      	blx	r3
}
    105a:	bd10      	pop	{r4, pc}
    105c:	00000bc1 	.word	0x00000bc1
    1060:	40000c02 	.word	0x40000c02
    1064:	40000c00 	.word	0x40000c00
    1068:	00000c01 	.word	0x00000c01
    106c:	00000f0d 	.word	0x00000f0d

00001070 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1070:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1072:	78d3      	ldrb	r3, [r2, #3]
    1074:	2b00      	cmp	r3, #0
    1076:	d11f      	bne.n	10b8 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1078:	7813      	ldrb	r3, [r2, #0]
    107a:	2b80      	cmp	r3, #128	; 0x80
    107c:	d004      	beq.n	1088 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    107e:	061b      	lsls	r3, r3, #24
    1080:	2480      	movs	r4, #128	; 0x80
    1082:	0264      	lsls	r4, r4, #9
    1084:	4323      	orrs	r3, r4
    1086:	e000      	b.n	108a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1088:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    108a:	7854      	ldrb	r4, [r2, #1]
    108c:	2502      	movs	r5, #2
    108e:	43ac      	bics	r4, r5
    1090:	d10a      	bne.n	10a8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1092:	7894      	ldrb	r4, [r2, #2]
    1094:	2c00      	cmp	r4, #0
    1096:	d103      	bne.n	10a0 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1098:	2480      	movs	r4, #128	; 0x80
    109a:	02a4      	lsls	r4, r4, #10
    109c:	4323      	orrs	r3, r4
    109e:	e002      	b.n	10a6 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    10a0:	24c0      	movs	r4, #192	; 0xc0
    10a2:	02e4      	lsls	r4, r4, #11
    10a4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    10a6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10a8:	7854      	ldrb	r4, [r2, #1]
    10aa:	3c01      	subs	r4, #1
    10ac:	b2e4      	uxtb	r4, r4
    10ae:	2c01      	cmp	r4, #1
    10b0:	d804      	bhi.n	10bc <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    10b2:	4c12      	ldr	r4, [pc, #72]	; (10fc <_system_pinmux_config+0x8c>)
    10b4:	4023      	ands	r3, r4
    10b6:	e001      	b.n	10bc <_system_pinmux_config+0x4c>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    10b8:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    10ba:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10bc:	040d      	lsls	r5, r1, #16
    10be:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10c0:	24a0      	movs	r4, #160	; 0xa0
    10c2:	05e4      	lsls	r4, r4, #23
    10c4:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10c6:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10c8:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    10ca:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10cc:	24d0      	movs	r4, #208	; 0xd0
    10ce:	0624      	lsls	r4, r4, #24
    10d0:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    10d2:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10d4:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    10d6:	78d4      	ldrb	r4, [r2, #3]
    10d8:	2c00      	cmp	r4, #0
    10da:	d10d      	bne.n	10f8 <_system_pinmux_config+0x88>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    10dc:	035c      	lsls	r4, r3, #13
    10de:	d505      	bpl.n	10ec <_system_pinmux_config+0x7c>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    10e0:	7893      	ldrb	r3, [r2, #2]
    10e2:	2b01      	cmp	r3, #1
    10e4:	d101      	bne.n	10ea <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    10e6:	6181      	str	r1, [r0, #24]
    10e8:	e000      	b.n	10ec <_system_pinmux_config+0x7c>
			} else {
				port->OUTCLR.reg = pin_mask;
    10ea:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10ec:	7853      	ldrb	r3, [r2, #1]
    10ee:	3b01      	subs	r3, #1
    10f0:	b2db      	uxtb	r3, r3
    10f2:	2b01      	cmp	r3, #1
    10f4:	d800      	bhi.n	10f8 <_system_pinmux_config+0x88>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    10f6:	6081      	str	r1, [r0, #8]
		}
	}
}
    10f8:	bd30      	pop	{r4, r5, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	fffbffff 	.word	0xfffbffff

00001100 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1100:	b508      	push	{r3, lr}
    1102:	1c03      	adds	r3, r0, #0
    1104:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1106:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1108:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    110a:	2900      	cmp	r1, #0
    110c:	d103      	bne.n	1116 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    110e:	0958      	lsrs	r0, r3, #5
    1110:	01c0      	lsls	r0, r0, #7
    1112:	4904      	ldr	r1, [pc, #16]	; (1124 <system_pinmux_pin_set_config+0x24>)
    1114:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1116:	211f      	movs	r1, #31
    1118:	400b      	ands	r3, r1
    111a:	2101      	movs	r1, #1
    111c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <system_pinmux_pin_set_config+0x28>)
    1120:	4798      	blx	r3
}
    1122:	bd08      	pop	{r3, pc}
    1124:	41004400 	.word	0x41004400
    1128:	00001071 	.word	0x00001071

0000112c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    112c:	4770      	bx	lr
    112e:	46c0      	nop			; (mov r8, r8)

00001130 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1130:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1132:	4b04      	ldr	r3, [pc, #16]	; (1144 <system_init+0x14>)
    1134:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1136:	4b04      	ldr	r3, [pc, #16]	; (1148 <system_init+0x18>)
    1138:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    113a:	4b04      	ldr	r3, [pc, #16]	; (114c <system_init+0x1c>)
    113c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    113e:	4b04      	ldr	r3, [pc, #16]	; (1150 <system_init+0x20>)
    1140:	4798      	blx	r3
}
    1142:	bd08      	pop	{r3, pc}
    1144:	00000d81 	.word	0x00000d81
    1148:	00000bbd 	.word	0x00000bbd
    114c:	0000112d 	.word	0x0000112d
    1150:	0000112d 	.word	0x0000112d

00001154 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1154:	e7fe      	b.n	1154 <Dummy_Handler>
    1156:	46c0      	nop			; (mov r8, r8)

00001158 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1158:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    115a:	4b19      	ldr	r3, [pc, #100]	; (11c0 <Reset_Handler+0x68>)
    115c:	4a19      	ldr	r2, [pc, #100]	; (11c4 <Reset_Handler+0x6c>)
    115e:	429a      	cmp	r2, r3
    1160:	d003      	beq.n	116a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1162:	4b19      	ldr	r3, [pc, #100]	; (11c8 <Reset_Handler+0x70>)
    1164:	4a16      	ldr	r2, [pc, #88]	; (11c0 <Reset_Handler+0x68>)
    1166:	429a      	cmp	r2, r3
    1168:	d304      	bcc.n	1174 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    116a:	4b18      	ldr	r3, [pc, #96]	; (11cc <Reset_Handler+0x74>)
    116c:	4a18      	ldr	r2, [pc, #96]	; (11d0 <Reset_Handler+0x78>)
    116e:	429a      	cmp	r2, r3
    1170:	d310      	bcc.n	1194 <Reset_Handler+0x3c>
    1172:	e01b      	b.n	11ac <Reset_Handler+0x54>
    1174:	4b17      	ldr	r3, [pc, #92]	; (11d4 <Reset_Handler+0x7c>)
    1176:	4814      	ldr	r0, [pc, #80]	; (11c8 <Reset_Handler+0x70>)
    1178:	3003      	adds	r0, #3
    117a:	1ac0      	subs	r0, r0, r3
    117c:	0880      	lsrs	r0, r0, #2
    117e:	3001      	adds	r0, #1
    1180:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1182:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1184:	490e      	ldr	r1, [pc, #56]	; (11c0 <Reset_Handler+0x68>)
    1186:	4a0f      	ldr	r2, [pc, #60]	; (11c4 <Reset_Handler+0x6c>)
    1188:	58d4      	ldr	r4, [r2, r3]
    118a:	50cc      	str	r4, [r1, r3]
    118c:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    118e:	4283      	cmp	r3, r0
    1190:	d1fa      	bne.n	1188 <Reset_Handler+0x30>
    1192:	e7ea      	b.n	116a <Reset_Handler+0x12>
    1194:	4b0e      	ldr	r3, [pc, #56]	; (11d0 <Reset_Handler+0x78>)
    1196:	1d1a      	adds	r2, r3, #4
    1198:	490c      	ldr	r1, [pc, #48]	; (11cc <Reset_Handler+0x74>)
    119a:	3103      	adds	r1, #3
    119c:	1a89      	subs	r1, r1, r2
    119e:	0889      	lsrs	r1, r1, #2
    11a0:	0089      	lsls	r1, r1, #2
    11a2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    11a4:	2100      	movs	r1, #0
    11a6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    11a8:	4293      	cmp	r3, r2
    11aa:	d1fc      	bne.n	11a6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    11ac:	4b0a      	ldr	r3, [pc, #40]	; (11d8 <Reset_Handler+0x80>)
    11ae:	217f      	movs	r1, #127	; 0x7f
    11b0:	4a0a      	ldr	r2, [pc, #40]	; (11dc <Reset_Handler+0x84>)
    11b2:	438a      	bics	r2, r1
    11b4:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    11b6:	4b0a      	ldr	r3, [pc, #40]	; (11e0 <Reset_Handler+0x88>)
    11b8:	4798      	blx	r3

        /* Branch to main function */
        main();
    11ba:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <Reset_Handler+0x8c>)
    11bc:	4798      	blx	r3
    11be:	e7fe      	b.n	11be <Reset_Handler+0x66>
    11c0:	20000000 	.word	0x20000000
    11c4:	00003344 	.word	0x00003344
    11c8:	2000006c 	.word	0x2000006c
    11cc:	200001a8 	.word	0x200001a8
    11d0:	2000006c 	.word	0x2000006c
    11d4:	20000004 	.word	0x20000004
    11d8:	e000ed00 	.word	0xe000ed00
    11dc:	00000000 	.word	0x00000000
    11e0:	00001715 	.word	0x00001715
    11e4:	000015b9 	.word	0x000015b9

000011e8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11e8:	4b06      	ldr	r3, [pc, #24]	; (1204 <_sbrk+0x1c>)
    11ea:	681b      	ldr	r3, [r3, #0]
    11ec:	2b00      	cmp	r3, #0
    11ee:	d102      	bne.n	11f6 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    11f0:	4a05      	ldr	r2, [pc, #20]	; (1208 <_sbrk+0x20>)
    11f2:	4b04      	ldr	r3, [pc, #16]	; (1204 <_sbrk+0x1c>)
    11f4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    11f6:	4a03      	ldr	r2, [pc, #12]	; (1204 <_sbrk+0x1c>)
    11f8:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    11fa:	1818      	adds	r0, r3, r0
    11fc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    11fe:	1c18      	adds	r0, r3, #0
    1200:	4770      	bx	lr
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	200000c4 	.word	0x200000c4
    1208:	200021a8 	.word	0x200021a8

0000120c <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    120c:	2001      	movs	r0, #1
}
    120e:	4240      	negs	r0, r0
    1210:	4770      	bx	lr
    1212:	46c0      	nop			; (mov r8, r8)

00001214 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1214:	2380      	movs	r3, #128	; 0x80
    1216:	019b      	lsls	r3, r3, #6
    1218:	604b      	str	r3, [r1, #4]

	return 0;
}
    121a:	2000      	movs	r0, #0
    121c:	4770      	bx	lr
    121e:	46c0      	nop			; (mov r8, r8)

00001220 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1220:	2001      	movs	r0, #1
    1222:	4770      	bx	lr

00001224 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1224:	2000      	movs	r0, #0
    1226:	4770      	bx	lr

00001228 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1228:	b570      	push	{r4, r5, r6, lr}
    122a:	b082      	sub	sp, #8
    122c:	1c05      	adds	r5, r0, #0
    122e:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1230:	2200      	movs	r2, #0
    1232:	466b      	mov	r3, sp
    1234:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1236:	4c06      	ldr	r4, [pc, #24]	; (1250 <usart_serial_getchar+0x28>)
    1238:	1c28      	adds	r0, r5, #0
    123a:	4669      	mov	r1, sp
    123c:	3106      	adds	r1, #6
    123e:	47a0      	blx	r4
    1240:	2800      	cmp	r0, #0
    1242:	d1f9      	bne.n	1238 <usart_serial_getchar+0x10>

	*c = temp;
    1244:	466b      	mov	r3, sp
    1246:	3306      	adds	r3, #6
    1248:	881b      	ldrh	r3, [r3, #0]
    124a:	7033      	strb	r3, [r6, #0]
}
    124c:	b002      	add	sp, #8
    124e:	bd70      	pop	{r4, r5, r6, pc}
    1250:	00000871 	.word	0x00000871

00001254 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    1254:	b570      	push	{r4, r5, r6, lr}
    1256:	1c06      	adds	r6, r0, #0
    1258:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    125a:	4c03      	ldr	r4, [pc, #12]	; (1268 <usart_serial_putchar+0x14>)
    125c:	1c30      	adds	r0, r6, #0
    125e:	1c29      	adds	r1, r5, #0
    1260:	47a0      	blx	r4
    1262:	2800      	cmp	r0, #0
    1264:	d1fa      	bne.n	125c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    1266:	bd70      	pop	{r4, r5, r6, pc}
    1268:	00000841 	.word	0x00000841

0000126c <configure_usart_CONSOLE>:
static char STNResBuff[100];
static uint8_t RcvCount = 0;
static volatile bool STNRcvCompleteFlag = false;

void configure_usart_CONSOLE(void)
{
    126c:	b570      	push	{r4, r5, r6, lr}
    126e:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1270:	2380      	movs	r3, #128	; 0x80
    1272:	05db      	lsls	r3, r3, #23
    1274:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1276:	2300      	movs	r3, #0
    1278:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    127a:	22ff      	movs	r2, #255	; 0xff
    127c:	4669      	mov	r1, sp
    127e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1280:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1282:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1284:	2201      	movs	r2, #1
    1286:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1288:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    128a:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    128c:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    128e:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1290:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1292:	774b      	strb	r3, [r1, #29]
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 115200;
    1294:	23e1      	movs	r3, #225	; 0xe1
    1296:	025b      	lsls	r3, r3, #9
    1298:	9304      	str	r3, [sp, #16]

	/* Settings For New SAM Board. */
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
    129a:	23c4      	movs	r3, #196	; 0xc4
    129c:	039b      	lsls	r3, r3, #14
    129e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    12a0:	2301      	movs	r3, #1
    12a2:	425b      	negs	r3, r3
    12a4:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    12a6:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA30D_SERCOM1_PAD2;
    12a8:	4b28      	ldr	r3, [pc, #160]	; (134c <configure_usart_CONSOLE+0xe0>)
    12aa:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA31D_SERCOM1_PAD3;
    12ac:	4b28      	ldr	r3, [pc, #160]	; (1350 <configure_usart_CONSOLE+0xe4>)
    12ae:	930b      	str	r3, [sp, #44]	; 0x2c
	
	while (usart_init(&usart_instance_CONSOLE, SERCOM1, &config_usart) != STATUS_OK) {	}
    12b0:	4e28      	ldr	r6, [pc, #160]	; (1354 <configure_usart_CONSOLE+0xe8>)
    12b2:	4d29      	ldr	r5, [pc, #164]	; (1358 <configure_usart_CONSOLE+0xec>)
    12b4:	4c29      	ldr	r4, [pc, #164]	; (135c <configure_usart_CONSOLE+0xf0>)
    12b6:	1c30      	adds	r0, r6, #0
    12b8:	1c29      	adds	r1, r5, #0
    12ba:	466a      	mov	r2, sp
    12bc:	47a0      	blx	r4
    12be:	2800      	cmp	r0, #0
    12c0:	d1f9      	bne.n	12b6 <configure_usart_CONSOLE+0x4a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    12c2:	4c24      	ldr	r4, [pc, #144]	; (1354 <configure_usart_CONSOLE+0xe8>)
    12c4:	4b26      	ldr	r3, [pc, #152]	; (1360 <configure_usart_CONSOLE+0xf4>)
    12c6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    12c8:	4a26      	ldr	r2, [pc, #152]	; (1364 <configure_usart_CONSOLE+0xf8>)
    12ca:	4b27      	ldr	r3, [pc, #156]	; (1368 <configure_usart_CONSOLE+0xfc>)
    12cc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    12ce:	4a27      	ldr	r2, [pc, #156]	; (136c <configure_usart_CONSOLE+0x100>)
    12d0:	4b27      	ldr	r3, [pc, #156]	; (1370 <configure_usart_CONSOLE+0x104>)
    12d2:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    12d4:	1c20      	adds	r0, r4, #0
    12d6:	4920      	ldr	r1, [pc, #128]	; (1358 <configure_usart_CONSOLE+0xec>)
    12d8:	466a      	mov	r2, sp
    12da:	4b20      	ldr	r3, [pc, #128]	; (135c <configure_usart_CONSOLE+0xf0>)
    12dc:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    12de:	4e25      	ldr	r6, [pc, #148]	; (1374 <configure_usart_CONSOLE+0x108>)
    12e0:	6833      	ldr	r3, [r6, #0]
    12e2:	6898      	ldr	r0, [r3, #8]
    12e4:	2100      	movs	r1, #0
    12e6:	4d24      	ldr	r5, [pc, #144]	; (1378 <configure_usart_CONSOLE+0x10c>)
    12e8:	47a8      	blx	r5
	setbuf(stdin, NULL);
    12ea:	6833      	ldr	r3, [r6, #0]
    12ec:	6858      	ldr	r0, [r3, #4]
    12ee:	2100      	movs	r1, #0
    12f0:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12f2:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12f4:	1c28      	adds	r0, r5, #0
    12f6:	4b21      	ldr	r3, [pc, #132]	; (137c <configure_usart_CONSOLE+0x110>)
    12f8:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12fa:	231f      	movs	r3, #31
    12fc:	4018      	ands	r0, r3
    12fe:	2301      	movs	r3, #1
    1300:	4083      	lsls	r3, r0
    1302:	1c18      	adds	r0, r3, #0
    1304:	4b1e      	ldr	r3, [pc, #120]	; (1380 <configure_usart_CONSOLE+0x114>)
    1306:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1308:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    130a:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    130c:	0419      	lsls	r1, r3, #16
    130e:	d4fc      	bmi.n	130a <configure_usart_CONSOLE+0x9e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1310:	682a      	ldr	r2, [r5, #0]
    1312:	2302      	movs	r3, #2
    1314:	4313      	orrs	r3, r2
    1316:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1318:	4b0e      	ldr	r3, [pc, #56]	; (1354 <configure_usart_CONSOLE+0xe8>)
    131a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    131c:	691a      	ldr	r2, [r3, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    131e:	0411      	lsls	r1, r2, #16
    1320:	d4fc      	bmi.n	131c <configure_usart_CONSOLE+0xb0>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1322:	6859      	ldr	r1, [r3, #4]
    1324:	2280      	movs	r2, #128	; 0x80
    1326:	0252      	lsls	r2, r2, #9
    1328:	430a      	orrs	r2, r1
    132a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    132c:	2101      	movs	r1, #1
    132e:	4a09      	ldr	r2, [pc, #36]	; (1354 <configure_usart_CONSOLE+0xe8>)
    1330:	71d1      	strb	r1, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1332:	691a      	ldr	r2, [r3, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1334:	0411      	lsls	r1, r2, #16
    1336:	d4fc      	bmi.n	1332 <configure_usart_CONSOLE+0xc6>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1338:	6859      	ldr	r1, [r3, #4]
    133a:	2280      	movs	r2, #128	; 0x80
    133c:	0292      	lsls	r2, r2, #10
    133e:	430a      	orrs	r2, r1
    1340:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    1342:	2201      	movs	r2, #1
    1344:	4b03      	ldr	r3, [pc, #12]	; (1354 <configure_usart_CONSOLE+0xe8>)
    1346:	719a      	strb	r2, [r3, #6]
	usart_enable(&usart_instance_CONSOLE);
	usart_enable_transceiver(&usart_instance_CONSOLE, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance_CONSOLE, USART_TRANSCEIVER_RX);
	
	
}
    1348:	b00c      	add	sp, #48	; 0x30
    134a:	bd70      	pop	{r4, r5, r6, pc}
    134c:	001e0003 	.word	0x001e0003
    1350:	001f0003 	.word	0x001f0003
    1354:	20000180 	.word	0x20000180
    1358:	42000c00 	.word	0x42000c00
    135c:	0000060d 	.word	0x0000060d
    1360:	20000140 	.word	0x20000140
    1364:	00001255 	.word	0x00001255
    1368:	2000013c 	.word	0x2000013c
    136c:	00001229 	.word	0x00001229
    1370:	20000138 	.word	0x20000138
    1374:	20000008 	.word	0x20000008
    1378:	000019ed 	.word	0x000019ed
    137c:	00000b05 	.word	0x00000b05
    1380:	e000e100 	.word	0xe000e100

00001384 <write_DEBUG>:

void write_DEBUG(const char *tx_data)
{
    1384:	b510      	push	{r4, lr}
    1386:	1c04      	adds	r4, r0, #0
	usart_write_buffer_wait(&usart_instance_CONSOLE, (uint8_t *)tx_data, strlen(tx_data));
    1388:	4b03      	ldr	r3, [pc, #12]	; (1398 <write_DEBUG+0x14>)
    138a:	4798      	blx	r3
    138c:	b282      	uxth	r2, r0
    138e:	4803      	ldr	r0, [pc, #12]	; (139c <write_DEBUG+0x18>)
    1390:	1c21      	adds	r1, r4, #0
    1392:	4b03      	ldr	r3, [pc, #12]	; (13a0 <write_DEBUG+0x1c>)
    1394:	4798      	blx	r3
}
    1396:	bd10      	pop	{r4, pc}
    1398:	00001b2d 	.word	0x00001b2d
    139c:	20000180 	.word	0x20000180
    13a0:	000008c9 	.word	0x000008c9

000013a4 <configure_usart_STN>:



int configure_usart_STN(void)
{
    13a4:	b570      	push	{r4, r5, r6, lr}
    13a6:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13a8:	2380      	movs	r3, #128	; 0x80
    13aa:	05db      	lsls	r3, r3, #23
    13ac:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13ae:	2300      	movs	r3, #0
    13b0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13b2:	22ff      	movs	r2, #255	; 0xff
    13b4:	4669      	mov	r1, sp
    13b6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    13b8:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    13ba:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    13bc:	2296      	movs	r2, #150	; 0x96
    13be:	0192      	lsls	r2, r2, #6
    13c0:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    13c2:	2201      	movs	r2, #1
    13c4:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    13c6:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    13c8:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    13ca:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    13cc:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    13ce:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    13d0:	774b      	strb	r3, [r1, #29]
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;

	/* Settings For New SAM Board. */
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    13d2:	2380      	movs	r3, #128	; 0x80
    13d4:	035b      	lsls	r3, r3, #13
    13d6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
    13d8:	4b24      	ldr	r3, [pc, #144]	; (146c <configure_usart_STN+0xc8>)
    13da:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;
    13dc:	4b24      	ldr	r3, [pc, #144]	; (1470 <configure_usart_STN+0xcc>)
    13de:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    13e0:	2301      	movs	r3, #1
    13e2:	425b      	negs	r3, r3
    13e4:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    13e6:	930b      	str	r3, [sp, #44]	; 0x2c

	while (usart_init(&usart_instance_STN,
    13e8:	4e22      	ldr	r6, [pc, #136]	; (1474 <configure_usart_STN+0xd0>)
    13ea:	4d23      	ldr	r5, [pc, #140]	; (1478 <configure_usart_STN+0xd4>)
    13ec:	4c23      	ldr	r4, [pc, #140]	; (147c <configure_usart_STN+0xd8>)
    13ee:	1c30      	adds	r0, r6, #0
    13f0:	1c29      	adds	r1, r5, #0
    13f2:	466a      	mov	r2, sp
    13f4:	47a0      	blx	r4
    13f6:	2800      	cmp	r0, #0
    13f8:	d1f9      	bne.n	13ee <configure_usart_STN+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    13fa:	4d1e      	ldr	r5, [pc, #120]	; (1474 <configure_usart_STN+0xd0>)
    13fc:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    13fe:	1c20      	adds	r0, r4, #0
    1400:	4b1f      	ldr	r3, [pc, #124]	; (1480 <configure_usart_STN+0xdc>)
    1402:	4798      	blx	r3
    1404:	231f      	movs	r3, #31
    1406:	4018      	ands	r0, r3
    1408:	2301      	movs	r3, #1
    140a:	4083      	lsls	r3, r0
    140c:	1c18      	adds	r0, r3, #0
    140e:	4b1d      	ldr	r3, [pc, #116]	; (1484 <configure_usart_STN+0xe0>)
    1410:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1412:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1414:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1416:	0419      	lsls	r1, r3, #16
    1418:	d4fc      	bmi.n	1414 <configure_usart_STN+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    141a:	6822      	ldr	r2, [r4, #0]
    141c:	2302      	movs	r3, #2
    141e:	4313      	orrs	r3, r2
    1420:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1422:	4b14      	ldr	r3, [pc, #80]	; (1474 <configure_usart_STN+0xd0>)
    1424:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1426:	691a      	ldr	r2, [r3, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1428:	0411      	lsls	r1, r2, #16
    142a:	d4fc      	bmi.n	1426 <configure_usart_STN+0x82>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    142c:	6859      	ldr	r1, [r3, #4]
    142e:	2280      	movs	r2, #128	; 0x80
    1430:	0252      	lsls	r2, r2, #9
    1432:	430a      	orrs	r2, r1
    1434:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1436:	2101      	movs	r1, #1
    1438:	4a0e      	ldr	r2, [pc, #56]	; (1474 <configure_usart_STN+0xd0>)
    143a:	71d1      	strb	r1, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    143c:	691a      	ldr	r2, [r3, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    143e:	0411      	lsls	r1, r2, #16
    1440:	d4fc      	bmi.n	143c <configure_usart_STN+0x98>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1442:	6859      	ldr	r1, [r3, #4]
    1444:	2280      	movs	r2, #128	; 0x80
    1446:	0292      	lsls	r2, r2, #10
    1448:	430a      	orrs	r2, r1
    144a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    144c:	2201      	movs	r2, #1
    144e:	4b09      	ldr	r3, [pc, #36]	; (1474 <configure_usart_STN+0xd0>)
    1450:	719a      	strb	r2, [r3, #6]

	usart_enable(&usart_instance_STN);
	usart_enable_transceiver(&usart_instance_STN, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance_STN, USART_TRANSCEIVER_RX);
	
	_sercom_set_handler(_sercom_get_sercom_inst_index(SERCOM4),	stn_rx_handler);
    1452:	4c09      	ldr	r4, [pc, #36]	; (1478 <configure_usart_STN+0xd4>)
    1454:	1c20      	adds	r0, r4, #0
    1456:	4b0c      	ldr	r3, [pc, #48]	; (1488 <configure_usart_STN+0xe4>)
    1458:	4798      	blx	r3
    145a:	490c      	ldr	r1, [pc, #48]	; (148c <configure_usart_STN+0xe8>)
    145c:	4b0c      	ldr	r3, [pc, #48]	; (1490 <configure_usart_STN+0xec>)
    145e:	4798      	blx	r3
	SERCOM4->USART.INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1460:	2304      	movs	r3, #4
    1462:	7363      	strb	r3, [r4, #13]
	
	retVal = 1;
	
	return retVal;
}
    1464:	2001      	movs	r0, #1
    1466:	b00c      	add	sp, #48	; 0x30
    1468:	bd70      	pop	{r4, r5, r6, pc}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	00280003 	.word	0x00280003
    1470:	00290003 	.word	0x00290003
    1474:	2000015c 	.word	0x2000015c
    1478:	42001800 	.word	0x42001800
    147c:	0000060d 	.word	0x0000060d
    1480:	00000b05 	.word	0x00000b05
    1484:	e000e100 	.word	0xe000e100
    1488:	00000539 	.word	0x00000539
    148c:	000014c5 	.word	0x000014c5
    1490:	00000ac9 	.word	0x00000ac9

00001494 <RcvResponseFromSTN>:
}


void RcvResponseFromSTN(uint8_t RcvedData)
{
	switch(RcvedData)
    1494:	2820      	cmp	r0, #32
    1496:	d00e      	beq.n	14b6 <RcvResponseFromSTN+0x22>
    1498:	283e      	cmp	r0, #62	; 0x3e
    149a:	d002      	beq.n	14a2 <RcvResponseFromSTN+0xe>
    149c:	280d      	cmp	r0, #13
    149e:	d104      	bne.n	14aa <RcvResponseFromSTN+0x16>
    14a0:	e009      	b.n	14b6 <RcvResponseFromSTN+0x22>
		case 0x0D:/* 0x0D */
		break;
		
		case '>':/* '>' */
		//write_DEBUG(STNResBuff,RcvCount);
			STNRcvCompleteFlag = true;
    14a2:	2201      	movs	r2, #1
    14a4:	4b04      	ldr	r3, [pc, #16]	; (14b8 <RcvResponseFromSTN+0x24>)
    14a6:	701a      	strb	r2, [r3, #0]
		break;
    14a8:	e005      	b.n	14b6 <RcvResponseFromSTN+0x22>

		case ' ':/* ' ' */
		break;

		default:
			STNResBuff[RcvCount++] = RcvedData;
    14aa:	4a04      	ldr	r2, [pc, #16]	; (14bc <RcvResponseFromSTN+0x28>)
    14ac:	7813      	ldrb	r3, [r2, #0]
    14ae:	1c59      	adds	r1, r3, #1
    14b0:	7011      	strb	r1, [r2, #0]
    14b2:	4a03      	ldr	r2, [pc, #12]	; (14c0 <RcvResponseFromSTN+0x2c>)
    14b4:	54d0      	strb	r0, [r2, r3]
		break;
	}
}
    14b6:	4770      	bx	lr
    14b8:	2000012d 	.word	0x2000012d
    14bc:	2000012c 	.word	0x2000012c
    14c0:	200000c8 	.word	0x200000c8

000014c4 <stn_rx_handler>:
}



void stn_rx_handler(uint8_t instance)
{
    14c4:	b510      	push	{r4, lr}
    14c6:	b082      	sub	sp, #8
	SercomUsart *const usart_hw = &SERCOM4->USART;
	UNUSED(instance);

	//write_DEBUG("\r\nHere 1", strlen("\n\rHere 1"));

	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    14c8:	4b0c      	ldr	r3, [pc, #48]	; (14fc <stn_rx_handler+0x38>)
    14ca:	68db      	ldr	r3, [r3, #12]
    14cc:	035a      	lsls	r2, r3, #13
    14ce:	d512      	bpl.n	14f6 <stn_rx_handler+0x32>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg & (SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
    14d0:	4b0a      	ldr	r3, [pc, #40]	; (14fc <stn_rx_handler+0x38>)
    14d2:	691a      	ldr	r2, [r3, #16]
    14d4:	2306      	movs	r3, #6
    14d6:	4013      	ands	r3, r2

		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
    14d8:	d002      	beq.n	14e0 <stn_rx_handler+0x1c>
		usart_hw->STATUS.reg = rx_error;
    14da:	4a08      	ldr	r2, [pc, #32]	; (14fc <stn_rx_handler+0x38>)
    14dc:	8213      	strh	r3, [r2, #16]
    14de:	e00a      	b.n	14f6 <stn_rx_handler+0x32>
		else
		{
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    14e0:	4b06      	ldr	r3, [pc, #24]	; (14fc <stn_rx_handler+0x38>)
    14e2:	6998      	ldr	r0, [r3, #24]
    14e4:	b2c0      	uxtb	r0, r0
    14e6:	466c      	mov	r4, sp
    14e8:	71e0      	strb	r0, [r4, #7]
    14ea:	3407      	adds	r4, #7
			RcvResponseFromSTN(data);
    14ec:	4b04      	ldr	r3, [pc, #16]	; (1500 <stn_rx_handler+0x3c>)
    14ee:	4798      	blx	r3
			printf(&data);
    14f0:	1c20      	adds	r0, r4, #0
    14f2:	4b04      	ldr	r3, [pc, #16]	; (1504 <stn_rx_handler+0x40>)
    14f4:	4798      	blx	r3
		}
	}
}
    14f6:	b002      	add	sp, #8
    14f8:	bd10      	pop	{r4, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	42001800 	.word	0x42001800
    1500:	00001495 	.word	0x00001495
    1504:	000018cd 	.word	0x000018cd

00001508 <sendPID>:
}



void sendPID(const char *cmd)
{
    1508:	b570      	push	{r4, r5, r6, lr}
    150a:	1c05      	adds	r5, r0, #0
	/*  Clear STNResString */
	memset(STNResBuff,'\0',strlen((char *)STNResBuff));
    150c:	4e11      	ldr	r6, [pc, #68]	; (1554 <sendPID+0x4c>)
    150e:	1c30      	adds	r0, r6, #0
    1510:	4c11      	ldr	r4, [pc, #68]	; (1558 <sendPID+0x50>)
    1512:	47a0      	blx	r4
    1514:	1c02      	adds	r2, r0, #0
    1516:	1c30      	adds	r0, r6, #0
    1518:	2100      	movs	r1, #0
    151a:	4b10      	ldr	r3, [pc, #64]	; (155c <sendPID+0x54>)
    151c:	4798      	blx	r3
	RcvCount = 0;
    151e:	2200      	movs	r2, #0
    1520:	4b0f      	ldr	r3, [pc, #60]	; (1560 <sendPID+0x58>)
    1522:	701a      	strb	r2, [r3, #0]
	
	usart_write_buffer_wait(&usart_instance_STN, (uint8_t *)cmd, strlen(cmd));
    1524:	1c28      	adds	r0, r5, #0
    1526:	47a0      	blx	r4
    1528:	4c0e      	ldr	r4, [pc, #56]	; (1564 <sendPID+0x5c>)
    152a:	b282      	uxth	r2, r0
    152c:	1c20      	adds	r0, r4, #0
    152e:	1c29      	adds	r1, r5, #0
    1530:	4b0d      	ldr	r3, [pc, #52]	; (1568 <sendPID+0x60>)
    1532:	4798      	blx	r3
	usart_write_wait(&usart_instance_STN, 0x0D);
    1534:	1c20      	adds	r0, r4, #0
    1536:	210d      	movs	r1, #13
    1538:	4b0c      	ldr	r3, [pc, #48]	; (156c <sendPID+0x64>)
    153a:	4798      	blx	r3
	
	delay_ms(10) ; // This delay is playing role in improving throughput with STN communication
    153c:	200a      	movs	r0, #10
    153e:	4b0c      	ldr	r3, [pc, #48]	; (1570 <sendPID+0x68>)
    1540:	4798      	blx	r3
	
	while( STNRcvCompleteFlag != true );
    1542:	4a0c      	ldr	r2, [pc, #48]	; (1574 <sendPID+0x6c>)
    1544:	7813      	ldrb	r3, [r2, #0]
    1546:	2b00      	cmp	r3, #0
    1548:	d0fc      	beq.n	1544 <sendPID+0x3c>
	STNRcvCompleteFlag = false;
    154a:	2200      	movs	r2, #0
    154c:	4b09      	ldr	r3, [pc, #36]	; (1574 <sendPID+0x6c>)
    154e:	701a      	strb	r2, [r3, #0]
}
    1550:	bd70      	pop	{r4, r5, r6, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	200000c8 	.word	0x200000c8
    1558:	00001b2d 	.word	0x00001b2d
    155c:	000017e1 	.word	0x000017e1
    1560:	2000012c 	.word	0x2000012c
    1564:	2000015c 	.word	0x2000015c
    1568:	000008c9 	.word	0x000008c9
    156c:	00000841 	.word	0x00000841
    1570:	00000b91 	.word	0x00000b91
    1574:	2000012d 	.word	0x2000012d

00001578 <LedInit>:



void LedInit(void)
{
    1578:	b530      	push	{r4, r5, lr}
    157a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    157c:	ac01      	add	r4, sp, #4
    157e:	2301      	movs	r3, #1
    1580:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    1582:	2200      	movs	r2, #0
    1584:	70a2      	strb	r2, [r4, #2]
	struct port_config ConfigPinLed;
	
	port_get_config_defaults(&ConfigPinLed);
	ConfigPinLed.direction = PORT_PIN_DIR_OUTPUT;
    1586:	7023      	strb	r3, [r4, #0]
	ConfigPinLed.input_pull = PORT_PIN_PULL_UP;
	
	port_pin_set_config(PIN_PB01, &ConfigPinLed);
    1588:	2021      	movs	r0, #33	; 0x21
    158a:	1c21      	adds	r1, r4, #0
    158c:	4d08      	ldr	r5, [pc, #32]	; (15b0 <LedInit+0x38>)
    158e:	47a8      	blx	r5
	port_pin_set_config(PIN_PB02, &ConfigPinLed);
    1590:	2022      	movs	r0, #34	; 0x22
    1592:	1c21      	adds	r1, r4, #0
    1594:	47a8      	blx	r5
	port_pin_set_config(PIN_PB03, &ConfigPinLed);
    1596:	2023      	movs	r0, #35	; 0x23
    1598:	1c21      	adds	r1, r4, #0
    159a:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    159c:	4b05      	ldr	r3, [pc, #20]	; (15b4 <LedInit+0x3c>)
    159e:	2202      	movs	r2, #2
    15a0:	619a      	str	r2, [r3, #24]
    15a2:	2204      	movs	r2, #4
    15a4:	619a      	str	r2, [r3, #24]
    15a6:	2208      	movs	r2, #8
    15a8:	619a      	str	r2, [r3, #24]
	
	port_pin_set_output_level(PIN_PB01, 1);
	port_pin_set_output_level(PIN_PB02, 1);
	port_pin_set_output_level(PIN_PB03, 1);
}
    15aa:	b003      	add	sp, #12
    15ac:	bd30      	pop	{r4, r5, pc}
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	00000161 	.word	0x00000161
    15b4:	41004480 	.word	0x41004480

000015b8 <main>:


int main (void)
{
    15b8:	b570      	push	{r4, r5, r6, lr}
	system_init();
    15ba:	4b0f      	ldr	r3, [pc, #60]	; (15f8 <main+0x40>)
    15bc:	4798      	blx	r3
	configure_usart_CONSOLE();
    15be:	4b0f      	ldr	r3, [pc, #60]	; (15fc <main+0x44>)
    15c0:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    15c2:	2201      	movs	r2, #1
    15c4:	4b0e      	ldr	r3, [pc, #56]	; (1600 <main+0x48>)
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	f3bf 8f5f 	dmb	sy
    15cc:	b662      	cpsie	i
	system_interrupt_enable_global();
	configure_usart_STN();
    15ce:	4b0d      	ldr	r3, [pc, #52]	; (1604 <main+0x4c>)
    15d0:	4798      	blx	r3
	LedInit();
    15d2:	4b0d      	ldr	r3, [pc, #52]	; (1608 <main+0x50>)
    15d4:	4798      	blx	r3
	
	printf("\r\nTHIS YOU CAN SEE means STDIO Configure properly!!!\r\n");
    15d6:	480d      	ldr	r0, [pc, #52]	; (160c <main+0x54>)
    15d8:	4b0d      	ldr	r3, [pc, #52]	; (1610 <main+0x58>)
    15da:	4798      	blx	r3
	write_DEBUG("\r\nConfigurations DONE!!!\r\n");
    15dc:	480d      	ldr	r0, [pc, #52]	; (1614 <main+0x5c>)
    15de:	4b0e      	ldr	r3, [pc, #56]	; (1618 <main+0x60>)
    15e0:	4798      	blx	r3
	
	while (true)
	{
		sendPID("010C");
    15e2:	4e0e      	ldr	r6, [pc, #56]	; (161c <main+0x64>)
    15e4:	4d0e      	ldr	r5, [pc, #56]	; (1620 <main+0x68>)
		printf("\r\nRecieved from STN: %s\r\n", STNResBuff);
    15e6:	4c0f      	ldr	r4, [pc, #60]	; (1624 <main+0x6c>)
	printf("\r\nTHIS YOU CAN SEE means STDIO Configure properly!!!\r\n");
	write_DEBUG("\r\nConfigurations DONE!!!\r\n");
	
	while (true)
	{
		sendPID("010C");
    15e8:	1c30      	adds	r0, r6, #0
    15ea:	47a8      	blx	r5
		printf("\r\nRecieved from STN: %s\r\n", STNResBuff);
    15ec:	1c20      	adds	r0, r4, #0
    15ee:	490e      	ldr	r1, [pc, #56]	; (1628 <main+0x70>)
    15f0:	4b0e      	ldr	r3, [pc, #56]	; (162c <main+0x74>)
    15f2:	4798      	blx	r3
    15f4:	e7f8      	b.n	15e8 <main+0x30>
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00001131 	.word	0x00001131
    15fc:	0000126d 	.word	0x0000126d
    1600:	20000004 	.word	0x20000004
    1604:	000013a5 	.word	0x000013a5
    1608:	00001579 	.word	0x00001579
    160c:	00003208 	.word	0x00003208
    1610:	000019d9 	.word	0x000019d9
    1614:	00003240 	.word	0x00003240
    1618:	00001385 	.word	0x00001385
    161c:	0000325c 	.word	0x0000325c
    1620:	00001509 	.word	0x00001509
    1624:	00003264 	.word	0x00003264
    1628:	200000c8 	.word	0x200000c8
    162c:	000018cd 	.word	0x000018cd

00001630 <__aeabi_uidiv>:
    1630:	2900      	cmp	r1, #0
    1632:	d034      	beq.n	169e <.udivsi3_skip_div0_test+0x6a>

00001634 <.udivsi3_skip_div0_test>:
    1634:	2301      	movs	r3, #1
    1636:	2200      	movs	r2, #0
    1638:	b410      	push	{r4}
    163a:	4288      	cmp	r0, r1
    163c:	d32c      	bcc.n	1698 <.udivsi3_skip_div0_test+0x64>
    163e:	2401      	movs	r4, #1
    1640:	0724      	lsls	r4, r4, #28
    1642:	42a1      	cmp	r1, r4
    1644:	d204      	bcs.n	1650 <.udivsi3_skip_div0_test+0x1c>
    1646:	4281      	cmp	r1, r0
    1648:	d202      	bcs.n	1650 <.udivsi3_skip_div0_test+0x1c>
    164a:	0109      	lsls	r1, r1, #4
    164c:	011b      	lsls	r3, r3, #4
    164e:	e7f8      	b.n	1642 <.udivsi3_skip_div0_test+0xe>
    1650:	00e4      	lsls	r4, r4, #3
    1652:	42a1      	cmp	r1, r4
    1654:	d204      	bcs.n	1660 <.udivsi3_skip_div0_test+0x2c>
    1656:	4281      	cmp	r1, r0
    1658:	d202      	bcs.n	1660 <.udivsi3_skip_div0_test+0x2c>
    165a:	0049      	lsls	r1, r1, #1
    165c:	005b      	lsls	r3, r3, #1
    165e:	e7f8      	b.n	1652 <.udivsi3_skip_div0_test+0x1e>
    1660:	4288      	cmp	r0, r1
    1662:	d301      	bcc.n	1668 <.udivsi3_skip_div0_test+0x34>
    1664:	1a40      	subs	r0, r0, r1
    1666:	431a      	orrs	r2, r3
    1668:	084c      	lsrs	r4, r1, #1
    166a:	42a0      	cmp	r0, r4
    166c:	d302      	bcc.n	1674 <.udivsi3_skip_div0_test+0x40>
    166e:	1b00      	subs	r0, r0, r4
    1670:	085c      	lsrs	r4, r3, #1
    1672:	4322      	orrs	r2, r4
    1674:	088c      	lsrs	r4, r1, #2
    1676:	42a0      	cmp	r0, r4
    1678:	d302      	bcc.n	1680 <.udivsi3_skip_div0_test+0x4c>
    167a:	1b00      	subs	r0, r0, r4
    167c:	089c      	lsrs	r4, r3, #2
    167e:	4322      	orrs	r2, r4
    1680:	08cc      	lsrs	r4, r1, #3
    1682:	42a0      	cmp	r0, r4
    1684:	d302      	bcc.n	168c <.udivsi3_skip_div0_test+0x58>
    1686:	1b00      	subs	r0, r0, r4
    1688:	08dc      	lsrs	r4, r3, #3
    168a:	4322      	orrs	r2, r4
    168c:	2800      	cmp	r0, #0
    168e:	d003      	beq.n	1698 <.udivsi3_skip_div0_test+0x64>
    1690:	091b      	lsrs	r3, r3, #4
    1692:	d001      	beq.n	1698 <.udivsi3_skip_div0_test+0x64>
    1694:	0909      	lsrs	r1, r1, #4
    1696:	e7e3      	b.n	1660 <.udivsi3_skip_div0_test+0x2c>
    1698:	1c10      	adds	r0, r2, #0
    169a:	bc10      	pop	{r4}
    169c:	4770      	bx	lr
    169e:	2800      	cmp	r0, #0
    16a0:	d001      	beq.n	16a6 <.udivsi3_skip_div0_test+0x72>
    16a2:	2000      	movs	r0, #0
    16a4:	43c0      	mvns	r0, r0
    16a6:	b407      	push	{r0, r1, r2}
    16a8:	4802      	ldr	r0, [pc, #8]	; (16b4 <.udivsi3_skip_div0_test+0x80>)
    16aa:	a102      	add	r1, pc, #8	; (adr r1, 16b4 <.udivsi3_skip_div0_test+0x80>)
    16ac:	1840      	adds	r0, r0, r1
    16ae:	9002      	str	r0, [sp, #8]
    16b0:	bd03      	pop	{r0, r1, pc}
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	00000019 	.word	0x00000019

000016b8 <__aeabi_uidivmod>:
    16b8:	2900      	cmp	r1, #0
    16ba:	d0f0      	beq.n	169e <.udivsi3_skip_div0_test+0x6a>
    16bc:	b503      	push	{r0, r1, lr}
    16be:	f7ff ffb9 	bl	1634 <.udivsi3_skip_div0_test>
    16c2:	bc0e      	pop	{r1, r2, r3}
    16c4:	4342      	muls	r2, r0
    16c6:	1a89      	subs	r1, r1, r2
    16c8:	4718      	bx	r3
    16ca:	46c0      	nop			; (mov r8, r8)

000016cc <__aeabi_idiv0>:
    16cc:	4770      	bx	lr
    16ce:	46c0      	nop			; (mov r8, r8)

000016d0 <__aeabi_lmul>:
    16d0:	469c      	mov	ip, r3
    16d2:	0403      	lsls	r3, r0, #16
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	0c1b      	lsrs	r3, r3, #16
    16d8:	0417      	lsls	r7, r2, #16
    16da:	0c3f      	lsrs	r7, r7, #16
    16dc:	0c15      	lsrs	r5, r2, #16
    16de:	1c1e      	adds	r6, r3, #0
    16e0:	1c04      	adds	r4, r0, #0
    16e2:	0c00      	lsrs	r0, r0, #16
    16e4:	437e      	muls	r6, r7
    16e6:	436b      	muls	r3, r5
    16e8:	4347      	muls	r7, r0
    16ea:	4345      	muls	r5, r0
    16ec:	18fb      	adds	r3, r7, r3
    16ee:	0c30      	lsrs	r0, r6, #16
    16f0:	1818      	adds	r0, r3, r0
    16f2:	4287      	cmp	r7, r0
    16f4:	d902      	bls.n	16fc <__aeabi_lmul+0x2c>
    16f6:	2380      	movs	r3, #128	; 0x80
    16f8:	025b      	lsls	r3, r3, #9
    16fa:	18ed      	adds	r5, r5, r3
    16fc:	0c03      	lsrs	r3, r0, #16
    16fe:	18ed      	adds	r5, r5, r3
    1700:	4663      	mov	r3, ip
    1702:	435c      	muls	r4, r3
    1704:	434a      	muls	r2, r1
    1706:	0436      	lsls	r6, r6, #16
    1708:	0c36      	lsrs	r6, r6, #16
    170a:	18a1      	adds	r1, r4, r2
    170c:	0400      	lsls	r0, r0, #16
    170e:	1980      	adds	r0, r0, r6
    1710:	1949      	adds	r1, r1, r5
    1712:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001714 <__libc_init_array>:
    1714:	b570      	push	{r4, r5, r6, lr}
    1716:	4e0d      	ldr	r6, [pc, #52]	; (174c <__libc_init_array+0x38>)
    1718:	4d0d      	ldr	r5, [pc, #52]	; (1750 <__libc_init_array+0x3c>)
    171a:	2400      	movs	r4, #0
    171c:	1bad      	subs	r5, r5, r6
    171e:	10ad      	asrs	r5, r5, #2
    1720:	d005      	beq.n	172e <__libc_init_array+0x1a>
    1722:	00a3      	lsls	r3, r4, #2
    1724:	58f3      	ldr	r3, [r6, r3]
    1726:	3401      	adds	r4, #1
    1728:	4798      	blx	r3
    172a:	42a5      	cmp	r5, r4
    172c:	d1f9      	bne.n	1722 <__libc_init_array+0xe>
    172e:	f001 fdf9 	bl	3324 <_init>
    1732:	4e08      	ldr	r6, [pc, #32]	; (1754 <__libc_init_array+0x40>)
    1734:	4d08      	ldr	r5, [pc, #32]	; (1758 <__libc_init_array+0x44>)
    1736:	2400      	movs	r4, #0
    1738:	1bad      	subs	r5, r5, r6
    173a:	10ad      	asrs	r5, r5, #2
    173c:	d005      	beq.n	174a <__libc_init_array+0x36>
    173e:	00a3      	lsls	r3, r4, #2
    1740:	58f3      	ldr	r3, [r6, r3]
    1742:	3401      	adds	r4, #1
    1744:	4798      	blx	r3
    1746:	42a5      	cmp	r5, r4
    1748:	d1f9      	bne.n	173e <__libc_init_array+0x2a>
    174a:	bd70      	pop	{r4, r5, r6, pc}
    174c:	00003330 	.word	0x00003330
    1750:	00003330 	.word	0x00003330
    1754:	00003330 	.word	0x00003330
    1758:	00003334 	.word	0x00003334

0000175c <memcpy>:
    175c:	b5f0      	push	{r4, r5, r6, r7, lr}
    175e:	2a0f      	cmp	r2, #15
    1760:	d935      	bls.n	17ce <memcpy+0x72>
    1762:	1c03      	adds	r3, r0, #0
    1764:	430b      	orrs	r3, r1
    1766:	079c      	lsls	r4, r3, #30
    1768:	d135      	bne.n	17d6 <memcpy+0x7a>
    176a:	1c16      	adds	r6, r2, #0
    176c:	3e10      	subs	r6, #16
    176e:	0936      	lsrs	r6, r6, #4
    1770:	0135      	lsls	r5, r6, #4
    1772:	1945      	adds	r5, r0, r5
    1774:	3510      	adds	r5, #16
    1776:	1c0c      	adds	r4, r1, #0
    1778:	1c03      	adds	r3, r0, #0
    177a:	6827      	ldr	r7, [r4, #0]
    177c:	601f      	str	r7, [r3, #0]
    177e:	6867      	ldr	r7, [r4, #4]
    1780:	605f      	str	r7, [r3, #4]
    1782:	68a7      	ldr	r7, [r4, #8]
    1784:	609f      	str	r7, [r3, #8]
    1786:	68e7      	ldr	r7, [r4, #12]
    1788:	3410      	adds	r4, #16
    178a:	60df      	str	r7, [r3, #12]
    178c:	3310      	adds	r3, #16
    178e:	42ab      	cmp	r3, r5
    1790:	d1f3      	bne.n	177a <memcpy+0x1e>
    1792:	1c73      	adds	r3, r6, #1
    1794:	011b      	lsls	r3, r3, #4
    1796:	18c5      	adds	r5, r0, r3
    1798:	18c9      	adds	r1, r1, r3
    179a:	230f      	movs	r3, #15
    179c:	4013      	ands	r3, r2
    179e:	2b03      	cmp	r3, #3
    17a0:	d91b      	bls.n	17da <memcpy+0x7e>
    17a2:	1f1c      	subs	r4, r3, #4
    17a4:	08a4      	lsrs	r4, r4, #2
    17a6:	3401      	adds	r4, #1
    17a8:	00a4      	lsls	r4, r4, #2
    17aa:	2300      	movs	r3, #0
    17ac:	58ce      	ldr	r6, [r1, r3]
    17ae:	50ee      	str	r6, [r5, r3]
    17b0:	3304      	adds	r3, #4
    17b2:	42a3      	cmp	r3, r4
    17b4:	d1fa      	bne.n	17ac <memcpy+0x50>
    17b6:	18ed      	adds	r5, r5, r3
    17b8:	18c9      	adds	r1, r1, r3
    17ba:	2303      	movs	r3, #3
    17bc:	401a      	ands	r2, r3
    17be:	d005      	beq.n	17cc <memcpy+0x70>
    17c0:	2300      	movs	r3, #0
    17c2:	5ccc      	ldrb	r4, [r1, r3]
    17c4:	54ec      	strb	r4, [r5, r3]
    17c6:	3301      	adds	r3, #1
    17c8:	4293      	cmp	r3, r2
    17ca:	d1fa      	bne.n	17c2 <memcpy+0x66>
    17cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17ce:	1c05      	adds	r5, r0, #0
    17d0:	2a00      	cmp	r2, #0
    17d2:	d1f5      	bne.n	17c0 <memcpy+0x64>
    17d4:	e7fa      	b.n	17cc <memcpy+0x70>
    17d6:	1c05      	adds	r5, r0, #0
    17d8:	e7f2      	b.n	17c0 <memcpy+0x64>
    17da:	1c1a      	adds	r2, r3, #0
    17dc:	e7f8      	b.n	17d0 <memcpy+0x74>
    17de:	46c0      	nop			; (mov r8, r8)

000017e0 <memset>:
    17e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e2:	464f      	mov	r7, r9
    17e4:	4646      	mov	r6, r8
    17e6:	b4c0      	push	{r6, r7}
    17e8:	b083      	sub	sp, #12
    17ea:	0783      	lsls	r3, r0, #30
    17ec:	d052      	beq.n	1894 <memset+0xb4>
    17ee:	1e54      	subs	r4, r2, #1
    17f0:	2a00      	cmp	r2, #0
    17f2:	d04a      	beq.n	188a <memset+0xaa>
    17f4:	b2ce      	uxtb	r6, r1
    17f6:	1c03      	adds	r3, r0, #0
    17f8:	2503      	movs	r5, #3
    17fa:	e003      	b.n	1804 <memset+0x24>
    17fc:	1e62      	subs	r2, r4, #1
    17fe:	2c00      	cmp	r4, #0
    1800:	d043      	beq.n	188a <memset+0xaa>
    1802:	1c14      	adds	r4, r2, #0
    1804:	3301      	adds	r3, #1
    1806:	1e5a      	subs	r2, r3, #1
    1808:	7016      	strb	r6, [r2, #0]
    180a:	422b      	tst	r3, r5
    180c:	d1f6      	bne.n	17fc <memset+0x1c>
    180e:	2c03      	cmp	r4, #3
    1810:	d933      	bls.n	187a <memset+0x9a>
    1812:	25ff      	movs	r5, #255	; 0xff
    1814:	400d      	ands	r5, r1
    1816:	022a      	lsls	r2, r5, #8
    1818:	4315      	orrs	r5, r2
    181a:	042a      	lsls	r2, r5, #16
    181c:	4315      	orrs	r5, r2
    181e:	2c0f      	cmp	r4, #15
    1820:	d91a      	bls.n	1858 <memset+0x78>
    1822:	1c27      	adds	r7, r4, #0
    1824:	3f10      	subs	r7, #16
    1826:	093f      	lsrs	r7, r7, #4
    1828:	46b9      	mov	r9, r7
    182a:	013f      	lsls	r7, r7, #4
    182c:	46b8      	mov	r8, r7
    182e:	2710      	movs	r7, #16
    1830:	18ff      	adds	r7, r7, r3
    1832:	46bc      	mov	ip, r7
    1834:	4646      	mov	r6, r8
    1836:	1c1a      	adds	r2, r3, #0
    1838:	4466      	add	r6, ip
    183a:	6015      	str	r5, [r2, #0]
    183c:	6055      	str	r5, [r2, #4]
    183e:	6095      	str	r5, [r2, #8]
    1840:	60d5      	str	r5, [r2, #12]
    1842:	3210      	adds	r2, #16
    1844:	42b2      	cmp	r2, r6
    1846:	d1f8      	bne.n	183a <memset+0x5a>
    1848:	464f      	mov	r7, r9
    184a:	3701      	adds	r7, #1
    184c:	013f      	lsls	r7, r7, #4
    184e:	220f      	movs	r2, #15
    1850:	19db      	adds	r3, r3, r7
    1852:	4014      	ands	r4, r2
    1854:	2c03      	cmp	r4, #3
    1856:	d910      	bls.n	187a <memset+0x9a>
    1858:	1f27      	subs	r7, r4, #4
    185a:	1d1e      	adds	r6, r3, #4
    185c:	08bf      	lsrs	r7, r7, #2
    185e:	9601      	str	r6, [sp, #4]
    1860:	00be      	lsls	r6, r7, #2
    1862:	46b4      	mov	ip, r6
    1864:	9e01      	ldr	r6, [sp, #4]
    1866:	1c1a      	adds	r2, r3, #0
    1868:	4466      	add	r6, ip
    186a:	c220      	stmia	r2!, {r5}
    186c:	42b2      	cmp	r2, r6
    186e:	d1fc      	bne.n	186a <memset+0x8a>
    1870:	3701      	adds	r7, #1
    1872:	00bf      	lsls	r7, r7, #2
    1874:	2203      	movs	r2, #3
    1876:	19db      	adds	r3, r3, r7
    1878:	4014      	ands	r4, r2
    187a:	2c00      	cmp	r4, #0
    187c:	d005      	beq.n	188a <memset+0xaa>
    187e:	b2c9      	uxtb	r1, r1
    1880:	191c      	adds	r4, r3, r4
    1882:	7019      	strb	r1, [r3, #0]
    1884:	3301      	adds	r3, #1
    1886:	42a3      	cmp	r3, r4
    1888:	d1fb      	bne.n	1882 <memset+0xa2>
    188a:	b003      	add	sp, #12
    188c:	bc0c      	pop	{r2, r3}
    188e:	4690      	mov	r8, r2
    1890:	4699      	mov	r9, r3
    1892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1894:	1c03      	adds	r3, r0, #0
    1896:	1c14      	adds	r4, r2, #0
    1898:	e7b9      	b.n	180e <memset+0x2e>
    189a:	46c0      	nop			; (mov r8, r8)

0000189c <_iprintf_r>:
    189c:	b40e      	push	{r1, r2, r3}
    189e:	b510      	push	{r4, lr}
    18a0:	1c04      	adds	r4, r0, #0
    18a2:	b083      	sub	sp, #12
    18a4:	2800      	cmp	r0, #0
    18a6:	d004      	beq.n	18b2 <_iprintf_r+0x16>
    18a8:	6983      	ldr	r3, [r0, #24]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d101      	bne.n	18b2 <_iprintf_r+0x16>
    18ae:	f000 fceb 	bl	2288 <__sinit>
    18b2:	ab06      	add	r3, sp, #24
    18b4:	68a1      	ldr	r1, [r4, #8]
    18b6:	1c20      	adds	r0, r4, #0
    18b8:	9a05      	ldr	r2, [sp, #20]
    18ba:	9301      	str	r3, [sp, #4]
    18bc:	f000 f980 	bl	1bc0 <_vfiprintf_r>
    18c0:	b003      	add	sp, #12
    18c2:	bc10      	pop	{r4}
    18c4:	bc08      	pop	{r3}
    18c6:	b003      	add	sp, #12
    18c8:	4718      	bx	r3
    18ca:	46c0      	nop			; (mov r8, r8)

000018cc <iprintf>:
    18cc:	b40f      	push	{r0, r1, r2, r3}
    18ce:	b510      	push	{r4, lr}
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <iprintf+0x34>)
    18d2:	b082      	sub	sp, #8
    18d4:	681c      	ldr	r4, [r3, #0]
    18d6:	2c00      	cmp	r4, #0
    18d8:	d005      	beq.n	18e6 <iprintf+0x1a>
    18da:	69a3      	ldr	r3, [r4, #24]
    18dc:	2b00      	cmp	r3, #0
    18de:	d102      	bne.n	18e6 <iprintf+0x1a>
    18e0:	1c20      	adds	r0, r4, #0
    18e2:	f000 fcd1 	bl	2288 <__sinit>
    18e6:	ab05      	add	r3, sp, #20
    18e8:	68a1      	ldr	r1, [r4, #8]
    18ea:	1c20      	adds	r0, r4, #0
    18ec:	9a04      	ldr	r2, [sp, #16]
    18ee:	9301      	str	r3, [sp, #4]
    18f0:	f000 f966 	bl	1bc0 <_vfiprintf_r>
    18f4:	b002      	add	sp, #8
    18f6:	bc10      	pop	{r4}
    18f8:	bc08      	pop	{r3}
    18fa:	b004      	add	sp, #16
    18fc:	4718      	bx	r3
    18fe:	46c0      	nop			; (mov r8, r8)
    1900:	20000008 	.word	0x20000008

00001904 <_puts_r>:
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	1c06      	adds	r6, r0, #0
    1908:	1c0d      	adds	r5, r1, #0
    190a:	2800      	cmp	r0, #0
    190c:	d002      	beq.n	1914 <_puts_r+0x10>
    190e:	6982      	ldr	r2, [r0, #24]
    1910:	2a00      	cmp	r2, #0
    1912:	d047      	beq.n	19a4 <_puts_r+0xa0>
    1914:	68b4      	ldr	r4, [r6, #8]
    1916:	89a3      	ldrh	r3, [r4, #12]
    1918:	071a      	lsls	r2, r3, #28
    191a:	d53c      	bpl.n	1996 <_puts_r+0x92>
    191c:	6923      	ldr	r3, [r4, #16]
    191e:	2b00      	cmp	r3, #0
    1920:	d039      	beq.n	1996 <_puts_r+0x92>
    1922:	782b      	ldrb	r3, [r5, #0]
    1924:	2b00      	cmp	r3, #0
    1926:	d00e      	beq.n	1946 <_puts_r+0x42>
    1928:	68a3      	ldr	r3, [r4, #8]
    192a:	3b01      	subs	r3, #1
    192c:	60a3      	str	r3, [r4, #8]
    192e:	2b00      	cmp	r3, #0
    1930:	db16      	blt.n	1960 <_puts_r+0x5c>
    1932:	782b      	ldrb	r3, [r5, #0]
    1934:	6822      	ldr	r2, [r4, #0]
    1936:	7013      	strb	r3, [r2, #0]
    1938:	6823      	ldr	r3, [r4, #0]
    193a:	3301      	adds	r3, #1
    193c:	6023      	str	r3, [r4, #0]
    193e:	3501      	adds	r5, #1
    1940:	782b      	ldrb	r3, [r5, #0]
    1942:	2b00      	cmp	r3, #0
    1944:	d1f0      	bne.n	1928 <_puts_r+0x24>
    1946:	68a3      	ldr	r3, [r4, #8]
    1948:	3b01      	subs	r3, #1
    194a:	60a3      	str	r3, [r4, #8]
    194c:	2b00      	cmp	r3, #0
    194e:	db2c      	blt.n	19aa <_puts_r+0xa6>
    1950:	6822      	ldr	r2, [r4, #0]
    1952:	230a      	movs	r3, #10
    1954:	7013      	strb	r3, [r2, #0]
    1956:	6823      	ldr	r3, [r4, #0]
    1958:	3301      	adds	r3, #1
    195a:	6023      	str	r3, [r4, #0]
    195c:	200a      	movs	r0, #10
    195e:	e019      	b.n	1994 <_puts_r+0x90>
    1960:	69a2      	ldr	r2, [r4, #24]
    1962:	4293      	cmp	r3, r2
    1964:	db09      	blt.n	197a <_puts_r+0x76>
    1966:	782b      	ldrb	r3, [r5, #0]
    1968:	6822      	ldr	r2, [r4, #0]
    196a:	7013      	strb	r3, [r2, #0]
    196c:	6823      	ldr	r3, [r4, #0]
    196e:	781a      	ldrb	r2, [r3, #0]
    1970:	2a0a      	cmp	r2, #10
    1972:	d1e2      	bne.n	193a <_puts_r+0x36>
    1974:	1c30      	adds	r0, r6, #0
    1976:	210a      	movs	r1, #10
    1978:	e001      	b.n	197e <_puts_r+0x7a>
    197a:	7829      	ldrb	r1, [r5, #0]
    197c:	1c30      	adds	r0, r6, #0
    197e:	1c22      	adds	r2, r4, #0
    1980:	f000 fa74 	bl	1e6c <__swbuf_r>
    1984:	1c43      	adds	r3, r0, #1
    1986:	425a      	negs	r2, r3
    1988:	4153      	adcs	r3, r2
    198a:	b2db      	uxtb	r3, r3
    198c:	2b00      	cmp	r3, #0
    198e:	d0d6      	beq.n	193e <_puts_r+0x3a>
    1990:	2001      	movs	r0, #1
    1992:	4240      	negs	r0, r0
    1994:	bd70      	pop	{r4, r5, r6, pc}
    1996:	1c30      	adds	r0, r6, #0
    1998:	1c21      	adds	r1, r4, #0
    199a:	f000 fad9 	bl	1f50 <__swsetup_r>
    199e:	2800      	cmp	r0, #0
    19a0:	d0bf      	beq.n	1922 <_puts_r+0x1e>
    19a2:	e7f5      	b.n	1990 <_puts_r+0x8c>
    19a4:	f000 fc70 	bl	2288 <__sinit>
    19a8:	e7b4      	b.n	1914 <_puts_r+0x10>
    19aa:	69a2      	ldr	r2, [r4, #24]
    19ac:	4293      	cmp	r3, r2
    19ae:	db06      	blt.n	19be <_puts_r+0xba>
    19b0:	6822      	ldr	r2, [r4, #0]
    19b2:	230a      	movs	r3, #10
    19b4:	7013      	strb	r3, [r2, #0]
    19b6:	6823      	ldr	r3, [r4, #0]
    19b8:	781a      	ldrb	r2, [r3, #0]
    19ba:	2a0a      	cmp	r2, #10
    19bc:	d1cc      	bne.n	1958 <_puts_r+0x54>
    19be:	1c22      	adds	r2, r4, #0
    19c0:	1c30      	adds	r0, r6, #0
    19c2:	210a      	movs	r1, #10
    19c4:	f000 fa52 	bl	1e6c <__swbuf_r>
    19c8:	1c43      	adds	r3, r0, #1
    19ca:	425a      	negs	r2, r3
    19cc:	4153      	adcs	r3, r2
    19ce:	b2db      	uxtb	r3, r3
    19d0:	2b00      	cmp	r3, #0
    19d2:	d1dd      	bne.n	1990 <_puts_r+0x8c>
    19d4:	200a      	movs	r0, #10
    19d6:	e7dd      	b.n	1994 <_puts_r+0x90>

000019d8 <puts>:
    19d8:	b508      	push	{r3, lr}
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <puts+0x10>)
    19dc:	1c01      	adds	r1, r0, #0
    19de:	6818      	ldr	r0, [r3, #0]
    19e0:	f7ff ff90 	bl	1904 <_puts_r>
    19e4:	bd08      	pop	{r3, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	20000008 	.word	0x20000008

000019ec <setbuf>:
    19ec:	b508      	push	{r3, lr}
    19ee:	424a      	negs	r2, r1
    19f0:	414a      	adcs	r2, r1
    19f2:	2380      	movs	r3, #128	; 0x80
    19f4:	0052      	lsls	r2, r2, #1
    19f6:	00db      	lsls	r3, r3, #3
    19f8:	f000 f802 	bl	1a00 <setvbuf>
    19fc:	bd08      	pop	{r3, pc}
    19fe:	46c0      	nop			; (mov r8, r8)

00001a00 <setvbuf>:
    1a00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a02:	4647      	mov	r7, r8
    1a04:	b480      	push	{r7}
    1a06:	1c1f      	adds	r7, r3, #0
    1a08:	4b43      	ldr	r3, [pc, #268]	; (1b18 <setvbuf+0x118>)
    1a0a:	1c04      	adds	r4, r0, #0
    1a0c:	681d      	ldr	r5, [r3, #0]
    1a0e:	4688      	mov	r8, r1
    1a10:	1c16      	adds	r6, r2, #0
    1a12:	2d00      	cmp	r5, #0
    1a14:	d002      	beq.n	1a1c <setvbuf+0x1c>
    1a16:	69ab      	ldr	r3, [r5, #24]
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d051      	beq.n	1ac0 <setvbuf+0xc0>
    1a1c:	4b3f      	ldr	r3, [pc, #252]	; (1b1c <setvbuf+0x11c>)
    1a1e:	429c      	cmp	r4, r3
    1a20:	d054      	beq.n	1acc <setvbuf+0xcc>
    1a22:	4b3f      	ldr	r3, [pc, #252]	; (1b20 <setvbuf+0x120>)
    1a24:	429c      	cmp	r4, r3
    1a26:	d053      	beq.n	1ad0 <setvbuf+0xd0>
    1a28:	4b3e      	ldr	r3, [pc, #248]	; (1b24 <setvbuf+0x124>)
    1a2a:	429c      	cmp	r4, r3
    1a2c:	d061      	beq.n	1af2 <setvbuf+0xf2>
    1a2e:	2e02      	cmp	r6, #2
    1a30:	d861      	bhi.n	1af6 <setvbuf+0xf6>
    1a32:	2f00      	cmp	r7, #0
    1a34:	db5f      	blt.n	1af6 <setvbuf+0xf6>
    1a36:	1c28      	adds	r0, r5, #0
    1a38:	1c21      	adds	r1, r4, #0
    1a3a:	f000 fba1 	bl	2180 <_fflush_r>
    1a3e:	89a2      	ldrh	r2, [r4, #12]
    1a40:	2300      	movs	r3, #0
    1a42:	6063      	str	r3, [r4, #4]
    1a44:	61a3      	str	r3, [r4, #24]
    1a46:	0613      	lsls	r3, r2, #24
    1a48:	d423      	bmi.n	1a92 <setvbuf+0x92>
    1a4a:	2383      	movs	r3, #131	; 0x83
    1a4c:	439a      	bics	r2, r3
    1a4e:	81a2      	strh	r2, [r4, #12]
    1a50:	2e02      	cmp	r6, #2
    1a52:	d028      	beq.n	1aa6 <setvbuf+0xa6>
    1a54:	4643      	mov	r3, r8
    1a56:	2b00      	cmp	r3, #0
    1a58:	d03c      	beq.n	1ad4 <setvbuf+0xd4>
    1a5a:	2e01      	cmp	r6, #1
    1a5c:	d013      	beq.n	1a86 <setvbuf+0x86>
    1a5e:	4b32      	ldr	r3, [pc, #200]	; (1b28 <setvbuf+0x128>)
    1a60:	b292      	uxth	r2, r2
    1a62:	62ab      	str	r3, [r5, #40]	; 0x28
    1a64:	4643      	mov	r3, r8
    1a66:	6023      	str	r3, [r4, #0]
    1a68:	6123      	str	r3, [r4, #16]
    1a6a:	6167      	str	r7, [r4, #20]
    1a6c:	2000      	movs	r0, #0
    1a6e:	0713      	lsls	r3, r2, #28
    1a70:	d506      	bpl.n	1a80 <setvbuf+0x80>
    1a72:	2303      	movs	r3, #3
    1a74:	401a      	ands	r2, r3
    1a76:	4253      	negs	r3, r2
    1a78:	415a      	adcs	r2, r3
    1a7a:	4252      	negs	r2, r2
    1a7c:	4017      	ands	r7, r2
    1a7e:	60a7      	str	r7, [r4, #8]
    1a80:	bc04      	pop	{r2}
    1a82:	4690      	mov	r8, r2
    1a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a86:	2301      	movs	r3, #1
    1a88:	431a      	orrs	r2, r3
    1a8a:	427b      	negs	r3, r7
    1a8c:	81a2      	strh	r2, [r4, #12]
    1a8e:	61a3      	str	r3, [r4, #24]
    1a90:	e7e5      	b.n	1a5e <setvbuf+0x5e>
    1a92:	1c28      	adds	r0, r5, #0
    1a94:	6921      	ldr	r1, [r4, #16]
    1a96:	f000 ffb7 	bl	2a08 <_free_r>
    1a9a:	89a2      	ldrh	r2, [r4, #12]
    1a9c:	2383      	movs	r3, #131	; 0x83
    1a9e:	439a      	bics	r2, r3
    1aa0:	81a2      	strh	r2, [r4, #12]
    1aa2:	2e02      	cmp	r6, #2
    1aa4:	d1d6      	bne.n	1a54 <setvbuf+0x54>
    1aa6:	2000      	movs	r0, #0
    1aa8:	2302      	movs	r3, #2
    1aaa:	431a      	orrs	r2, r3
    1aac:	2300      	movs	r3, #0
    1aae:	60a3      	str	r3, [r4, #8]
    1ab0:	1c23      	adds	r3, r4, #0
    1ab2:	3347      	adds	r3, #71	; 0x47
    1ab4:	6023      	str	r3, [r4, #0]
    1ab6:	6123      	str	r3, [r4, #16]
    1ab8:	2301      	movs	r3, #1
    1aba:	81a2      	strh	r2, [r4, #12]
    1abc:	6163      	str	r3, [r4, #20]
    1abe:	e7df      	b.n	1a80 <setvbuf+0x80>
    1ac0:	1c28      	adds	r0, r5, #0
    1ac2:	f000 fbe1 	bl	2288 <__sinit>
    1ac6:	4b15      	ldr	r3, [pc, #84]	; (1b1c <setvbuf+0x11c>)
    1ac8:	429c      	cmp	r4, r3
    1aca:	d1aa      	bne.n	1a22 <setvbuf+0x22>
    1acc:	686c      	ldr	r4, [r5, #4]
    1ace:	e7ae      	b.n	1a2e <setvbuf+0x2e>
    1ad0:	68ac      	ldr	r4, [r5, #8]
    1ad2:	e7ac      	b.n	1a2e <setvbuf+0x2e>
    1ad4:	2f00      	cmp	r7, #0
    1ad6:	d101      	bne.n	1adc <setvbuf+0xdc>
    1ad8:	2780      	movs	r7, #128	; 0x80
    1ada:	00ff      	lsls	r7, r7, #3
    1adc:	1c38      	adds	r0, r7, #0
    1ade:	f000 feeb 	bl	28b8 <malloc>
    1ae2:	4680      	mov	r8, r0
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d009      	beq.n	1afc <setvbuf+0xfc>
    1ae8:	89a2      	ldrh	r2, [r4, #12]
    1aea:	2380      	movs	r3, #128	; 0x80
    1aec:	431a      	orrs	r2, r3
    1aee:	81a2      	strh	r2, [r4, #12]
    1af0:	e7b3      	b.n	1a5a <setvbuf+0x5a>
    1af2:	68ec      	ldr	r4, [r5, #12]
    1af4:	e79b      	b.n	1a2e <setvbuf+0x2e>
    1af6:	2001      	movs	r0, #1
    1af8:	4240      	negs	r0, r0
    1afa:	e7c1      	b.n	1a80 <setvbuf+0x80>
    1afc:	2080      	movs	r0, #128	; 0x80
    1afe:	00c0      	lsls	r0, r0, #3
    1b00:	f000 feda 	bl	28b8 <malloc>
    1b04:	4680      	mov	r8, r0
    1b06:	2800      	cmp	r0, #0
    1b08:	d103      	bne.n	1b12 <setvbuf+0x112>
    1b0a:	2001      	movs	r0, #1
    1b0c:	89a2      	ldrh	r2, [r4, #12]
    1b0e:	4240      	negs	r0, r0
    1b10:	e7ca      	b.n	1aa8 <setvbuf+0xa8>
    1b12:	2780      	movs	r7, #128	; 0x80
    1b14:	00ff      	lsls	r7, r7, #3
    1b16:	e7e7      	b.n	1ae8 <setvbuf+0xe8>
    1b18:	20000008 	.word	0x20000008
    1b1c:	000032dc 	.word	0x000032dc
    1b20:	000032bc 	.word	0x000032bc
    1b24:	0000329c 	.word	0x0000329c
    1b28:	00002211 	.word	0x00002211

00001b2c <strlen>:
    1b2c:	2300      	movs	r3, #0
    1b2e:	5cc2      	ldrb	r2, [r0, r3]
    1b30:	3301      	adds	r3, #1
    1b32:	2a00      	cmp	r2, #0
    1b34:	d1fb      	bne.n	1b2e <strlen+0x2>
    1b36:	1e58      	subs	r0, r3, #1
    1b38:	4770      	bx	lr
    1b3a:	46c0      	nop			; (mov r8, r8)

00001b3c <__sfputc_r>:
    1b3c:	6893      	ldr	r3, [r2, #8]
    1b3e:	b510      	push	{r4, lr}
    1b40:	3b01      	subs	r3, #1
    1b42:	6093      	str	r3, [r2, #8]
    1b44:	2b00      	cmp	r3, #0
    1b46:	db06      	blt.n	1b56 <__sfputc_r+0x1a>
    1b48:	6813      	ldr	r3, [r2, #0]
    1b4a:	1c58      	adds	r0, r3, #1
    1b4c:	6010      	str	r0, [r2, #0]
    1b4e:	20ff      	movs	r0, #255	; 0xff
    1b50:	7019      	strb	r1, [r3, #0]
    1b52:	4008      	ands	r0, r1
    1b54:	bd10      	pop	{r4, pc}
    1b56:	6994      	ldr	r4, [r2, #24]
    1b58:	42a3      	cmp	r3, r4
    1b5a:	db02      	blt.n	1b62 <__sfputc_r+0x26>
    1b5c:	b2cb      	uxtb	r3, r1
    1b5e:	2b0a      	cmp	r3, #10
    1b60:	d1f2      	bne.n	1b48 <__sfputc_r+0xc>
    1b62:	f000 f983 	bl	1e6c <__swbuf_r>
    1b66:	e7f5      	b.n	1b54 <__sfputc_r+0x18>

00001b68 <__sfputs_r>:
    1b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b6a:	464f      	mov	r7, r9
    1b6c:	4646      	mov	r6, r8
    1b6e:	b4c0      	push	{r6, r7}
    1b70:	4681      	mov	r9, r0
    1b72:	4688      	mov	r8, r1
    1b74:	1c17      	adds	r7, r2, #0
    1b76:	1c1e      	adds	r6, r3, #0
    1b78:	2500      	movs	r5, #0
    1b7a:	2400      	movs	r4, #0
    1b7c:	2b00      	cmp	r3, #0
    1b7e:	d104      	bne.n	1b8a <__sfputs_r+0x22>
    1b80:	e00e      	b.n	1ba0 <__sfputs_r+0x38>
    1b82:	3401      	adds	r4, #1
    1b84:	1e25      	subs	r5, r4, #0
    1b86:	42b5      	cmp	r5, r6
    1b88:	d00a      	beq.n	1ba0 <__sfputs_r+0x38>
    1b8a:	5d79      	ldrb	r1, [r7, r5]
    1b8c:	4648      	mov	r0, r9
    1b8e:	4642      	mov	r2, r8
    1b90:	f7ff ffd4 	bl	1b3c <__sfputc_r>
    1b94:	1c43      	adds	r3, r0, #1
    1b96:	d1f4      	bne.n	1b82 <__sfputs_r+0x1a>
    1b98:	bc0c      	pop	{r2, r3}
    1b9a:	4690      	mov	r8, r2
    1b9c:	4699      	mov	r9, r3
    1b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ba0:	2000      	movs	r0, #0
    1ba2:	e7f9      	b.n	1b98 <__sfputs_r+0x30>

00001ba4 <__sprint_r>:
    1ba4:	6893      	ldr	r3, [r2, #8]
    1ba6:	b510      	push	{r4, lr}
    1ba8:	1c14      	adds	r4, r2, #0
    1baa:	2b00      	cmp	r3, #0
    1bac:	d102      	bne.n	1bb4 <__sprint_r+0x10>
    1bae:	6053      	str	r3, [r2, #4]
    1bb0:	2000      	movs	r0, #0
    1bb2:	bd10      	pop	{r4, pc}
    1bb4:	f000 fc5a 	bl	246c <__sfvwrite_r>
    1bb8:	2300      	movs	r3, #0
    1bba:	60a3      	str	r3, [r4, #8]
    1bbc:	6063      	str	r3, [r4, #4]
    1bbe:	e7f8      	b.n	1bb2 <__sprint_r+0xe>

00001bc0 <_vfiprintf_r>:
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc2:	465f      	mov	r7, fp
    1bc4:	4656      	mov	r6, sl
    1bc6:	464d      	mov	r5, r9
    1bc8:	4644      	mov	r4, r8
    1bca:	b4f0      	push	{r4, r5, r6, r7}
    1bcc:	b09f      	sub	sp, #124	; 0x7c
    1bce:	9004      	str	r0, [sp, #16]
    1bd0:	468b      	mov	fp, r1
    1bd2:	1c17      	adds	r7, r2, #0
    1bd4:	9305      	str	r3, [sp, #20]
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d003      	beq.n	1be2 <_vfiprintf_r+0x22>
    1bda:	6982      	ldr	r2, [r0, #24]
    1bdc:	2a00      	cmp	r2, #0
    1bde:	d100      	bne.n	1be2 <_vfiprintf_r+0x22>
    1be0:	e109      	b.n	1df6 <_vfiprintf_r+0x236>
    1be2:	4b93      	ldr	r3, [pc, #588]	; (1e30 <_vfiprintf_r+0x270>)
    1be4:	459b      	cmp	fp, r3
    1be6:	d100      	bne.n	1bea <_vfiprintf_r+0x2a>
    1be8:	e10b      	b.n	1e02 <_vfiprintf_r+0x242>
    1bea:	4b92      	ldr	r3, [pc, #584]	; (1e34 <_vfiprintf_r+0x274>)
    1bec:	459b      	cmp	fp, r3
    1bee:	d100      	bne.n	1bf2 <_vfiprintf_r+0x32>
    1bf0:	e10b      	b.n	1e0a <_vfiprintf_r+0x24a>
    1bf2:	4b91      	ldr	r3, [pc, #580]	; (1e38 <_vfiprintf_r+0x278>)
    1bf4:	459b      	cmp	fp, r3
    1bf6:	d100      	bne.n	1bfa <_vfiprintf_r+0x3a>
    1bf8:	e10b      	b.n	1e12 <_vfiprintf_r+0x252>
    1bfa:	4659      	mov	r1, fp
    1bfc:	898b      	ldrh	r3, [r1, #12]
    1bfe:	071a      	lsls	r2, r3, #28
    1c00:	d400      	bmi.n	1c04 <_vfiprintf_r+0x44>
    1c02:	e0ec      	b.n	1dde <_vfiprintf_r+0x21e>
    1c04:	690b      	ldr	r3, [r1, #16]
    1c06:	2b00      	cmp	r3, #0
    1c08:	d100      	bne.n	1c0c <_vfiprintf_r+0x4c>
    1c0a:	e0e8      	b.n	1dde <_vfiprintf_r+0x21e>
    1c0c:	ad06      	add	r5, sp, #24
    1c0e:	2300      	movs	r3, #0
    1c10:	616b      	str	r3, [r5, #20]
    1c12:	498a      	ldr	r1, [pc, #552]	; (1e3c <_vfiprintf_r+0x27c>)
    1c14:	2320      	movs	r3, #32
    1c16:	766b      	strb	r3, [r5, #25]
    1c18:	4e89      	ldr	r6, [pc, #548]	; (1e40 <_vfiprintf_r+0x280>)
    1c1a:	2330      	movs	r3, #48	; 0x30
    1c1c:	76ab      	strb	r3, [r5, #26]
    1c1e:	4689      	mov	r9, r1
    1c20:	783b      	ldrb	r3, [r7, #0]
    1c22:	1c3c      	adds	r4, r7, #0
    1c24:	2b00      	cmp	r3, #0
    1c26:	d00d      	beq.n	1c44 <_vfiprintf_r+0x84>
    1c28:	2b25      	cmp	r3, #37	; 0x25
    1c2a:	d102      	bne.n	1c32 <_vfiprintf_r+0x72>
    1c2c:	e00a      	b.n	1c44 <_vfiprintf_r+0x84>
    1c2e:	2b25      	cmp	r3, #37	; 0x25
    1c30:	d070      	beq.n	1d14 <_vfiprintf_r+0x154>
    1c32:	3401      	adds	r4, #1
    1c34:	7823      	ldrb	r3, [r4, #0]
    1c36:	2b00      	cmp	r3, #0
    1c38:	d1f9      	bne.n	1c2e <_vfiprintf_r+0x6e>
    1c3a:	1be2      	subs	r2, r4, r7
    1c3c:	4690      	mov	r8, r2
    1c3e:	4641      	mov	r1, r8
    1c40:	2900      	cmp	r1, #0
    1c42:	d16c      	bne.n	1d1e <_vfiprintf_r+0x15e>
    1c44:	7823      	ldrb	r3, [r4, #0]
    1c46:	2b00      	cmp	r3, #0
    1c48:	d078      	beq.n	1d3c <_vfiprintf_r+0x17c>
    1c4a:	2201      	movs	r2, #1
    1c4c:	4252      	negs	r2, r2
    1c4e:	2300      	movs	r3, #0
    1c50:	606a      	str	r2, [r5, #4]
    1c52:	2243      	movs	r2, #67	; 0x43
    1c54:	3401      	adds	r4, #1
    1c56:	602b      	str	r3, [r5, #0]
    1c58:	60eb      	str	r3, [r5, #12]
    1c5a:	60ab      	str	r3, [r5, #8]
    1c5c:	54ab      	strb	r3, [r5, r2]
    1c5e:	65ab      	str	r3, [r5, #88]	; 0x58
    1c60:	2701      	movs	r7, #1
    1c62:	e007      	b.n	1c74 <_vfiprintf_r+0xb4>
    1c64:	1b80      	subs	r0, r0, r6
    1c66:	1c3b      	adds	r3, r7, #0
    1c68:	6829      	ldr	r1, [r5, #0]
    1c6a:	4083      	lsls	r3, r0
    1c6c:	1c18      	adds	r0, r3, #0
    1c6e:	4308      	orrs	r0, r1
    1c70:	6028      	str	r0, [r5, #0]
    1c72:	3401      	adds	r4, #1
    1c74:	7821      	ldrb	r1, [r4, #0]
    1c76:	1c30      	adds	r0, r6, #0
    1c78:	2205      	movs	r2, #5
    1c7a:	f000 fe31 	bl	28e0 <memchr>
    1c7e:	2800      	cmp	r0, #0
    1c80:	d1f0      	bne.n	1c64 <_vfiprintf_r+0xa4>
    1c82:	682b      	ldr	r3, [r5, #0]
    1c84:	1c22      	adds	r2, r4, #0
    1c86:	06d9      	lsls	r1, r3, #27
    1c88:	d502      	bpl.n	1c90 <_vfiprintf_r+0xd0>
    1c8a:	2020      	movs	r0, #32
    1c8c:	2143      	movs	r1, #67	; 0x43
    1c8e:	5468      	strb	r0, [r5, r1]
    1c90:	0719      	lsls	r1, r3, #28
    1c92:	d502      	bpl.n	1c9a <_vfiprintf_r+0xda>
    1c94:	202b      	movs	r0, #43	; 0x2b
    1c96:	2143      	movs	r1, #67	; 0x43
    1c98:	5468      	strb	r0, [r5, r1]
    1c9a:	7821      	ldrb	r1, [r4, #0]
    1c9c:	292a      	cmp	r1, #42	; 0x2a
    1c9e:	d100      	bne.n	1ca2 <_vfiprintf_r+0xe2>
    1ca0:	e06f      	b.n	1d82 <_vfiprintf_r+0x1c2>
    1ca2:	1c0b      	adds	r3, r1, #0
    1ca4:	3b30      	subs	r3, #48	; 0x30
    1ca6:	2b09      	cmp	r3, #9
    1ca8:	d80b      	bhi.n	1cc2 <_vfiprintf_r+0x102>
    1caa:	68ea      	ldr	r2, [r5, #12]
    1cac:	0091      	lsls	r1, r2, #2
    1cae:	3401      	adds	r4, #1
    1cb0:	188a      	adds	r2, r1, r2
    1cb2:	7821      	ldrb	r1, [r4, #0]
    1cb4:	0052      	lsls	r2, r2, #1
    1cb6:	189a      	adds	r2, r3, r2
    1cb8:	1c0b      	adds	r3, r1, #0
    1cba:	3b30      	subs	r3, #48	; 0x30
    1cbc:	2b09      	cmp	r3, #9
    1cbe:	d9f5      	bls.n	1cac <_vfiprintf_r+0xec>
    1cc0:	60ea      	str	r2, [r5, #12]
    1cc2:	292e      	cmp	r1, #46	; 0x2e
    1cc4:	d046      	beq.n	1d54 <_vfiprintf_r+0x194>
    1cc6:	4648      	mov	r0, r9
    1cc8:	2203      	movs	r2, #3
    1cca:	f000 fe09 	bl	28e0 <memchr>
    1cce:	2800      	cmp	r0, #0
    1cd0:	d008      	beq.n	1ce4 <_vfiprintf_r+0x124>
    1cd2:	464a      	mov	r2, r9
    1cd4:	1a80      	subs	r0, r0, r2
    1cd6:	2340      	movs	r3, #64	; 0x40
    1cd8:	4083      	lsls	r3, r0
    1cda:	1c18      	adds	r0, r3, #0
    1cdc:	682b      	ldr	r3, [r5, #0]
    1cde:	3401      	adds	r4, #1
    1ce0:	4318      	orrs	r0, r3
    1ce2:	6028      	str	r0, [r5, #0]
    1ce4:	7821      	ldrb	r1, [r4, #0]
    1ce6:	4857      	ldr	r0, [pc, #348]	; (1e44 <_vfiprintf_r+0x284>)
    1ce8:	2206      	movs	r2, #6
    1cea:	1c67      	adds	r7, r4, #1
    1cec:	7629      	strb	r1, [r5, #24]
    1cee:	f000 fdf7 	bl	28e0 <memchr>
    1cf2:	2800      	cmp	r0, #0
    1cf4:	d060      	beq.n	1db8 <_vfiprintf_r+0x1f8>
    1cf6:	4b54      	ldr	r3, [pc, #336]	; (1e48 <_vfiprintf_r+0x288>)
    1cf8:	2b00      	cmp	r3, #0
    1cfa:	d000      	beq.n	1cfe <_vfiprintf_r+0x13e>
    1cfc:	e08d      	b.n	1e1a <_vfiprintf_r+0x25a>
    1cfe:	9b05      	ldr	r3, [sp, #20]
    1d00:	2207      	movs	r2, #7
    1d02:	3307      	adds	r3, #7
    1d04:	4393      	bics	r3, r2
    1d06:	3308      	adds	r3, #8
    1d08:	9305      	str	r3, [sp, #20]
    1d0a:	696a      	ldr	r2, [r5, #20]
    1d0c:	1c13      	adds	r3, r2, #0
    1d0e:	4453      	add	r3, sl
    1d10:	616b      	str	r3, [r5, #20]
    1d12:	e785      	b.n	1c20 <_vfiprintf_r+0x60>
    1d14:	1be3      	subs	r3, r4, r7
    1d16:	4698      	mov	r8, r3
    1d18:	4641      	mov	r1, r8
    1d1a:	2900      	cmp	r1, #0
    1d1c:	d092      	beq.n	1c44 <_vfiprintf_r+0x84>
    1d1e:	9804      	ldr	r0, [sp, #16]
    1d20:	4659      	mov	r1, fp
    1d22:	1c3a      	adds	r2, r7, #0
    1d24:	4643      	mov	r3, r8
    1d26:	f7ff ff1f 	bl	1b68 <__sfputs_r>
    1d2a:	3001      	adds	r0, #1
    1d2c:	d006      	beq.n	1d3c <_vfiprintf_r+0x17c>
    1d2e:	696a      	ldr	r2, [r5, #20]
    1d30:	1c13      	adds	r3, r2, #0
    1d32:	4443      	add	r3, r8
    1d34:	616b      	str	r3, [r5, #20]
    1d36:	7823      	ldrb	r3, [r4, #0]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d186      	bne.n	1c4a <_vfiprintf_r+0x8a>
    1d3c:	4659      	mov	r1, fp
    1d3e:	898b      	ldrh	r3, [r1, #12]
    1d40:	065a      	lsls	r2, r3, #25
    1d42:	d449      	bmi.n	1dd8 <_vfiprintf_r+0x218>
    1d44:	6968      	ldr	r0, [r5, #20]
    1d46:	b01f      	add	sp, #124	; 0x7c
    1d48:	bc3c      	pop	{r2, r3, r4, r5}
    1d4a:	4690      	mov	r8, r2
    1d4c:	4699      	mov	r9, r3
    1d4e:	46a2      	mov	sl, r4
    1d50:	46ab      	mov	fp, r5
    1d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d54:	7861      	ldrb	r1, [r4, #1]
    1d56:	292a      	cmp	r1, #42	; 0x2a
    1d58:	d01d      	beq.n	1d96 <_vfiprintf_r+0x1d6>
    1d5a:	2300      	movs	r3, #0
    1d5c:	606b      	str	r3, [r5, #4]
    1d5e:	1c0b      	adds	r3, r1, #0
    1d60:	3b30      	subs	r3, #48	; 0x30
    1d62:	3401      	adds	r4, #1
    1d64:	2b09      	cmp	r3, #9
    1d66:	d8ae      	bhi.n	1cc6 <_vfiprintf_r+0x106>
    1d68:	2200      	movs	r2, #0
    1d6a:	0091      	lsls	r1, r2, #2
    1d6c:	3401      	adds	r4, #1
    1d6e:	188a      	adds	r2, r1, r2
    1d70:	7821      	ldrb	r1, [r4, #0]
    1d72:	0052      	lsls	r2, r2, #1
    1d74:	189a      	adds	r2, r3, r2
    1d76:	1c0b      	adds	r3, r1, #0
    1d78:	3b30      	subs	r3, #48	; 0x30
    1d7a:	2b09      	cmp	r3, #9
    1d7c:	d9f5      	bls.n	1d6a <_vfiprintf_r+0x1aa>
    1d7e:	606a      	str	r2, [r5, #4]
    1d80:	e7a1      	b.n	1cc6 <_vfiprintf_r+0x106>
    1d82:	9905      	ldr	r1, [sp, #20]
    1d84:	1d08      	adds	r0, r1, #4
    1d86:	6809      	ldr	r1, [r1, #0]
    1d88:	9005      	str	r0, [sp, #20]
    1d8a:	2900      	cmp	r1, #0
    1d8c:	db0e      	blt.n	1dac <_vfiprintf_r+0x1ec>
    1d8e:	60e9      	str	r1, [r5, #12]
    1d90:	3401      	adds	r4, #1
    1d92:	7851      	ldrb	r1, [r2, #1]
    1d94:	e795      	b.n	1cc2 <_vfiprintf_r+0x102>
    1d96:	9b05      	ldr	r3, [sp, #20]
    1d98:	1ca0      	adds	r0, r4, #2
    1d9a:	1d1a      	adds	r2, r3, #4
    1d9c:	681b      	ldr	r3, [r3, #0]
    1d9e:	9205      	str	r2, [sp, #20]
    1da0:	606b      	str	r3, [r5, #4]
    1da2:	2b00      	cmp	r3, #0
    1da4:	db23      	blt.n	1dee <_vfiprintf_r+0x22e>
    1da6:	78a1      	ldrb	r1, [r4, #2]
    1da8:	1c04      	adds	r4, r0, #0
    1daa:	e78c      	b.n	1cc6 <_vfiprintf_r+0x106>
    1dac:	4249      	negs	r1, r1
    1dae:	60e9      	str	r1, [r5, #12]
    1db0:	2102      	movs	r1, #2
    1db2:	430b      	orrs	r3, r1
    1db4:	602b      	str	r3, [r5, #0]
    1db6:	e7eb      	b.n	1d90 <_vfiprintf_r+0x1d0>
    1db8:	ab05      	add	r3, sp, #20
    1dba:	9300      	str	r3, [sp, #0]
    1dbc:	9804      	ldr	r0, [sp, #16]
    1dbe:	1c29      	adds	r1, r5, #0
    1dc0:	465a      	mov	r2, fp
    1dc2:	4b22      	ldr	r3, [pc, #136]	; (1e4c <_vfiprintf_r+0x28c>)
    1dc4:	f000 ffd6 	bl	2d74 <_printf_i>
    1dc8:	4682      	mov	sl, r0
    1dca:	4651      	mov	r1, sl
    1dcc:	3101      	adds	r1, #1
    1dce:	d19c      	bne.n	1d0a <_vfiprintf_r+0x14a>
    1dd0:	4659      	mov	r1, fp
    1dd2:	898b      	ldrh	r3, [r1, #12]
    1dd4:	065a      	lsls	r2, r3, #25
    1dd6:	d5b5      	bpl.n	1d44 <_vfiprintf_r+0x184>
    1dd8:	2001      	movs	r0, #1
    1dda:	4240      	negs	r0, r0
    1ddc:	e7b3      	b.n	1d46 <_vfiprintf_r+0x186>
    1dde:	9804      	ldr	r0, [sp, #16]
    1de0:	4659      	mov	r1, fp
    1de2:	f000 f8b5 	bl	1f50 <__swsetup_r>
    1de6:	2800      	cmp	r0, #0
    1de8:	d100      	bne.n	1dec <_vfiprintf_r+0x22c>
    1dea:	e70f      	b.n	1c0c <_vfiprintf_r+0x4c>
    1dec:	e7f4      	b.n	1dd8 <_vfiprintf_r+0x218>
    1dee:	2301      	movs	r3, #1
    1df0:	425b      	negs	r3, r3
    1df2:	606b      	str	r3, [r5, #4]
    1df4:	e7d7      	b.n	1da6 <_vfiprintf_r+0x1e6>
    1df6:	f000 fa47 	bl	2288 <__sinit>
    1dfa:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <_vfiprintf_r+0x270>)
    1dfc:	459b      	cmp	fp, r3
    1dfe:	d000      	beq.n	1e02 <_vfiprintf_r+0x242>
    1e00:	e6f3      	b.n	1bea <_vfiprintf_r+0x2a>
    1e02:	9904      	ldr	r1, [sp, #16]
    1e04:	684b      	ldr	r3, [r1, #4]
    1e06:	469b      	mov	fp, r3
    1e08:	e6f7      	b.n	1bfa <_vfiprintf_r+0x3a>
    1e0a:	9b04      	ldr	r3, [sp, #16]
    1e0c:	689a      	ldr	r2, [r3, #8]
    1e0e:	4693      	mov	fp, r2
    1e10:	e6f3      	b.n	1bfa <_vfiprintf_r+0x3a>
    1e12:	9a04      	ldr	r2, [sp, #16]
    1e14:	68d1      	ldr	r1, [r2, #12]
    1e16:	468b      	mov	fp, r1
    1e18:	e6ef      	b.n	1bfa <_vfiprintf_r+0x3a>
    1e1a:	ab05      	add	r3, sp, #20
    1e1c:	9300      	str	r3, [sp, #0]
    1e1e:	9804      	ldr	r0, [sp, #16]
    1e20:	1c29      	adds	r1, r5, #0
    1e22:	465a      	mov	r2, fp
    1e24:	4b09      	ldr	r3, [pc, #36]	; (1e4c <_vfiprintf_r+0x28c>)
    1e26:	e000      	b.n	1e2a <_vfiprintf_r+0x26a>
    1e28:	bf00      	nop
    1e2a:	4682      	mov	sl, r0
    1e2c:	e7cd      	b.n	1dca <_vfiprintf_r+0x20a>
    1e2e:	46c0      	nop			; (mov r8, r8)
    1e30:	000032dc 	.word	0x000032dc
    1e34:	000032bc 	.word	0x000032bc
    1e38:	0000329c 	.word	0x0000329c
    1e3c:	00003290 	.word	0x00003290
    1e40:	00003288 	.word	0x00003288
    1e44:	00003294 	.word	0x00003294
    1e48:	00000000 	.word	0x00000000
    1e4c:	00001b69 	.word	0x00001b69

00001e50 <vfiprintf>:
    1e50:	b538      	push	{r3, r4, r5, lr}
    1e52:	1c13      	adds	r3, r2, #0
    1e54:	4a04      	ldr	r2, [pc, #16]	; (1e68 <vfiprintf+0x18>)
    1e56:	1c05      	adds	r5, r0, #0
    1e58:	1c0c      	adds	r4, r1, #0
    1e5a:	6810      	ldr	r0, [r2, #0]
    1e5c:	1c29      	adds	r1, r5, #0
    1e5e:	1c22      	adds	r2, r4, #0
    1e60:	f7ff feae 	bl	1bc0 <_vfiprintf_r>
    1e64:	bd38      	pop	{r3, r4, r5, pc}
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	20000008 	.word	0x20000008

00001e6c <__swbuf_r>:
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	1c05      	adds	r5, r0, #0
    1e70:	1c0e      	adds	r6, r1, #0
    1e72:	1c14      	adds	r4, r2, #0
    1e74:	2800      	cmp	r0, #0
    1e76:	d002      	beq.n	1e7e <__swbuf_r+0x12>
    1e78:	6981      	ldr	r1, [r0, #24]
    1e7a:	2900      	cmp	r1, #0
    1e7c:	d047      	beq.n	1f0e <__swbuf_r+0xa2>
    1e7e:	4b2b      	ldr	r3, [pc, #172]	; (1f2c <__swbuf_r+0xc0>)
    1e80:	429c      	cmp	r4, r3
    1e82:	d049      	beq.n	1f18 <__swbuf_r+0xac>
    1e84:	4b2a      	ldr	r3, [pc, #168]	; (1f30 <__swbuf_r+0xc4>)
    1e86:	429c      	cmp	r4, r3
    1e88:	d048      	beq.n	1f1c <__swbuf_r+0xb0>
    1e8a:	4b2a      	ldr	r3, [pc, #168]	; (1f34 <__swbuf_r+0xc8>)
    1e8c:	429c      	cmp	r4, r3
    1e8e:	d047      	beq.n	1f20 <__swbuf_r+0xb4>
    1e90:	69a2      	ldr	r2, [r4, #24]
    1e92:	89a3      	ldrh	r3, [r4, #12]
    1e94:	60a2      	str	r2, [r4, #8]
    1e96:	0719      	lsls	r1, r3, #28
    1e98:	d522      	bpl.n	1ee0 <__swbuf_r+0x74>
    1e9a:	6922      	ldr	r2, [r4, #16]
    1e9c:	2a00      	cmp	r2, #0
    1e9e:	d01f      	beq.n	1ee0 <__swbuf_r+0x74>
    1ea0:	23ff      	movs	r3, #255	; 0xff
    1ea2:	401e      	ands	r6, r3
    1ea4:	6961      	ldr	r1, [r4, #20]
    1ea6:	6823      	ldr	r3, [r4, #0]
    1ea8:	1a9a      	subs	r2, r3, r2
    1eaa:	428a      	cmp	r2, r1
    1eac:	da26      	bge.n	1efc <__swbuf_r+0x90>
    1eae:	3201      	adds	r2, #1
    1eb0:	68a1      	ldr	r1, [r4, #8]
    1eb2:	3901      	subs	r1, #1
    1eb4:	60a1      	str	r1, [r4, #8]
    1eb6:	1c59      	adds	r1, r3, #1
    1eb8:	6021      	str	r1, [r4, #0]
    1eba:	701e      	strb	r6, [r3, #0]
    1ebc:	6963      	ldr	r3, [r4, #20]
    1ebe:	4293      	cmp	r3, r2
    1ec0:	d006      	beq.n	1ed0 <__swbuf_r+0x64>
    1ec2:	89a3      	ldrh	r3, [r4, #12]
    1ec4:	1c30      	adds	r0, r6, #0
    1ec6:	07d9      	lsls	r1, r3, #31
    1ec8:	d501      	bpl.n	1ece <__swbuf_r+0x62>
    1eca:	2e0a      	cmp	r6, #10
    1ecc:	d000      	beq.n	1ed0 <__swbuf_r+0x64>
    1ece:	bd70      	pop	{r4, r5, r6, pc}
    1ed0:	1c28      	adds	r0, r5, #0
    1ed2:	1c21      	adds	r1, r4, #0
    1ed4:	f000 f954 	bl	2180 <_fflush_r>
    1ed8:	2800      	cmp	r0, #0
    1eda:	d123      	bne.n	1f24 <__swbuf_r+0xb8>
    1edc:	1c30      	adds	r0, r6, #0
    1ede:	e7f6      	b.n	1ece <__swbuf_r+0x62>
    1ee0:	1c28      	adds	r0, r5, #0
    1ee2:	1c21      	adds	r1, r4, #0
    1ee4:	f000 f834 	bl	1f50 <__swsetup_r>
    1ee8:	2800      	cmp	r0, #0
    1eea:	d11b      	bne.n	1f24 <__swbuf_r+0xb8>
    1eec:	23ff      	movs	r3, #255	; 0xff
    1eee:	6922      	ldr	r2, [r4, #16]
    1ef0:	401e      	ands	r6, r3
    1ef2:	6961      	ldr	r1, [r4, #20]
    1ef4:	6823      	ldr	r3, [r4, #0]
    1ef6:	1a9a      	subs	r2, r3, r2
    1ef8:	428a      	cmp	r2, r1
    1efa:	dbd8      	blt.n	1eae <__swbuf_r+0x42>
    1efc:	1c28      	adds	r0, r5, #0
    1efe:	1c21      	adds	r1, r4, #0
    1f00:	f000 f93e 	bl	2180 <_fflush_r>
    1f04:	2800      	cmp	r0, #0
    1f06:	d10d      	bne.n	1f24 <__swbuf_r+0xb8>
    1f08:	6823      	ldr	r3, [r4, #0]
    1f0a:	2201      	movs	r2, #1
    1f0c:	e7d0      	b.n	1eb0 <__swbuf_r+0x44>
    1f0e:	f000 f9bb 	bl	2288 <__sinit>
    1f12:	4b06      	ldr	r3, [pc, #24]	; (1f2c <__swbuf_r+0xc0>)
    1f14:	429c      	cmp	r4, r3
    1f16:	d1b5      	bne.n	1e84 <__swbuf_r+0x18>
    1f18:	686c      	ldr	r4, [r5, #4]
    1f1a:	e7b9      	b.n	1e90 <__swbuf_r+0x24>
    1f1c:	68ac      	ldr	r4, [r5, #8]
    1f1e:	e7b7      	b.n	1e90 <__swbuf_r+0x24>
    1f20:	68ec      	ldr	r4, [r5, #12]
    1f22:	e7b5      	b.n	1e90 <__swbuf_r+0x24>
    1f24:	2001      	movs	r0, #1
    1f26:	4240      	negs	r0, r0
    1f28:	e7d1      	b.n	1ece <__swbuf_r+0x62>
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	000032dc 	.word	0x000032dc
    1f30:	000032bc 	.word	0x000032bc
    1f34:	0000329c 	.word	0x0000329c

00001f38 <__swbuf>:
    1f38:	b508      	push	{r3, lr}
    1f3a:	1c0a      	adds	r2, r1, #0
    1f3c:	4903      	ldr	r1, [pc, #12]	; (1f4c <__swbuf+0x14>)
    1f3e:	1c03      	adds	r3, r0, #0
    1f40:	6808      	ldr	r0, [r1, #0]
    1f42:	1c19      	adds	r1, r3, #0
    1f44:	f7ff ff92 	bl	1e6c <__swbuf_r>
    1f48:	bd08      	pop	{r3, pc}
    1f4a:	46c0      	nop			; (mov r8, r8)
    1f4c:	20000008 	.word	0x20000008

00001f50 <__swsetup_r>:
    1f50:	4b3b      	ldr	r3, [pc, #236]	; (2040 <STACK_SIZE+0x40>)
    1f52:	b570      	push	{r4, r5, r6, lr}
    1f54:	681d      	ldr	r5, [r3, #0]
    1f56:	1c06      	adds	r6, r0, #0
    1f58:	1c0c      	adds	r4, r1, #0
    1f5a:	2d00      	cmp	r5, #0
    1f5c:	d002      	beq.n	1f64 <__swsetup_r+0x14>
    1f5e:	69a8      	ldr	r0, [r5, #24]
    1f60:	2800      	cmp	r0, #0
    1f62:	d044      	beq.n	1fee <__swsetup_r+0x9e>
    1f64:	4b37      	ldr	r3, [pc, #220]	; (2044 <STACK_SIZE+0x44>)
    1f66:	429c      	cmp	r4, r3
    1f68:	d047      	beq.n	1ffa <__swsetup_r+0xaa>
    1f6a:	4b37      	ldr	r3, [pc, #220]	; (2048 <STACK_SIZE+0x48>)
    1f6c:	429c      	cmp	r4, r3
    1f6e:	d05a      	beq.n	2026 <STACK_SIZE+0x26>
    1f70:	4b36      	ldr	r3, [pc, #216]	; (204c <STACK_SIZE+0x4c>)
    1f72:	429c      	cmp	r4, r3
    1f74:	d059      	beq.n	202a <STACK_SIZE+0x2a>
    1f76:	89a5      	ldrh	r5, [r4, #12]
    1f78:	b2ab      	uxth	r3, r5
    1f7a:	0719      	lsls	r1, r3, #28
    1f7c:	d50d      	bpl.n	1f9a <__swsetup_r+0x4a>
    1f7e:	6922      	ldr	r2, [r4, #16]
    1f80:	2a00      	cmp	r2, #0
    1f82:	d015      	beq.n	1fb0 <__swsetup_r+0x60>
    1f84:	07d9      	lsls	r1, r3, #31
    1f86:	d521      	bpl.n	1fcc <__swsetup_r+0x7c>
    1f88:	6960      	ldr	r0, [r4, #20]
    1f8a:	2300      	movs	r3, #0
    1f8c:	60a3      	str	r3, [r4, #8]
    1f8e:	4243      	negs	r3, r0
    1f90:	61a3      	str	r3, [r4, #24]
    1f92:	2000      	movs	r0, #0
    1f94:	2a00      	cmp	r2, #0
    1f96:	d021      	beq.n	1fdc <__swsetup_r+0x8c>
    1f98:	bd70      	pop	{r4, r5, r6, pc}
    1f9a:	06da      	lsls	r2, r3, #27
    1f9c:	d547      	bpl.n	202e <STACK_SIZE+0x2e>
    1f9e:	0758      	lsls	r0, r3, #29
    1fa0:	d42d      	bmi.n	1ffe <__swsetup_r+0xae>
    1fa2:	6922      	ldr	r2, [r4, #16]
    1fa4:	2308      	movs	r3, #8
    1fa6:	431d      	orrs	r5, r3
    1fa8:	81a5      	strh	r5, [r4, #12]
    1faa:	b2ab      	uxth	r3, r5
    1fac:	2a00      	cmp	r2, #0
    1fae:	d1e9      	bne.n	1f84 <__swsetup_r+0x34>
    1fb0:	20a0      	movs	r0, #160	; 0xa0
    1fb2:	0080      	lsls	r0, r0, #2
    1fb4:	2180      	movs	r1, #128	; 0x80
    1fb6:	4018      	ands	r0, r3
    1fb8:	0089      	lsls	r1, r1, #2
    1fba:	4288      	cmp	r0, r1
    1fbc:	d0e2      	beq.n	1f84 <__swsetup_r+0x34>
    1fbe:	1c30      	adds	r0, r6, #0
    1fc0:	1c21      	adds	r1, r4, #0
    1fc2:	f000 fc27 	bl	2814 <__smakebuf_r>
    1fc6:	89a3      	ldrh	r3, [r4, #12]
    1fc8:	6922      	ldr	r2, [r4, #16]
    1fca:	e7db      	b.n	1f84 <__swsetup_r+0x34>
    1fcc:	2100      	movs	r1, #0
    1fce:	0798      	lsls	r0, r3, #30
    1fd0:	d400      	bmi.n	1fd4 <__swsetup_r+0x84>
    1fd2:	6961      	ldr	r1, [r4, #20]
    1fd4:	60a1      	str	r1, [r4, #8]
    1fd6:	2000      	movs	r0, #0
    1fd8:	2a00      	cmp	r2, #0
    1fda:	d1dd      	bne.n	1f98 <__swsetup_r+0x48>
    1fdc:	89a3      	ldrh	r3, [r4, #12]
    1fde:	0619      	lsls	r1, r3, #24
    1fe0:	d5da      	bpl.n	1f98 <__swsetup_r+0x48>
    1fe2:	2240      	movs	r2, #64	; 0x40
    1fe4:	4313      	orrs	r3, r2
    1fe6:	2001      	movs	r0, #1
    1fe8:	81a3      	strh	r3, [r4, #12]
    1fea:	4240      	negs	r0, r0
    1fec:	e7d4      	b.n	1f98 <__swsetup_r+0x48>
    1fee:	1c28      	adds	r0, r5, #0
    1ff0:	f000 f94a 	bl	2288 <__sinit>
    1ff4:	4b13      	ldr	r3, [pc, #76]	; (2044 <STACK_SIZE+0x44>)
    1ff6:	429c      	cmp	r4, r3
    1ff8:	d1b7      	bne.n	1f6a <__swsetup_r+0x1a>
    1ffa:	686c      	ldr	r4, [r5, #4]
    1ffc:	e7bb      	b.n	1f76 <__swsetup_r+0x26>
    1ffe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2000:	2900      	cmp	r1, #0
    2002:	d009      	beq.n	2018 <STACK_SIZE+0x18>
    2004:	1c23      	adds	r3, r4, #0
    2006:	3344      	adds	r3, #68	; 0x44
    2008:	4299      	cmp	r1, r3
    200a:	d003      	beq.n	2014 <STACK_SIZE+0x14>
    200c:	1c30      	adds	r0, r6, #0
    200e:	f000 fcfb 	bl	2a08 <_free_r>
    2012:	89a5      	ldrh	r5, [r4, #12]
    2014:	2300      	movs	r3, #0
    2016:	6363      	str	r3, [r4, #52]	; 0x34
    2018:	2324      	movs	r3, #36	; 0x24
    201a:	6922      	ldr	r2, [r4, #16]
    201c:	439d      	bics	r5, r3
    201e:	2300      	movs	r3, #0
    2020:	6063      	str	r3, [r4, #4]
    2022:	6022      	str	r2, [r4, #0]
    2024:	e7be      	b.n	1fa4 <__swsetup_r+0x54>
    2026:	68ac      	ldr	r4, [r5, #8]
    2028:	e7a5      	b.n	1f76 <__swsetup_r+0x26>
    202a:	68ec      	ldr	r4, [r5, #12]
    202c:	e7a3      	b.n	1f76 <__swsetup_r+0x26>
    202e:	2309      	movs	r3, #9
    2030:	6033      	str	r3, [r6, #0]
    2032:	2340      	movs	r3, #64	; 0x40
    2034:	431d      	orrs	r5, r3
    2036:	2001      	movs	r0, #1
    2038:	81a5      	strh	r5, [r4, #12]
    203a:	4240      	negs	r0, r0
    203c:	e7ac      	b.n	1f98 <__swsetup_r+0x48>
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	20000008 	.word	0x20000008
    2044:	000032dc 	.word	0x000032dc
    2048:	000032bc 	.word	0x000032bc
    204c:	0000329c 	.word	0x0000329c

00002050 <__sflush_r>:
    2050:	b5f0      	push	{r4, r5, r6, r7, lr}
    2052:	4647      	mov	r7, r8
    2054:	b480      	push	{r7}
    2056:	898b      	ldrh	r3, [r1, #12]
    2058:	4680      	mov	r8, r0
    205a:	1c0d      	adds	r5, r1, #0
    205c:	0719      	lsls	r1, r3, #28
    205e:	d434      	bmi.n	20ca <__sflush_r+0x7a>
    2060:	686a      	ldr	r2, [r5, #4]
    2062:	2a00      	cmp	r2, #0
    2064:	dd52      	ble.n	210c <__sflush_r+0xbc>
    2066:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    2068:	2c00      	cmp	r4, #0
    206a:	d02a      	beq.n	20c2 <__sflush_r+0x72>
    206c:	4641      	mov	r1, r8
    206e:	2200      	movs	r2, #0
    2070:	680e      	ldr	r6, [r1, #0]
    2072:	600a      	str	r2, [r1, #0]
    2074:	04da      	lsls	r2, r3, #19
    2076:	d54d      	bpl.n	2114 <__sflush_r+0xc4>
    2078:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    207a:	075f      	lsls	r7, r3, #29
    207c:	d506      	bpl.n	208c <__sflush_r+0x3c>
    207e:	6869      	ldr	r1, [r5, #4]
    2080:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    2082:	1a52      	subs	r2, r2, r1
    2084:	2b00      	cmp	r3, #0
    2086:	d001      	beq.n	208c <__sflush_r+0x3c>
    2088:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    208a:	1bd2      	subs	r2, r2, r7
    208c:	6a29      	ldr	r1, [r5, #32]
    208e:	4640      	mov	r0, r8
    2090:	2300      	movs	r3, #0
    2092:	47a0      	blx	r4
    2094:	1c41      	adds	r1, r0, #1
    2096:	d048      	beq.n	212a <__sflush_r+0xda>
    2098:	2300      	movs	r3, #0
    209a:	606b      	str	r3, [r5, #4]
    209c:	6929      	ldr	r1, [r5, #16]
    209e:	89ab      	ldrh	r3, [r5, #12]
    20a0:	6029      	str	r1, [r5, #0]
    20a2:	04da      	lsls	r2, r3, #19
    20a4:	d44b      	bmi.n	213e <__sflush_r+0xee>
    20a6:	6b69      	ldr	r1, [r5, #52]	; 0x34
    20a8:	4643      	mov	r3, r8
    20aa:	601e      	str	r6, [r3, #0]
    20ac:	2900      	cmp	r1, #0
    20ae:	d008      	beq.n	20c2 <__sflush_r+0x72>
    20b0:	1c2b      	adds	r3, r5, #0
    20b2:	3344      	adds	r3, #68	; 0x44
    20b4:	4299      	cmp	r1, r3
    20b6:	d002      	beq.n	20be <__sflush_r+0x6e>
    20b8:	4640      	mov	r0, r8
    20ba:	f000 fca5 	bl	2a08 <_free_r>
    20be:	2300      	movs	r3, #0
    20c0:	636b      	str	r3, [r5, #52]	; 0x34
    20c2:	2000      	movs	r0, #0
    20c4:	bc04      	pop	{r2}
    20c6:	4690      	mov	r8, r2
    20c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ca:	692e      	ldr	r6, [r5, #16]
    20cc:	2e00      	cmp	r6, #0
    20ce:	d0f8      	beq.n	20c2 <__sflush_r+0x72>
    20d0:	682f      	ldr	r7, [r5, #0]
    20d2:	2200      	movs	r2, #0
    20d4:	1bbc      	subs	r4, r7, r6
    20d6:	602e      	str	r6, [r5, #0]
    20d8:	0799      	lsls	r1, r3, #30
    20da:	d100      	bne.n	20de <__sflush_r+0x8e>
    20dc:	696a      	ldr	r2, [r5, #20]
    20de:	60aa      	str	r2, [r5, #8]
    20e0:	2c00      	cmp	r4, #0
    20e2:	dc04      	bgt.n	20ee <__sflush_r+0x9e>
    20e4:	e7ed      	b.n	20c2 <__sflush_r+0x72>
    20e6:	1836      	adds	r6, r6, r0
    20e8:	1a24      	subs	r4, r4, r0
    20ea:	2c00      	cmp	r4, #0
    20ec:	dde9      	ble.n	20c2 <__sflush_r+0x72>
    20ee:	4640      	mov	r0, r8
    20f0:	6a29      	ldr	r1, [r5, #32]
    20f2:	1c32      	adds	r2, r6, #0
    20f4:	1c23      	adds	r3, r4, #0
    20f6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    20f8:	47b8      	blx	r7
    20fa:	2800      	cmp	r0, #0
    20fc:	dcf3      	bgt.n	20e6 <__sflush_r+0x96>
    20fe:	89aa      	ldrh	r2, [r5, #12]
    2100:	2340      	movs	r3, #64	; 0x40
    2102:	4313      	orrs	r3, r2
    2104:	2001      	movs	r0, #1
    2106:	81ab      	strh	r3, [r5, #12]
    2108:	4240      	negs	r0, r0
    210a:	e7db      	b.n	20c4 <__sflush_r+0x74>
    210c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    210e:	2f00      	cmp	r7, #0
    2110:	dca9      	bgt.n	2066 <__sflush_r+0x16>
    2112:	e7d6      	b.n	20c2 <__sflush_r+0x72>
    2114:	2200      	movs	r2, #0
    2116:	4640      	mov	r0, r8
    2118:	6a29      	ldr	r1, [r5, #32]
    211a:	2301      	movs	r3, #1
    211c:	47a0      	blx	r4
    211e:	1c02      	adds	r2, r0, #0
    2120:	1c43      	adds	r3, r0, #1
    2122:	d017      	beq.n	2154 <__sflush_r+0x104>
    2124:	89ab      	ldrh	r3, [r5, #12]
    2126:	6aec      	ldr	r4, [r5, #44]	; 0x2c
    2128:	e7a7      	b.n	207a <__sflush_r+0x2a>
    212a:	4642      	mov	r2, r8
    212c:	6813      	ldr	r3, [r2, #0]
    212e:	2b00      	cmp	r3, #0
    2130:	d107      	bne.n	2142 <__sflush_r+0xf2>
    2132:	606b      	str	r3, [r5, #4]
    2134:	692f      	ldr	r7, [r5, #16]
    2136:	89ab      	ldrh	r3, [r5, #12]
    2138:	602f      	str	r7, [r5, #0]
    213a:	04d9      	lsls	r1, r3, #19
    213c:	d5b3      	bpl.n	20a6 <__sflush_r+0x56>
    213e:	6568      	str	r0, [r5, #84]	; 0x54
    2140:	e7b1      	b.n	20a6 <__sflush_r+0x56>
    2142:	2b1d      	cmp	r3, #29
    2144:	d001      	beq.n	214a <__sflush_r+0xfa>
    2146:	2b16      	cmp	r3, #22
    2148:	d115      	bne.n	2176 <__sflush_r+0x126>
    214a:	2300      	movs	r3, #0
    214c:	606b      	str	r3, [r5, #4]
    214e:	692b      	ldr	r3, [r5, #16]
    2150:	602b      	str	r3, [r5, #0]
    2152:	e7a8      	b.n	20a6 <__sflush_r+0x56>
    2154:	4647      	mov	r7, r8
    2156:	683b      	ldr	r3, [r7, #0]
    2158:	2b00      	cmp	r3, #0
    215a:	d0e3      	beq.n	2124 <__sflush_r+0xd4>
    215c:	2b1d      	cmp	r3, #29
    215e:	d006      	beq.n	216e <__sflush_r+0x11e>
    2160:	2b16      	cmp	r3, #22
    2162:	d004      	beq.n	216e <__sflush_r+0x11e>
    2164:	89a9      	ldrh	r1, [r5, #12]
    2166:	2340      	movs	r3, #64	; 0x40
    2168:	430b      	orrs	r3, r1
    216a:	81ab      	strh	r3, [r5, #12]
    216c:	e7aa      	b.n	20c4 <__sflush_r+0x74>
    216e:	4641      	mov	r1, r8
    2170:	600e      	str	r6, [r1, #0]
    2172:	2000      	movs	r0, #0
    2174:	e7a6      	b.n	20c4 <__sflush_r+0x74>
    2176:	89aa      	ldrh	r2, [r5, #12]
    2178:	2340      	movs	r3, #64	; 0x40
    217a:	4313      	orrs	r3, r2
    217c:	81ab      	strh	r3, [r5, #12]
    217e:	e7a1      	b.n	20c4 <__sflush_r+0x74>

00002180 <_fflush_r>:
    2180:	690a      	ldr	r2, [r1, #16]
    2182:	b538      	push	{r3, r4, r5, lr}
    2184:	1c05      	adds	r5, r0, #0
    2186:	1c0c      	adds	r4, r1, #0
    2188:	2a00      	cmp	r2, #0
    218a:	d011      	beq.n	21b0 <_fflush_r+0x30>
    218c:	2800      	cmp	r0, #0
    218e:	d002      	beq.n	2196 <_fflush_r+0x16>
    2190:	6983      	ldr	r3, [r0, #24]
    2192:	2b00      	cmp	r3, #0
    2194:	d013      	beq.n	21be <_fflush_r+0x3e>
    2196:	4b0f      	ldr	r3, [pc, #60]	; (21d4 <_fflush_r+0x54>)
    2198:	429c      	cmp	r4, r3
    219a:	d015      	beq.n	21c8 <_fflush_r+0x48>
    219c:	4b0e      	ldr	r3, [pc, #56]	; (21d8 <_fflush_r+0x58>)
    219e:	429c      	cmp	r4, r3
    21a0:	d014      	beq.n	21cc <_fflush_r+0x4c>
    21a2:	4b0e      	ldr	r3, [pc, #56]	; (21dc <_fflush_r+0x5c>)
    21a4:	429c      	cmp	r4, r3
    21a6:	d013      	beq.n	21d0 <_fflush_r+0x50>
    21a8:	220c      	movs	r2, #12
    21aa:	5ea3      	ldrsh	r3, [r4, r2]
    21ac:	2b00      	cmp	r3, #0
    21ae:	d101      	bne.n	21b4 <_fflush_r+0x34>
    21b0:	2000      	movs	r0, #0
    21b2:	bd38      	pop	{r3, r4, r5, pc}
    21b4:	1c28      	adds	r0, r5, #0
    21b6:	1c21      	adds	r1, r4, #0
    21b8:	f7ff ff4a 	bl	2050 <__sflush_r>
    21bc:	e7f9      	b.n	21b2 <_fflush_r+0x32>
    21be:	f000 f863 	bl	2288 <__sinit>
    21c2:	4b04      	ldr	r3, [pc, #16]	; (21d4 <_fflush_r+0x54>)
    21c4:	429c      	cmp	r4, r3
    21c6:	d1e9      	bne.n	219c <_fflush_r+0x1c>
    21c8:	686c      	ldr	r4, [r5, #4]
    21ca:	e7ed      	b.n	21a8 <_fflush_r+0x28>
    21cc:	68ac      	ldr	r4, [r5, #8]
    21ce:	e7eb      	b.n	21a8 <_fflush_r+0x28>
    21d0:	68ec      	ldr	r4, [r5, #12]
    21d2:	e7e9      	b.n	21a8 <_fflush_r+0x28>
    21d4:	000032dc 	.word	0x000032dc
    21d8:	000032bc 	.word	0x000032bc
    21dc:	0000329c 	.word	0x0000329c

000021e0 <fflush>:
    21e0:	b508      	push	{r3, lr}
    21e2:	1e01      	subs	r1, r0, #0
    21e4:	d004      	beq.n	21f0 <fflush+0x10>
    21e6:	4b05      	ldr	r3, [pc, #20]	; (21fc <fflush+0x1c>)
    21e8:	6818      	ldr	r0, [r3, #0]
    21ea:	f7ff ffc9 	bl	2180 <_fflush_r>
    21ee:	bd08      	pop	{r3, pc}
    21f0:	4b03      	ldr	r3, [pc, #12]	; (2200 <fflush+0x20>)
    21f2:	4904      	ldr	r1, [pc, #16]	; (2204 <fflush+0x24>)
    21f4:	6818      	ldr	r0, [r3, #0]
    21f6:	f000 fae7 	bl	27c8 <_fwalk_reent>
    21fa:	e7f8      	b.n	21ee <fflush+0xe>
    21fc:	20000008 	.word	0x20000008
    2200:	00003280 	.word	0x00003280
    2204:	00002181 	.word	0x00002181

00002208 <__fp_lock>:
    2208:	2000      	movs	r0, #0
    220a:	4770      	bx	lr

0000220c <__fp_unlock>:
    220c:	2000      	movs	r0, #0
    220e:	4770      	bx	lr

00002210 <_cleanup_r>:
    2210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2212:	1c06      	adds	r6, r0, #0
    2214:	3648      	adds	r6, #72	; 0x48
    2216:	1c07      	adds	r7, r0, #0
    2218:	2e00      	cmp	r6, #0
    221a:	d014      	beq.n	2246 <_cleanup_r+0x36>
    221c:	6875      	ldr	r5, [r6, #4]
    221e:	68b4      	ldr	r4, [r6, #8]
    2220:	3d01      	subs	r5, #1
    2222:	d40d      	bmi.n	2240 <_cleanup_r+0x30>
    2224:	89a3      	ldrh	r3, [r4, #12]
    2226:	2b01      	cmp	r3, #1
    2228:	d907      	bls.n	223a <_cleanup_r+0x2a>
    222a:	220e      	movs	r2, #14
    222c:	5ea3      	ldrsh	r3, [r4, r2]
    222e:	3301      	adds	r3, #1
    2230:	d003      	beq.n	223a <_cleanup_r+0x2a>
    2232:	1c38      	adds	r0, r7, #0
    2234:	1c21      	adds	r1, r4, #0
    2236:	f7ff ffa3 	bl	2180 <_fflush_r>
    223a:	3468      	adds	r4, #104	; 0x68
    223c:	3d01      	subs	r5, #1
    223e:	d2f1      	bcs.n	2224 <_cleanup_r+0x14>
    2240:	6836      	ldr	r6, [r6, #0]
    2242:	2e00      	cmp	r6, #0
    2244:	d1ea      	bne.n	221c <_cleanup_r+0xc>
    2246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002248 <__sfmoreglue>:
    2248:	b570      	push	{r4, r5, r6, lr}
    224a:	1e4b      	subs	r3, r1, #1
    224c:	2568      	movs	r5, #104	; 0x68
    224e:	435d      	muls	r5, r3
    2250:	1c0e      	adds	r6, r1, #0
    2252:	1c29      	adds	r1, r5, #0
    2254:	3174      	adds	r1, #116	; 0x74
    2256:	f000 fc1f 	bl	2a98 <_malloc_r>
    225a:	1e04      	subs	r4, r0, #0
    225c:	d009      	beq.n	2272 <__sfmoreglue+0x2a>
    225e:	2300      	movs	r3, #0
    2260:	6003      	str	r3, [r0, #0]
    2262:	6046      	str	r6, [r0, #4]
    2264:	1c2a      	adds	r2, r5, #0
    2266:	300c      	adds	r0, #12
    2268:	60a0      	str	r0, [r4, #8]
    226a:	3268      	adds	r2, #104	; 0x68
    226c:	2100      	movs	r1, #0
    226e:	f7ff fab7 	bl	17e0 <memset>
    2272:	1c20      	adds	r0, r4, #0
    2274:	bd70      	pop	{r4, r5, r6, pc}
    2276:	46c0      	nop			; (mov r8, r8)

00002278 <_cleanup>:
    2278:	b508      	push	{r3, lr}
    227a:	4b02      	ldr	r3, [pc, #8]	; (2284 <_cleanup+0xc>)
    227c:	6818      	ldr	r0, [r3, #0]
    227e:	f7ff ffc7 	bl	2210 <_cleanup_r>
    2282:	bd08      	pop	{r3, pc}
    2284:	00003280 	.word	0x00003280

00002288 <__sinit>:
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	464d      	mov	r5, r9
    228c:	465f      	mov	r7, fp
    228e:	4656      	mov	r6, sl
    2290:	4644      	mov	r4, r8
    2292:	b4f0      	push	{r4, r5, r6, r7}
    2294:	6983      	ldr	r3, [r0, #24]
    2296:	b083      	sub	sp, #12
    2298:	1c05      	adds	r5, r0, #0
    229a:	2b00      	cmp	r3, #0
    229c:	d169      	bne.n	2372 <__sinit+0xea>
    229e:	6483      	str	r3, [r0, #72]	; 0x48
    22a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    22a2:	6503      	str	r3, [r0, #80]	; 0x50
    22a4:	4b38      	ldr	r3, [pc, #224]	; (2388 <__sinit+0x100>)
    22a6:	4a39      	ldr	r2, [pc, #228]	; (238c <__sinit+0x104>)
    22a8:	681b      	ldr	r3, [r3, #0]
    22aa:	6282      	str	r2, [r0, #40]	; 0x28
    22ac:	4298      	cmp	r0, r3
    22ae:	d067      	beq.n	2380 <__sinit+0xf8>
    22b0:	1c28      	adds	r0, r5, #0
    22b2:	f000 f875 	bl	23a0 <__sfp>
    22b6:	6068      	str	r0, [r5, #4]
    22b8:	1c28      	adds	r0, r5, #0
    22ba:	f000 f871 	bl	23a0 <__sfp>
    22be:	60a8      	str	r0, [r5, #8]
    22c0:	1c28      	adds	r0, r5, #0
    22c2:	f000 f86d 	bl	23a0 <__sfp>
    22c6:	686e      	ldr	r6, [r5, #4]
    22c8:	2400      	movs	r4, #0
    22ca:	60e8      	str	r0, [r5, #12]
    22cc:	2304      	movs	r3, #4
    22ce:	1c30      	adds	r0, r6, #0
    22d0:	81b3      	strh	r3, [r6, #12]
    22d2:	6034      	str	r4, [r6, #0]
    22d4:	6074      	str	r4, [r6, #4]
    22d6:	60b4      	str	r4, [r6, #8]
    22d8:	6674      	str	r4, [r6, #100]	; 0x64
    22da:	81f4      	strh	r4, [r6, #14]
    22dc:	6134      	str	r4, [r6, #16]
    22de:	6174      	str	r4, [r6, #20]
    22e0:	61b4      	str	r4, [r6, #24]
    22e2:	2100      	movs	r1, #0
    22e4:	2208      	movs	r2, #8
    22e6:	305c      	adds	r0, #92	; 0x5c
    22e8:	f7ff fa7a 	bl	17e0 <memset>
    22ec:	4b28      	ldr	r3, [pc, #160]	; (2390 <__sinit+0x108>)
    22ee:	4f29      	ldr	r7, [pc, #164]	; (2394 <__sinit+0x10c>)
    22f0:	469a      	mov	sl, r3
    22f2:	6273      	str	r3, [r6, #36]	; 0x24
    22f4:	4b28      	ldr	r3, [pc, #160]	; (2398 <__sinit+0x110>)
    22f6:	6236      	str	r6, [r6, #32]
    22f8:	4699      	mov	r9, r3
    22fa:	62b3      	str	r3, [r6, #40]	; 0x28
    22fc:	4b27      	ldr	r3, [pc, #156]	; (239c <__sinit+0x114>)
    22fe:	6337      	str	r7, [r6, #48]	; 0x30
    2300:	62f3      	str	r3, [r6, #44]	; 0x2c
    2302:	68ae      	ldr	r6, [r5, #8]
    2304:	4698      	mov	r8, r3
    2306:	2309      	movs	r3, #9
    2308:	81b3      	strh	r3, [r6, #12]
    230a:	1c30      	adds	r0, r6, #0
    230c:	2301      	movs	r3, #1
    230e:	81f3      	strh	r3, [r6, #14]
    2310:	6034      	str	r4, [r6, #0]
    2312:	6074      	str	r4, [r6, #4]
    2314:	60b4      	str	r4, [r6, #8]
    2316:	6674      	str	r4, [r6, #100]	; 0x64
    2318:	6134      	str	r4, [r6, #16]
    231a:	6174      	str	r4, [r6, #20]
    231c:	61b4      	str	r4, [r6, #24]
    231e:	2100      	movs	r1, #0
    2320:	2208      	movs	r2, #8
    2322:	305c      	adds	r0, #92	; 0x5c
    2324:	469b      	mov	fp, r3
    2326:	f7ff fa5b 	bl	17e0 <memset>
    232a:	4653      	mov	r3, sl
    232c:	6273      	str	r3, [r6, #36]	; 0x24
    232e:	464b      	mov	r3, r9
    2330:	62b3      	str	r3, [r6, #40]	; 0x28
    2332:	4643      	mov	r3, r8
    2334:	62f3      	str	r3, [r6, #44]	; 0x2c
    2336:	6236      	str	r6, [r6, #32]
    2338:	6337      	str	r7, [r6, #48]	; 0x30
    233a:	68ee      	ldr	r6, [r5, #12]
    233c:	2312      	movs	r3, #18
    233e:	81b3      	strh	r3, [r6, #12]
    2340:	1c30      	adds	r0, r6, #0
    2342:	2302      	movs	r3, #2
    2344:	81f3      	strh	r3, [r6, #14]
    2346:	6034      	str	r4, [r6, #0]
    2348:	6074      	str	r4, [r6, #4]
    234a:	60b4      	str	r4, [r6, #8]
    234c:	6674      	str	r4, [r6, #100]	; 0x64
    234e:	6134      	str	r4, [r6, #16]
    2350:	6174      	str	r4, [r6, #20]
    2352:	61b4      	str	r4, [r6, #24]
    2354:	305c      	adds	r0, #92	; 0x5c
    2356:	2100      	movs	r1, #0
    2358:	2208      	movs	r2, #8
    235a:	f7ff fa41 	bl	17e0 <memset>
    235e:	4653      	mov	r3, sl
    2360:	6273      	str	r3, [r6, #36]	; 0x24
    2362:	464b      	mov	r3, r9
    2364:	62b3      	str	r3, [r6, #40]	; 0x28
    2366:	4643      	mov	r3, r8
    2368:	62f3      	str	r3, [r6, #44]	; 0x2c
    236a:	465b      	mov	r3, fp
    236c:	6236      	str	r6, [r6, #32]
    236e:	6337      	str	r7, [r6, #48]	; 0x30
    2370:	61ab      	str	r3, [r5, #24]
    2372:	b003      	add	sp, #12
    2374:	bc3c      	pop	{r2, r3, r4, r5}
    2376:	4690      	mov	r8, r2
    2378:	4699      	mov	r9, r3
    237a:	46a2      	mov	sl, r4
    237c:	46ab      	mov	fp, r5
    237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2380:	2301      	movs	r3, #1
    2382:	6183      	str	r3, [r0, #24]
    2384:	e794      	b.n	22b0 <__sinit+0x28>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	00003280 	.word	0x00003280
    238c:	00002211 	.word	0x00002211
    2390:	00002bc9 	.word	0x00002bc9
    2394:	00002c59 	.word	0x00002c59
    2398:	00002bf5 	.word	0x00002bf5
    239c:	00002c2d 	.word	0x00002c2d

000023a0 <__sfp>:
    23a0:	4b21      	ldr	r3, [pc, #132]	; (2428 <__sfp+0x88>)
    23a2:	b570      	push	{r4, r5, r6, lr}
    23a4:	681d      	ldr	r5, [r3, #0]
    23a6:	1c06      	adds	r6, r0, #0
    23a8:	69a9      	ldr	r1, [r5, #24]
    23aa:	2900      	cmp	r1, #0
    23ac:	d02a      	beq.n	2404 <__sfp+0x64>
    23ae:	3548      	adds	r5, #72	; 0x48
    23b0:	686b      	ldr	r3, [r5, #4]
    23b2:	68ac      	ldr	r4, [r5, #8]
    23b4:	3b01      	subs	r3, #1
    23b6:	d503      	bpl.n	23c0 <__sfp+0x20>
    23b8:	e01f      	b.n	23fa <__sfp+0x5a>
    23ba:	3468      	adds	r4, #104	; 0x68
    23bc:	3b01      	subs	r3, #1
    23be:	d31c      	bcc.n	23fa <__sfp+0x5a>
    23c0:	210c      	movs	r1, #12
    23c2:	5e62      	ldrsh	r2, [r4, r1]
    23c4:	2a00      	cmp	r2, #0
    23c6:	d1f8      	bne.n	23ba <__sfp+0x1a>
    23c8:	2301      	movs	r3, #1
    23ca:	425b      	negs	r3, r3
    23cc:	2500      	movs	r5, #0
    23ce:	81e3      	strh	r3, [r4, #14]
    23d0:	1c20      	adds	r0, r4, #0
    23d2:	2301      	movs	r3, #1
    23d4:	81a3      	strh	r3, [r4, #12]
    23d6:	6665      	str	r5, [r4, #100]	; 0x64
    23d8:	6025      	str	r5, [r4, #0]
    23da:	60a5      	str	r5, [r4, #8]
    23dc:	6065      	str	r5, [r4, #4]
    23de:	6125      	str	r5, [r4, #16]
    23e0:	6165      	str	r5, [r4, #20]
    23e2:	61a5      	str	r5, [r4, #24]
    23e4:	305c      	adds	r0, #92	; 0x5c
    23e6:	2100      	movs	r1, #0
    23e8:	2208      	movs	r2, #8
    23ea:	f7ff f9f9 	bl	17e0 <memset>
    23ee:	6365      	str	r5, [r4, #52]	; 0x34
    23f0:	63a5      	str	r5, [r4, #56]	; 0x38
    23f2:	64a5      	str	r5, [r4, #72]	; 0x48
    23f4:	64e5      	str	r5, [r4, #76]	; 0x4c
    23f6:	1c20      	adds	r0, r4, #0
    23f8:	bd70      	pop	{r4, r5, r6, pc}
    23fa:	682b      	ldr	r3, [r5, #0]
    23fc:	2b00      	cmp	r3, #0
    23fe:	d005      	beq.n	240c <__sfp+0x6c>
    2400:	1c1d      	adds	r5, r3, #0
    2402:	e7d5      	b.n	23b0 <__sfp+0x10>
    2404:	1c28      	adds	r0, r5, #0
    2406:	f7ff ff3f 	bl	2288 <__sinit>
    240a:	e7d0      	b.n	23ae <__sfp+0xe>
    240c:	1c30      	adds	r0, r6, #0
    240e:	2104      	movs	r1, #4
    2410:	f7ff ff1a 	bl	2248 <__sfmoreglue>
    2414:	6028      	str	r0, [r5, #0]
    2416:	2800      	cmp	r0, #0
    2418:	d001      	beq.n	241e <__sfp+0x7e>
    241a:	1c05      	adds	r5, r0, #0
    241c:	e7c8      	b.n	23b0 <__sfp+0x10>
    241e:	230c      	movs	r3, #12
    2420:	6033      	str	r3, [r6, #0]
    2422:	2000      	movs	r0, #0
    2424:	e7e8      	b.n	23f8 <__sfp+0x58>
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	00003280 	.word	0x00003280

0000242c <__sfp_lock_acquire>:
    242c:	4770      	bx	lr
    242e:	46c0      	nop			; (mov r8, r8)

00002430 <__sfp_lock_release>:
    2430:	4770      	bx	lr
    2432:	46c0      	nop			; (mov r8, r8)

00002434 <__sinit_lock_acquire>:
    2434:	4770      	bx	lr
    2436:	46c0      	nop			; (mov r8, r8)

00002438 <__sinit_lock_release>:
    2438:	4770      	bx	lr
    243a:	46c0      	nop			; (mov r8, r8)

0000243c <__fp_lock_all>:
    243c:	b508      	push	{r3, lr}
    243e:	4b03      	ldr	r3, [pc, #12]	; (244c <__fp_lock_all+0x10>)
    2440:	4903      	ldr	r1, [pc, #12]	; (2450 <__fp_lock_all+0x14>)
    2442:	6818      	ldr	r0, [r3, #0]
    2444:	f000 f99e 	bl	2784 <_fwalk>
    2448:	bd08      	pop	{r3, pc}
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	20000008 	.word	0x20000008
    2450:	00002209 	.word	0x00002209

00002454 <__fp_unlock_all>:
    2454:	b508      	push	{r3, lr}
    2456:	4b03      	ldr	r3, [pc, #12]	; (2464 <__fp_unlock_all+0x10>)
    2458:	4903      	ldr	r1, [pc, #12]	; (2468 <__fp_unlock_all+0x14>)
    245a:	6818      	ldr	r0, [r3, #0]
    245c:	f000 f992 	bl	2784 <_fwalk>
    2460:	bd08      	pop	{r3, pc}
    2462:	46c0      	nop			; (mov r8, r8)
    2464:	20000008 	.word	0x20000008
    2468:	0000220d 	.word	0x0000220d

0000246c <__sfvwrite_r>:
    246c:	b5f0      	push	{r4, r5, r6, r7, lr}
    246e:	4656      	mov	r6, sl
    2470:	4644      	mov	r4, r8
    2472:	465f      	mov	r7, fp
    2474:	464d      	mov	r5, r9
    2476:	b4f0      	push	{r4, r5, r6, r7}
    2478:	b085      	sub	sp, #20
    247a:	9003      	str	r0, [sp, #12]
    247c:	6890      	ldr	r0, [r2, #8]
    247e:	1c0c      	adds	r4, r1, #0
    2480:	4692      	mov	sl, r2
    2482:	2800      	cmp	r0, #0
    2484:	d024      	beq.n	24d0 <__sfvwrite_r+0x64>
    2486:	898b      	ldrh	r3, [r1, #12]
    2488:	0719      	lsls	r1, r3, #28
    248a:	d529      	bpl.n	24e0 <__sfvwrite_r+0x74>
    248c:	6922      	ldr	r2, [r4, #16]
    248e:	2a00      	cmp	r2, #0
    2490:	d026      	beq.n	24e0 <__sfvwrite_r+0x74>
    2492:	4657      	mov	r7, sl
    2494:	683e      	ldr	r6, [r7, #0]
    2496:	46b3      	mov	fp, r6
    2498:	0798      	lsls	r0, r3, #30
    249a:	d52e      	bpl.n	24fa <__sfvwrite_r+0x8e>
    249c:	49b6      	ldr	r1, [pc, #728]	; (2778 <__sfvwrite_r+0x30c>)
    249e:	2600      	movs	r6, #0
    24a0:	2500      	movs	r5, #0
    24a2:	4688      	mov	r8, r1
    24a4:	2d00      	cmp	r5, #0
    24a6:	d065      	beq.n	2574 <__sfvwrite_r+0x108>
    24a8:	6a21      	ldr	r1, [r4, #32]
    24aa:	1e2b      	subs	r3, r5, #0
    24ac:	4543      	cmp	r3, r8
    24ae:	d900      	bls.n	24b2 <__sfvwrite_r+0x46>
    24b0:	4bb1      	ldr	r3, [pc, #708]	; (2778 <__sfvwrite_r+0x30c>)
    24b2:	9803      	ldr	r0, [sp, #12]
    24b4:	1c32      	adds	r2, r6, #0
    24b6:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    24b8:	47b8      	blx	r7
    24ba:	2800      	cmp	r0, #0
    24bc:	dc00      	bgt.n	24c0 <__sfvwrite_r+0x54>
    24be:	e080      	b.n	25c2 <__sfvwrite_r+0x156>
    24c0:	4651      	mov	r1, sl
    24c2:	6889      	ldr	r1, [r1, #8]
    24c4:	1836      	adds	r6, r6, r0
    24c6:	1a2d      	subs	r5, r5, r0
    24c8:	4652      	mov	r2, sl
    24ca:	1a08      	subs	r0, r1, r0
    24cc:	6090      	str	r0, [r2, #8]
    24ce:	d1e9      	bne.n	24a4 <__sfvwrite_r+0x38>
    24d0:	2000      	movs	r0, #0
    24d2:	b005      	add	sp, #20
    24d4:	bc3c      	pop	{r2, r3, r4, r5}
    24d6:	4690      	mov	r8, r2
    24d8:	4699      	mov	r9, r3
    24da:	46a2      	mov	sl, r4
    24dc:	46ab      	mov	fp, r5
    24de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24e0:	9803      	ldr	r0, [sp, #12]
    24e2:	1c21      	adds	r1, r4, #0
    24e4:	f7ff fd34 	bl	1f50 <__swsetup_r>
    24e8:	2800      	cmp	r0, #0
    24ea:	d000      	beq.n	24ee <__sfvwrite_r+0x82>
    24ec:	e13b      	b.n	2766 <__sfvwrite_r+0x2fa>
    24ee:	4657      	mov	r7, sl
    24f0:	683e      	ldr	r6, [r7, #0]
    24f2:	89a3      	ldrh	r3, [r4, #12]
    24f4:	46b3      	mov	fp, r6
    24f6:	0798      	lsls	r0, r3, #30
    24f8:	d4d0      	bmi.n	249c <__sfvwrite_r+0x30>
    24fa:	07de      	lsls	r6, r3, #31
    24fc:	d568      	bpl.n	25d0 <__sfvwrite_r+0x164>
    24fe:	2600      	movs	r6, #0
    2500:	2700      	movs	r7, #0
    2502:	9601      	str	r6, [sp, #4]
    2504:	46b1      	mov	r9, r6
    2506:	2500      	movs	r5, #0
    2508:	2d00      	cmp	r5, #0
    250a:	d02a      	beq.n	2562 <__sfvwrite_r+0xf6>
    250c:	9e01      	ldr	r6, [sp, #4]
    250e:	2e00      	cmp	r6, #0
    2510:	d100      	bne.n	2514 <__sfvwrite_r+0xa8>
    2512:	e0af      	b.n	2674 <__sfvwrite_r+0x208>
    2514:	46b8      	mov	r8, r7
    2516:	42af      	cmp	r7, r5
    2518:	d900      	bls.n	251c <__sfvwrite_r+0xb0>
    251a:	46a8      	mov	r8, r5
    251c:	6820      	ldr	r0, [r4, #0]
    251e:	6921      	ldr	r1, [r4, #16]
    2520:	4646      	mov	r6, r8
    2522:	68a2      	ldr	r2, [r4, #8]
    2524:	6963      	ldr	r3, [r4, #20]
    2526:	4288      	cmp	r0, r1
    2528:	d904      	bls.n	2534 <__sfvwrite_r+0xc8>
    252a:	18d2      	adds	r2, r2, r3
    252c:	9202      	str	r2, [sp, #8]
    252e:	4590      	cmp	r8, r2
    2530:	dd00      	ble.n	2534 <__sfvwrite_r+0xc8>
    2532:	e0f0      	b.n	2716 <__sfvwrite_r+0x2aa>
    2534:	4598      	cmp	r8, r3
    2536:	da00      	bge.n	253a <__sfvwrite_r+0xce>
    2538:	e080      	b.n	263c <__sfvwrite_r+0x1d0>
    253a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    253c:	9803      	ldr	r0, [sp, #12]
    253e:	6a21      	ldr	r1, [r4, #32]
    2540:	464a      	mov	r2, r9
    2542:	47b0      	blx	r6
    2544:	1e06      	subs	r6, r0, #0
    2546:	dd3c      	ble.n	25c2 <__sfvwrite_r+0x156>
    2548:	1bbf      	subs	r7, r7, r6
    254a:	d100      	bne.n	254e <__sfvwrite_r+0xe2>
    254c:	e085      	b.n	265a <__sfvwrite_r+0x1ee>
    254e:	4650      	mov	r0, sl
    2550:	6880      	ldr	r0, [r0, #8]
    2552:	44b1      	add	r9, r6
    2554:	1bad      	subs	r5, r5, r6
    2556:	4651      	mov	r1, sl
    2558:	1b86      	subs	r6, r0, r6
    255a:	608e      	str	r6, [r1, #8]
    255c:	d0b8      	beq.n	24d0 <__sfvwrite_r+0x64>
    255e:	2d00      	cmp	r5, #0
    2560:	d1d4      	bne.n	250c <__sfvwrite_r+0xa0>
    2562:	465b      	mov	r3, fp
    2564:	2608      	movs	r6, #8
    2566:	681a      	ldr	r2, [r3, #0]
    2568:	44b3      	add	fp, r6
    256a:	2600      	movs	r6, #0
    256c:	4691      	mov	r9, r2
    256e:	685d      	ldr	r5, [r3, #4]
    2570:	9601      	str	r6, [sp, #4]
    2572:	e7c9      	b.n	2508 <__sfvwrite_r+0x9c>
    2574:	465a      	mov	r2, fp
    2576:	2308      	movs	r3, #8
    2578:	6816      	ldr	r6, [r2, #0]
    257a:	6855      	ldr	r5, [r2, #4]
    257c:	449b      	add	fp, r3
    257e:	e791      	b.n	24a4 <__sfvwrite_r+0x38>
    2580:	6820      	ldr	r0, [r4, #0]
    2582:	6923      	ldr	r3, [r4, #16]
    2584:	4298      	cmp	r0, r3
    2586:	d804      	bhi.n	2592 <__sfvwrite_r+0x126>
    2588:	6966      	ldr	r6, [r4, #20]
    258a:	46b1      	mov	r9, r6
    258c:	42b5      	cmp	r5, r6
    258e:	d300      	bcc.n	2592 <__sfvwrite_r+0x126>
    2590:	e0ad      	b.n	26ee <__sfvwrite_r+0x282>
    2592:	46a9      	mov	r9, r5
    2594:	4545      	cmp	r5, r8
    2596:	d900      	bls.n	259a <__sfvwrite_r+0x12e>
    2598:	46c1      	mov	r9, r8
    259a:	9901      	ldr	r1, [sp, #4]
    259c:	464a      	mov	r2, r9
    259e:	f000 f9e1 	bl	2964 <memmove>
    25a2:	6826      	ldr	r6, [r4, #0]
    25a4:	68a0      	ldr	r0, [r4, #8]
    25a6:	4649      	mov	r1, r9
    25a8:	1c32      	adds	r2, r6, #0
    25aa:	1a43      	subs	r3, r0, r1
    25ac:	444a      	add	r2, r9
    25ae:	60a3      	str	r3, [r4, #8]
    25b0:	6022      	str	r2, [r4, #0]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d140      	bne.n	2638 <__sfvwrite_r+0x1cc>
    25b6:	9803      	ldr	r0, [sp, #12]
    25b8:	1c21      	adds	r1, r4, #0
    25ba:	f7ff fde1 	bl	2180 <_fflush_r>
    25be:	2800      	cmp	r0, #0
    25c0:	d03a      	beq.n	2638 <__sfvwrite_r+0x1cc>
    25c2:	89a2      	ldrh	r2, [r4, #12]
    25c4:	2340      	movs	r3, #64	; 0x40
    25c6:	4313      	orrs	r3, r2
    25c8:	2001      	movs	r0, #1
    25ca:	81a3      	strh	r3, [r4, #12]
    25cc:	4240      	negs	r0, r0
    25ce:	e780      	b.n	24d2 <__sfvwrite_r+0x66>
    25d0:	2600      	movs	r6, #0
    25d2:	2500      	movs	r5, #0
    25d4:	9601      	str	r6, [sp, #4]
    25d6:	465f      	mov	r7, fp
    25d8:	2d00      	cmp	r5, #0
    25da:	d028      	beq.n	262e <__sfvwrite_r+0x1c2>
    25dc:	68a0      	ldr	r0, [r4, #8]
    25de:	2180      	movs	r1, #128	; 0x80
    25e0:	0089      	lsls	r1, r1, #2
    25e2:	4680      	mov	r8, r0
    25e4:	420b      	tst	r3, r1
    25e6:	d0cb      	beq.n	2580 <__sfvwrite_r+0x114>
    25e8:	4285      	cmp	r5, r0
    25ea:	d33f      	bcc.n	266c <__sfvwrite_r+0x200>
    25ec:	2290      	movs	r2, #144	; 0x90
    25ee:	00d2      	lsls	r2, r2, #3
    25f0:	4213      	tst	r3, r2
    25f2:	d14c      	bne.n	268e <__sfvwrite_r+0x222>
    25f4:	6820      	ldr	r0, [r4, #0]
    25f6:	46c1      	mov	r9, r8
    25f8:	9901      	ldr	r1, [sp, #4]
    25fa:	464a      	mov	r2, r9
    25fc:	f000 f9b2 	bl	2964 <memmove>
    2600:	68a0      	ldr	r0, [r4, #8]
    2602:	6822      	ldr	r2, [r4, #0]
    2604:	4641      	mov	r1, r8
    2606:	1a43      	subs	r3, r0, r1
    2608:	60a3      	str	r3, [r4, #8]
    260a:	1c13      	adds	r3, r2, #0
    260c:	444b      	add	r3, r9
    260e:	6023      	str	r3, [r4, #0]
    2610:	1c2a      	adds	r2, r5, #0
    2612:	4650      	mov	r0, sl
    2614:	9e01      	ldr	r6, [sp, #4]
    2616:	6880      	ldr	r0, [r0, #8]
    2618:	18b6      	adds	r6, r6, r2
    261a:	1aad      	subs	r5, r5, r2
    261c:	4651      	mov	r1, sl
    261e:	1a82      	subs	r2, r0, r2
    2620:	9601      	str	r6, [sp, #4]
    2622:	608a      	str	r2, [r1, #8]
    2624:	d100      	bne.n	2628 <__sfvwrite_r+0x1bc>
    2626:	e753      	b.n	24d0 <__sfvwrite_r+0x64>
    2628:	89a3      	ldrh	r3, [r4, #12]
    262a:	2d00      	cmp	r5, #0
    262c:	d1d6      	bne.n	25dc <__sfvwrite_r+0x170>
    262e:	683e      	ldr	r6, [r7, #0]
    2630:	687d      	ldr	r5, [r7, #4]
    2632:	9601      	str	r6, [sp, #4]
    2634:	3708      	adds	r7, #8
    2636:	e7cf      	b.n	25d8 <__sfvwrite_r+0x16c>
    2638:	464a      	mov	r2, r9
    263a:	e7ea      	b.n	2612 <__sfvwrite_r+0x1a6>
    263c:	4649      	mov	r1, r9
    263e:	4642      	mov	r2, r8
    2640:	f000 f990 	bl	2964 <memmove>
    2644:	68a0      	ldr	r0, [r4, #8]
    2646:	6822      	ldr	r2, [r4, #0]
    2648:	4641      	mov	r1, r8
    264a:	1a43      	subs	r3, r0, r1
    264c:	60a3      	str	r3, [r4, #8]
    264e:	1c13      	adds	r3, r2, #0
    2650:	4443      	add	r3, r8
    2652:	6023      	str	r3, [r4, #0]
    2654:	1bbf      	subs	r7, r7, r6
    2656:	d000      	beq.n	265a <__sfvwrite_r+0x1ee>
    2658:	e779      	b.n	254e <__sfvwrite_r+0xe2>
    265a:	9803      	ldr	r0, [sp, #12]
    265c:	1c21      	adds	r1, r4, #0
    265e:	f7ff fd8f 	bl	2180 <_fflush_r>
    2662:	2800      	cmp	r0, #0
    2664:	d1ad      	bne.n	25c2 <__sfvwrite_r+0x156>
    2666:	2300      	movs	r3, #0
    2668:	9301      	str	r3, [sp, #4]
    266a:	e770      	b.n	254e <__sfvwrite_r+0xe2>
    266c:	46a8      	mov	r8, r5
    266e:	6820      	ldr	r0, [r4, #0]
    2670:	46a9      	mov	r9, r5
    2672:	e7c1      	b.n	25f8 <__sfvwrite_r+0x18c>
    2674:	4648      	mov	r0, r9
    2676:	210a      	movs	r1, #10
    2678:	1c2a      	adds	r2, r5, #0
    267a:	f000 f931 	bl	28e0 <memchr>
    267e:	2800      	cmp	r0, #0
    2680:	d06d      	beq.n	275e <__sfvwrite_r+0x2f2>
    2682:	1c47      	adds	r7, r0, #1
    2684:	2601      	movs	r6, #1
    2686:	4648      	mov	r0, r9
    2688:	1a3f      	subs	r7, r7, r0
    268a:	9601      	str	r6, [sp, #4]
    268c:	e742      	b.n	2514 <__sfvwrite_r+0xa8>
    268e:	6962      	ldr	r2, [r4, #20]
    2690:	6921      	ldr	r1, [r4, #16]
    2692:	0050      	lsls	r0, r2, #1
    2694:	1882      	adds	r2, r0, r2
    2696:	6826      	ldr	r6, [r4, #0]
    2698:	0fd0      	lsrs	r0, r2, #31
    269a:	1882      	adds	r2, r0, r2
    269c:	1a76      	subs	r6, r6, r1
    269e:	1052      	asrs	r2, r2, #1
    26a0:	4691      	mov	r9, r2
    26a2:	1c32      	adds	r2, r6, #0
    26a4:	3201      	adds	r2, #1
    26a6:	1952      	adds	r2, r2, r5
    26a8:	46b3      	mov	fp, r6
    26aa:	4591      	cmp	r9, r2
    26ac:	d243      	bcs.n	2736 <__sfvwrite_r+0x2ca>
    26ae:	4691      	mov	r9, r2
    26b0:	0558      	lsls	r0, r3, #21
    26b2:	d543      	bpl.n	273c <__sfvwrite_r+0x2d0>
    26b4:	9803      	ldr	r0, [sp, #12]
    26b6:	1c11      	adds	r1, r2, #0
    26b8:	f000 f9ee 	bl	2a98 <_malloc_r>
    26bc:	4680      	mov	r8, r0
    26be:	2800      	cmp	r0, #0
    26c0:	d054      	beq.n	276c <__sfvwrite_r+0x300>
    26c2:	465a      	mov	r2, fp
    26c4:	6921      	ldr	r1, [r4, #16]
    26c6:	f7ff f849 	bl	175c <memcpy>
    26ca:	89a2      	ldrh	r2, [r4, #12]
    26cc:	4b2b      	ldr	r3, [pc, #172]	; (277c <__sfvwrite_r+0x310>)
    26ce:	4013      	ands	r3, r2
    26d0:	2280      	movs	r2, #128	; 0x80
    26d2:	4313      	orrs	r3, r2
    26d4:	81a3      	strh	r3, [r4, #12]
    26d6:	4640      	mov	r0, r8
    26d8:	464a      	mov	r2, r9
    26da:	465e      	mov	r6, fp
    26dc:	6120      	str	r0, [r4, #16]
    26de:	1b93      	subs	r3, r2, r6
    26e0:	4458      	add	r0, fp
    26e2:	6020      	str	r0, [r4, #0]
    26e4:	6162      	str	r2, [r4, #20]
    26e6:	46a8      	mov	r8, r5
    26e8:	60a3      	str	r3, [r4, #8]
    26ea:	46a9      	mov	r9, r5
    26ec:	e784      	b.n	25f8 <__sfvwrite_r+0x18c>
    26ee:	4924      	ldr	r1, [pc, #144]	; (2780 <__sfvwrite_r+0x314>)
    26f0:	1e28      	subs	r0, r5, #0
    26f2:	4288      	cmp	r0, r1
    26f4:	d900      	bls.n	26f8 <__sfvwrite_r+0x28c>
    26f6:	1c08      	adds	r0, r1, #0
    26f8:	4649      	mov	r1, r9
    26fa:	f000 fcf5 	bl	30e8 <__aeabi_idiv>
    26fe:	464b      	mov	r3, r9
    2700:	4343      	muls	r3, r0
    2702:	6a21      	ldr	r1, [r4, #32]
    2704:	9803      	ldr	r0, [sp, #12]
    2706:	9a01      	ldr	r2, [sp, #4]
    2708:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    270a:	47b0      	blx	r6
    270c:	2800      	cmp	r0, #0
    270e:	dc00      	bgt.n	2712 <__sfvwrite_r+0x2a6>
    2710:	e757      	b.n	25c2 <__sfvwrite_r+0x156>
    2712:	1c02      	adds	r2, r0, #0
    2714:	e77d      	b.n	2612 <__sfvwrite_r+0x1a6>
    2716:	4649      	mov	r1, r9
    2718:	f000 f924 	bl	2964 <memmove>
    271c:	6822      	ldr	r2, [r4, #0]
    271e:	9e02      	ldr	r6, [sp, #8]
    2720:	9803      	ldr	r0, [sp, #12]
    2722:	1993      	adds	r3, r2, r6
    2724:	6023      	str	r3, [r4, #0]
    2726:	1c21      	adds	r1, r4, #0
    2728:	f7ff fd2a 	bl	2180 <_fflush_r>
    272c:	2800      	cmp	r0, #0
    272e:	d000      	beq.n	2732 <__sfvwrite_r+0x2c6>
    2730:	e747      	b.n	25c2 <__sfvwrite_r+0x156>
    2732:	9e02      	ldr	r6, [sp, #8]
    2734:	e708      	b.n	2548 <__sfvwrite_r+0xdc>
    2736:	464a      	mov	r2, r9
    2738:	0558      	lsls	r0, r3, #21
    273a:	d4bb      	bmi.n	26b4 <__sfvwrite_r+0x248>
    273c:	9803      	ldr	r0, [sp, #12]
    273e:	f000 fa07 	bl	2b50 <_realloc_r>
    2742:	4680      	mov	r8, r0
    2744:	2800      	cmp	r0, #0
    2746:	d1c6      	bne.n	26d6 <__sfvwrite_r+0x26a>
    2748:	9803      	ldr	r0, [sp, #12]
    274a:	6921      	ldr	r1, [r4, #16]
    274c:	f000 f95c 	bl	2a08 <_free_r>
    2750:	89a2      	ldrh	r2, [r4, #12]
    2752:	2380      	movs	r3, #128	; 0x80
    2754:	9f03      	ldr	r7, [sp, #12]
    2756:	439a      	bics	r2, r3
    2758:	230c      	movs	r3, #12
    275a:	603b      	str	r3, [r7, #0]
    275c:	e732      	b.n	25c4 <__sfvwrite_r+0x158>
    275e:	2601      	movs	r6, #1
    2760:	1c6f      	adds	r7, r5, #1
    2762:	9601      	str	r6, [sp, #4]
    2764:	e6d6      	b.n	2514 <__sfvwrite_r+0xa8>
    2766:	2001      	movs	r0, #1
    2768:	4240      	negs	r0, r0
    276a:	e6b2      	b.n	24d2 <__sfvwrite_r+0x66>
    276c:	9e03      	ldr	r6, [sp, #12]
    276e:	230c      	movs	r3, #12
    2770:	6033      	str	r3, [r6, #0]
    2772:	89a2      	ldrh	r2, [r4, #12]
    2774:	e726      	b.n	25c4 <__sfvwrite_r+0x158>
    2776:	46c0      	nop			; (mov r8, r8)
    2778:	7ffffc00 	.word	0x7ffffc00
    277c:	fffffb7f 	.word	0xfffffb7f
    2780:	7fffffff 	.word	0x7fffffff

00002784 <_fwalk>:
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	4647      	mov	r7, r8
    2788:	b480      	push	{r7}
    278a:	1c07      	adds	r7, r0, #0
    278c:	3748      	adds	r7, #72	; 0x48
    278e:	4688      	mov	r8, r1
    2790:	2600      	movs	r6, #0
    2792:	2f00      	cmp	r7, #0
    2794:	d013      	beq.n	27be <_fwalk+0x3a>
    2796:	687d      	ldr	r5, [r7, #4]
    2798:	68bc      	ldr	r4, [r7, #8]
    279a:	3d01      	subs	r5, #1
    279c:	d40c      	bmi.n	27b8 <_fwalk+0x34>
    279e:	89a3      	ldrh	r3, [r4, #12]
    27a0:	2b01      	cmp	r3, #1
    27a2:	d906      	bls.n	27b2 <_fwalk+0x2e>
    27a4:	220e      	movs	r2, #14
    27a6:	5ea3      	ldrsh	r3, [r4, r2]
    27a8:	3301      	adds	r3, #1
    27aa:	d002      	beq.n	27b2 <_fwalk+0x2e>
    27ac:	1c20      	adds	r0, r4, #0
    27ae:	47c0      	blx	r8
    27b0:	4306      	orrs	r6, r0
    27b2:	3468      	adds	r4, #104	; 0x68
    27b4:	3d01      	subs	r5, #1
    27b6:	d2f2      	bcs.n	279e <_fwalk+0x1a>
    27b8:	683f      	ldr	r7, [r7, #0]
    27ba:	2f00      	cmp	r7, #0
    27bc:	d1eb      	bne.n	2796 <_fwalk+0x12>
    27be:	1c30      	adds	r0, r6, #0
    27c0:	bc04      	pop	{r2}
    27c2:	4690      	mov	r8, r2
    27c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27c6:	46c0      	nop			; (mov r8, r8)

000027c8 <_fwalk_reent>:
    27c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ca:	464f      	mov	r7, r9
    27cc:	4646      	mov	r6, r8
    27ce:	b4c0      	push	{r6, r7}
    27d0:	1c06      	adds	r6, r0, #0
    27d2:	3648      	adds	r6, #72	; 0x48
    27d4:	4680      	mov	r8, r0
    27d6:	4689      	mov	r9, r1
    27d8:	2700      	movs	r7, #0
    27da:	2e00      	cmp	r6, #0
    27dc:	d014      	beq.n	2808 <_fwalk_reent+0x40>
    27de:	6875      	ldr	r5, [r6, #4]
    27e0:	68b4      	ldr	r4, [r6, #8]
    27e2:	3d01      	subs	r5, #1
    27e4:	d40d      	bmi.n	2802 <_fwalk_reent+0x3a>
    27e6:	89a3      	ldrh	r3, [r4, #12]
    27e8:	2b01      	cmp	r3, #1
    27ea:	d907      	bls.n	27fc <_fwalk_reent+0x34>
    27ec:	220e      	movs	r2, #14
    27ee:	5ea3      	ldrsh	r3, [r4, r2]
    27f0:	3301      	adds	r3, #1
    27f2:	d003      	beq.n	27fc <_fwalk_reent+0x34>
    27f4:	4640      	mov	r0, r8
    27f6:	1c21      	adds	r1, r4, #0
    27f8:	47c8      	blx	r9
    27fa:	4307      	orrs	r7, r0
    27fc:	3468      	adds	r4, #104	; 0x68
    27fe:	3d01      	subs	r5, #1
    2800:	d2f1      	bcs.n	27e6 <_fwalk_reent+0x1e>
    2802:	6836      	ldr	r6, [r6, #0]
    2804:	2e00      	cmp	r6, #0
    2806:	d1ea      	bne.n	27de <_fwalk_reent+0x16>
    2808:	1c38      	adds	r0, r7, #0
    280a:	bc0c      	pop	{r2, r3}
    280c:	4690      	mov	r8, r2
    280e:	4699      	mov	r9, r3
    2810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2812:	46c0      	nop			; (mov r8, r8)

00002814 <__smakebuf_r>:
    2814:	b5f0      	push	{r4, r5, r6, r7, lr}
    2816:	898b      	ldrh	r3, [r1, #12]
    2818:	b091      	sub	sp, #68	; 0x44
    281a:	1c05      	adds	r5, r0, #0
    281c:	1c0c      	adds	r4, r1, #0
    281e:	079a      	lsls	r2, r3, #30
    2820:	d433      	bmi.n	288a <__smakebuf_r+0x76>
    2822:	220e      	movs	r2, #14
    2824:	5e89      	ldrsh	r1, [r1, r2]
    2826:	2900      	cmp	r1, #0
    2828:	db22      	blt.n	2870 <__smakebuf_r+0x5c>
    282a:	aa01      	add	r2, sp, #4
    282c:	f000 fc04 	bl	3038 <_fstat_r>
    2830:	2800      	cmp	r0, #0
    2832:	db1c      	blt.n	286e <__smakebuf_r+0x5a>
    2834:	9b02      	ldr	r3, [sp, #8]
    2836:	27f0      	movs	r7, #240	; 0xf0
    2838:	023f      	lsls	r7, r7, #8
    283a:	401f      	ands	r7, r3
    283c:	4b1c      	ldr	r3, [pc, #112]	; (28b0 <__smakebuf_r+0x9c>)
    283e:	2680      	movs	r6, #128	; 0x80
    2840:	18ff      	adds	r7, r7, r3
    2842:	427b      	negs	r3, r7
    2844:	415f      	adcs	r7, r3
    2846:	00f6      	lsls	r6, r6, #3
    2848:	1c28      	adds	r0, r5, #0
    284a:	1c31      	adds	r1, r6, #0
    284c:	f000 f924 	bl	2a98 <_malloc_r>
    2850:	2800      	cmp	r0, #0
    2852:	d014      	beq.n	287e <__smakebuf_r+0x6a>
    2854:	4b17      	ldr	r3, [pc, #92]	; (28b4 <__smakebuf_r+0xa0>)
    2856:	62ab      	str	r3, [r5, #40]	; 0x28
    2858:	89a2      	ldrh	r2, [r4, #12]
    285a:	2380      	movs	r3, #128	; 0x80
    285c:	4313      	orrs	r3, r2
    285e:	81a3      	strh	r3, [r4, #12]
    2860:	6020      	str	r0, [r4, #0]
    2862:	6120      	str	r0, [r4, #16]
    2864:	6166      	str	r6, [r4, #20]
    2866:	2f00      	cmp	r7, #0
    2868:	d116      	bne.n	2898 <__smakebuf_r+0x84>
    286a:	b011      	add	sp, #68	; 0x44
    286c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    286e:	89a3      	ldrh	r3, [r4, #12]
    2870:	2700      	movs	r7, #0
    2872:	2640      	movs	r6, #64	; 0x40
    2874:	061a      	lsls	r2, r3, #24
    2876:	d4e7      	bmi.n	2848 <__smakebuf_r+0x34>
    2878:	2680      	movs	r6, #128	; 0x80
    287a:	00f6      	lsls	r6, r6, #3
    287c:	e7e4      	b.n	2848 <__smakebuf_r+0x34>
    287e:	89a3      	ldrh	r3, [r4, #12]
    2880:	059a      	lsls	r2, r3, #22
    2882:	d4f2      	bmi.n	286a <__smakebuf_r+0x56>
    2884:	2202      	movs	r2, #2
    2886:	4313      	orrs	r3, r2
    2888:	81a3      	strh	r3, [r4, #12]
    288a:	1c23      	adds	r3, r4, #0
    288c:	3347      	adds	r3, #71	; 0x47
    288e:	6023      	str	r3, [r4, #0]
    2890:	6123      	str	r3, [r4, #16]
    2892:	2301      	movs	r3, #1
    2894:	6163      	str	r3, [r4, #20]
    2896:	e7e8      	b.n	286a <__smakebuf_r+0x56>
    2898:	230e      	movs	r3, #14
    289a:	5ee1      	ldrsh	r1, [r4, r3]
    289c:	1c28      	adds	r0, r5, #0
    289e:	f000 fbdf 	bl	3060 <_isatty_r>
    28a2:	2800      	cmp	r0, #0
    28a4:	d0e1      	beq.n	286a <__smakebuf_r+0x56>
    28a6:	89a2      	ldrh	r2, [r4, #12]
    28a8:	2301      	movs	r3, #1
    28aa:	4313      	orrs	r3, r2
    28ac:	81a3      	strh	r3, [r4, #12]
    28ae:	e7dc      	b.n	286a <__smakebuf_r+0x56>
    28b0:	ffffe000 	.word	0xffffe000
    28b4:	00002211 	.word	0x00002211

000028b8 <malloc>:
    28b8:	b508      	push	{r3, lr}
    28ba:	4b03      	ldr	r3, [pc, #12]	; (28c8 <malloc+0x10>)
    28bc:	1c01      	adds	r1, r0, #0
    28be:	6818      	ldr	r0, [r3, #0]
    28c0:	f000 f8ea 	bl	2a98 <_malloc_r>
    28c4:	bd08      	pop	{r3, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	20000008 	.word	0x20000008

000028cc <free>:
    28cc:	b508      	push	{r3, lr}
    28ce:	4b03      	ldr	r3, [pc, #12]	; (28dc <free+0x10>)
    28d0:	1c01      	adds	r1, r0, #0
    28d2:	6818      	ldr	r0, [r3, #0]
    28d4:	f000 f898 	bl	2a08 <_free_r>
    28d8:	bd08      	pop	{r3, pc}
    28da:	46c0      	nop			; (mov r8, r8)
    28dc:	20000008 	.word	0x20000008

000028e0 <memchr>:
    28e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28e2:	b2cc      	uxtb	r4, r1
    28e4:	0783      	lsls	r3, r0, #30
    28e6:	d037      	beq.n	2958 <memchr+0x78>
    28e8:	1e53      	subs	r3, r2, #1
    28ea:	2a00      	cmp	r2, #0
    28ec:	d01f      	beq.n	292e <memchr+0x4e>
    28ee:	7802      	ldrb	r2, [r0, #0]
    28f0:	42a2      	cmp	r2, r4
    28f2:	d01d      	beq.n	2930 <memchr+0x50>
    28f4:	2503      	movs	r5, #3
    28f6:	e005      	b.n	2904 <memchr+0x24>
    28f8:	2b00      	cmp	r3, #0
    28fa:	d018      	beq.n	292e <memchr+0x4e>
    28fc:	7802      	ldrb	r2, [r0, #0]
    28fe:	3b01      	subs	r3, #1
    2900:	42a2      	cmp	r2, r4
    2902:	d015      	beq.n	2930 <memchr+0x50>
    2904:	3001      	adds	r0, #1
    2906:	4228      	tst	r0, r5
    2908:	d1f6      	bne.n	28f8 <memchr+0x18>
    290a:	2b03      	cmp	r3, #3
    290c:	d811      	bhi.n	2932 <memchr+0x52>
    290e:	2b00      	cmp	r3, #0
    2910:	d00d      	beq.n	292e <memchr+0x4e>
    2912:	7802      	ldrb	r2, [r0, #0]
    2914:	42a2      	cmp	r2, r4
    2916:	d00b      	beq.n	2930 <memchr+0x50>
    2918:	1c42      	adds	r2, r0, #1
    291a:	18c3      	adds	r3, r0, r3
    291c:	e004      	b.n	2928 <memchr+0x48>
    291e:	3201      	adds	r2, #1
    2920:	1e51      	subs	r1, r2, #1
    2922:	7809      	ldrb	r1, [r1, #0]
    2924:	42a1      	cmp	r1, r4
    2926:	d003      	beq.n	2930 <memchr+0x50>
    2928:	1e10      	subs	r0, r2, #0
    292a:	4298      	cmp	r0, r3
    292c:	d1f7      	bne.n	291e <memchr+0x3e>
    292e:	2000      	movs	r0, #0
    2930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2932:	26ff      	movs	r6, #255	; 0xff
    2934:	4031      	ands	r1, r6
    2936:	020e      	lsls	r6, r1, #8
    2938:	4331      	orrs	r1, r6
    293a:	040e      	lsls	r6, r1, #16
    293c:	4d07      	ldr	r5, [pc, #28]	; (295c <memchr+0x7c>)
    293e:	430e      	orrs	r6, r1
    2940:	6802      	ldr	r2, [r0, #0]
    2942:	4f07      	ldr	r7, [pc, #28]	; (2960 <memchr+0x80>)
    2944:	4072      	eors	r2, r6
    2946:	19d1      	adds	r1, r2, r7
    2948:	4391      	bics	r1, r2
    294a:	4229      	tst	r1, r5
    294c:	d1df      	bne.n	290e <memchr+0x2e>
    294e:	3b04      	subs	r3, #4
    2950:	3004      	adds	r0, #4
    2952:	2b03      	cmp	r3, #3
    2954:	d8f4      	bhi.n	2940 <memchr+0x60>
    2956:	e7da      	b.n	290e <memchr+0x2e>
    2958:	1c13      	adds	r3, r2, #0
    295a:	e7d6      	b.n	290a <memchr+0x2a>
    295c:	80808080 	.word	0x80808080
    2960:	fefefeff 	.word	0xfefefeff

00002964 <memmove>:
    2964:	b5f0      	push	{r4, r5, r6, r7, lr}
    2966:	4288      	cmp	r0, r1
    2968:	d90e      	bls.n	2988 <memmove+0x24>
    296a:	188d      	adds	r5, r1, r2
    296c:	42a8      	cmp	r0, r5
    296e:	d20b      	bcs.n	2988 <memmove+0x24>
    2970:	1886      	adds	r6, r0, r2
    2972:	1e53      	subs	r3, r2, #1
    2974:	4251      	negs	r1, r2
    2976:	2a00      	cmp	r2, #0
    2978:	d005      	beq.n	2986 <memmove+0x22>
    297a:	186a      	adds	r2, r5, r1
    297c:	5cd4      	ldrb	r4, [r2, r3]
    297e:	1872      	adds	r2, r6, r1
    2980:	54d4      	strb	r4, [r2, r3]
    2982:	3b01      	subs	r3, #1
    2984:	d2f9      	bcs.n	297a <memmove+0x16>
    2986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2988:	2a0f      	cmp	r2, #15
    298a:	d809      	bhi.n	29a0 <memmove+0x3c>
    298c:	1c05      	adds	r5, r0, #0
    298e:	2a00      	cmp	r2, #0
    2990:	d0f9      	beq.n	2986 <memmove+0x22>
    2992:	2300      	movs	r3, #0
    2994:	5ccc      	ldrb	r4, [r1, r3]
    2996:	54ec      	strb	r4, [r5, r3]
    2998:	3301      	adds	r3, #1
    299a:	4293      	cmp	r3, r2
    299c:	d1fa      	bne.n	2994 <memmove+0x30>
    299e:	e7f2      	b.n	2986 <memmove+0x22>
    29a0:	1c03      	adds	r3, r0, #0
    29a2:	430b      	orrs	r3, r1
    29a4:	079c      	lsls	r4, r3, #30
    29a6:	d12a      	bne.n	29fe <memmove+0x9a>
    29a8:	1c16      	adds	r6, r2, #0
    29aa:	3e10      	subs	r6, #16
    29ac:	0936      	lsrs	r6, r6, #4
    29ae:	0135      	lsls	r5, r6, #4
    29b0:	1945      	adds	r5, r0, r5
    29b2:	3510      	adds	r5, #16
    29b4:	1c0c      	adds	r4, r1, #0
    29b6:	1c03      	adds	r3, r0, #0
    29b8:	6827      	ldr	r7, [r4, #0]
    29ba:	601f      	str	r7, [r3, #0]
    29bc:	6867      	ldr	r7, [r4, #4]
    29be:	605f      	str	r7, [r3, #4]
    29c0:	68a7      	ldr	r7, [r4, #8]
    29c2:	609f      	str	r7, [r3, #8]
    29c4:	68e7      	ldr	r7, [r4, #12]
    29c6:	3410      	adds	r4, #16
    29c8:	60df      	str	r7, [r3, #12]
    29ca:	3310      	adds	r3, #16
    29cc:	42ab      	cmp	r3, r5
    29ce:	d1f3      	bne.n	29b8 <memmove+0x54>
    29d0:	1c73      	adds	r3, r6, #1
    29d2:	011b      	lsls	r3, r3, #4
    29d4:	18c5      	adds	r5, r0, r3
    29d6:	18c9      	adds	r1, r1, r3
    29d8:	230f      	movs	r3, #15
    29da:	4013      	ands	r3, r2
    29dc:	2b03      	cmp	r3, #3
    29de:	d910      	bls.n	2a02 <memmove+0x9e>
    29e0:	1f1c      	subs	r4, r3, #4
    29e2:	08a4      	lsrs	r4, r4, #2
    29e4:	3401      	adds	r4, #1
    29e6:	00a4      	lsls	r4, r4, #2
    29e8:	2300      	movs	r3, #0
    29ea:	58ce      	ldr	r6, [r1, r3]
    29ec:	50ee      	str	r6, [r5, r3]
    29ee:	3304      	adds	r3, #4
    29f0:	42a3      	cmp	r3, r4
    29f2:	d1fa      	bne.n	29ea <memmove+0x86>
    29f4:	18ed      	adds	r5, r5, r3
    29f6:	18c9      	adds	r1, r1, r3
    29f8:	2303      	movs	r3, #3
    29fa:	401a      	ands	r2, r3
    29fc:	e7c7      	b.n	298e <memmove+0x2a>
    29fe:	1c05      	adds	r5, r0, #0
    2a00:	e7c7      	b.n	2992 <memmove+0x2e>
    2a02:	1c1a      	adds	r2, r3, #0
    2a04:	e7c3      	b.n	298e <memmove+0x2a>
    2a06:	46c0      	nop			; (mov r8, r8)

00002a08 <_free_r>:
    2a08:	b530      	push	{r4, r5, lr}
    2a0a:	2900      	cmp	r1, #0
    2a0c:	d00f      	beq.n	2a2e <_free_r+0x26>
    2a0e:	3904      	subs	r1, #4
    2a10:	680b      	ldr	r3, [r1, #0]
    2a12:	2b00      	cmp	r3, #0
    2a14:	db1e      	blt.n	2a54 <_free_r+0x4c>
    2a16:	4b1f      	ldr	r3, [pc, #124]	; (2a94 <_free_r+0x8c>)
    2a18:	681a      	ldr	r2, [r3, #0]
    2a1a:	2a00      	cmp	r2, #0
    2a1c:	d005      	beq.n	2a2a <_free_r+0x22>
    2a1e:	428a      	cmp	r2, r1
    2a20:	d909      	bls.n	2a36 <_free_r+0x2e>
    2a22:	6808      	ldr	r0, [r1, #0]
    2a24:	180c      	adds	r4, r1, r0
    2a26:	42a2      	cmp	r2, r4
    2a28:	d016      	beq.n	2a58 <_free_r+0x50>
    2a2a:	604a      	str	r2, [r1, #4]
    2a2c:	6019      	str	r1, [r3, #0]
    2a2e:	bd30      	pop	{r4, r5, pc}
    2a30:	428b      	cmp	r3, r1
    2a32:	d803      	bhi.n	2a3c <_free_r+0x34>
    2a34:	1c1a      	adds	r2, r3, #0
    2a36:	6853      	ldr	r3, [r2, #4]
    2a38:	2b00      	cmp	r3, #0
    2a3a:	d1f9      	bne.n	2a30 <_free_r+0x28>
    2a3c:	6815      	ldr	r5, [r2, #0]
    2a3e:	1954      	adds	r4, r2, r5
    2a40:	428c      	cmp	r4, r1
    2a42:	d013      	beq.n	2a6c <_free_r+0x64>
    2a44:	d80f      	bhi.n	2a66 <_free_r+0x5e>
    2a46:	6808      	ldr	r0, [r1, #0]
    2a48:	180c      	adds	r4, r1, r0
    2a4a:	429c      	cmp	r4, r3
    2a4c:	d01a      	beq.n	2a84 <_free_r+0x7c>
    2a4e:	604b      	str	r3, [r1, #4]
    2a50:	6051      	str	r1, [r2, #4]
    2a52:	e7ec      	b.n	2a2e <_free_r+0x26>
    2a54:	18c9      	adds	r1, r1, r3
    2a56:	e7de      	b.n	2a16 <_free_r+0xe>
    2a58:	6814      	ldr	r4, [r2, #0]
    2a5a:	6852      	ldr	r2, [r2, #4]
    2a5c:	1900      	adds	r0, r0, r4
    2a5e:	6008      	str	r0, [r1, #0]
    2a60:	604a      	str	r2, [r1, #4]
    2a62:	6019      	str	r1, [r3, #0]
    2a64:	e7e3      	b.n	2a2e <_free_r+0x26>
    2a66:	230c      	movs	r3, #12
    2a68:	6003      	str	r3, [r0, #0]
    2a6a:	e7e0      	b.n	2a2e <_free_r+0x26>
    2a6c:	6809      	ldr	r1, [r1, #0]
    2a6e:	186d      	adds	r5, r5, r1
    2a70:	1951      	adds	r1, r2, r5
    2a72:	6015      	str	r5, [r2, #0]
    2a74:	4299      	cmp	r1, r3
    2a76:	d1da      	bne.n	2a2e <_free_r+0x26>
    2a78:	6819      	ldr	r1, [r3, #0]
    2a7a:	685b      	ldr	r3, [r3, #4]
    2a7c:	186d      	adds	r5, r5, r1
    2a7e:	6015      	str	r5, [r2, #0]
    2a80:	6053      	str	r3, [r2, #4]
    2a82:	e7d4      	b.n	2a2e <_free_r+0x26>
    2a84:	681c      	ldr	r4, [r3, #0]
    2a86:	685b      	ldr	r3, [r3, #4]
    2a88:	1900      	adds	r0, r0, r4
    2a8a:	6008      	str	r0, [r1, #0]
    2a8c:	604b      	str	r3, [r1, #4]
    2a8e:	6051      	str	r1, [r2, #4]
    2a90:	e7cd      	b.n	2a2e <_free_r+0x26>
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000130 	.word	0x20000130

00002a98 <_malloc_r>:
    2a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a9a:	1ccd      	adds	r5, r1, #3
    2a9c:	2303      	movs	r3, #3
    2a9e:	439d      	bics	r5, r3
    2aa0:	3508      	adds	r5, #8
    2aa2:	1c07      	adds	r7, r0, #0
    2aa4:	2d0c      	cmp	r5, #12
    2aa6:	d227      	bcs.n	2af8 <_malloc_r+0x60>
    2aa8:	250c      	movs	r5, #12
    2aaa:	42a9      	cmp	r1, r5
    2aac:	d826      	bhi.n	2afc <_malloc_r+0x64>
    2aae:	4e27      	ldr	r6, [pc, #156]	; (2b4c <_malloc_r+0xb4>)
    2ab0:	6833      	ldr	r3, [r6, #0]
    2ab2:	2b00      	cmp	r3, #0
    2ab4:	d00a      	beq.n	2acc <_malloc_r+0x34>
    2ab6:	6819      	ldr	r1, [r3, #0]
    2ab8:	1b4a      	subs	r2, r1, r5
    2aba:	d404      	bmi.n	2ac6 <_malloc_r+0x2e>
    2abc:	e040      	b.n	2b40 <_malloc_r+0xa8>
    2abe:	6821      	ldr	r1, [r4, #0]
    2ac0:	1b4a      	subs	r2, r1, r5
    2ac2:	d51f      	bpl.n	2b04 <_malloc_r+0x6c>
    2ac4:	1c23      	adds	r3, r4, #0
    2ac6:	685c      	ldr	r4, [r3, #4]
    2ac8:	2c00      	cmp	r4, #0
    2aca:	d1f8      	bne.n	2abe <_malloc_r+0x26>
    2acc:	6871      	ldr	r1, [r6, #4]
    2ace:	2900      	cmp	r1, #0
    2ad0:	d030      	beq.n	2b34 <_malloc_r+0x9c>
    2ad2:	1c38      	adds	r0, r7, #0
    2ad4:	1c29      	adds	r1, r5, #0
    2ad6:	f000 f865 	bl	2ba4 <_sbrk_r>
    2ada:	1c43      	adds	r3, r0, #1
    2adc:	d00e      	beq.n	2afc <_malloc_r+0x64>
    2ade:	1cc4      	adds	r4, r0, #3
    2ae0:	2303      	movs	r3, #3
    2ae2:	439c      	bics	r4, r3
    2ae4:	42a0      	cmp	r0, r4
    2ae6:	d005      	beq.n	2af4 <_malloc_r+0x5c>
    2ae8:	1a21      	subs	r1, r4, r0
    2aea:	1c38      	adds	r0, r7, #0
    2aec:	f000 f85a 	bl	2ba4 <_sbrk_r>
    2af0:	3001      	adds	r0, #1
    2af2:	d003      	beq.n	2afc <_malloc_r+0x64>
    2af4:	6025      	str	r5, [r4, #0]
    2af6:	e00a      	b.n	2b0e <_malloc_r+0x76>
    2af8:	2d00      	cmp	r5, #0
    2afa:	dad6      	bge.n	2aaa <_malloc_r+0x12>
    2afc:	230c      	movs	r3, #12
    2afe:	603b      	str	r3, [r7, #0]
    2b00:	2000      	movs	r0, #0
    2b02:	e00d      	b.n	2b20 <_malloc_r+0x88>
    2b04:	2a0b      	cmp	r2, #11
    2b06:	d90c      	bls.n	2b22 <_malloc_r+0x8a>
    2b08:	6022      	str	r2, [r4, #0]
    2b0a:	18a4      	adds	r4, r4, r2
    2b0c:	6025      	str	r5, [r4, #0]
    2b0e:	1c20      	adds	r0, r4, #0
    2b10:	300b      	adds	r0, #11
    2b12:	2207      	movs	r2, #7
    2b14:	1d23      	adds	r3, r4, #4
    2b16:	4390      	bics	r0, r2
    2b18:	1ac3      	subs	r3, r0, r3
    2b1a:	d001      	beq.n	2b20 <_malloc_r+0x88>
    2b1c:	425a      	negs	r2, r3
    2b1e:	50e2      	str	r2, [r4, r3]
    2b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b22:	429c      	cmp	r4, r3
    2b24:	d002      	beq.n	2b2c <_malloc_r+0x94>
    2b26:	6862      	ldr	r2, [r4, #4]
    2b28:	605a      	str	r2, [r3, #4]
    2b2a:	e7f0      	b.n	2b0e <_malloc_r+0x76>
    2b2c:	1c1a      	adds	r2, r3, #0
    2b2e:	6032      	str	r2, [r6, #0]
    2b30:	1c1c      	adds	r4, r3, #0
    2b32:	e7ec      	b.n	2b0e <_malloc_r+0x76>
    2b34:	1c38      	adds	r0, r7, #0
    2b36:	2100      	movs	r1, #0
    2b38:	f000 f834 	bl	2ba4 <_sbrk_r>
    2b3c:	6070      	str	r0, [r6, #4]
    2b3e:	e7c8      	b.n	2ad2 <_malloc_r+0x3a>
    2b40:	2a0b      	cmp	r2, #11
    2b42:	d801      	bhi.n	2b48 <_malloc_r+0xb0>
    2b44:	685a      	ldr	r2, [r3, #4]
    2b46:	e7f2      	b.n	2b2e <_malloc_r+0x96>
    2b48:	1c1c      	adds	r4, r3, #0
    2b4a:	e7dd      	b.n	2b08 <_malloc_r+0x70>
    2b4c:	20000130 	.word	0x20000130

00002b50 <_realloc_r>:
    2b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b52:	1c06      	adds	r6, r0, #0
    2b54:	1c0c      	adds	r4, r1, #0
    2b56:	1c15      	adds	r5, r2, #0
    2b58:	2900      	cmp	r1, #0
    2b5a:	d01d      	beq.n	2b98 <_realloc_r+0x48>
    2b5c:	2a00      	cmp	r2, #0
    2b5e:	d017      	beq.n	2b90 <_realloc_r+0x40>
    2b60:	f000 faa4 	bl	30ac <_malloc_usable_size_r>
    2b64:	4285      	cmp	r5, r0
    2b66:	d801      	bhi.n	2b6c <_realloc_r+0x1c>
    2b68:	1c20      	adds	r0, r4, #0
    2b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b6c:	1c30      	adds	r0, r6, #0
    2b6e:	1c29      	adds	r1, r5, #0
    2b70:	f7ff ff92 	bl	2a98 <_malloc_r>
    2b74:	1e07      	subs	r7, r0, #0
    2b76:	d009      	beq.n	2b8c <_realloc_r+0x3c>
    2b78:	1c21      	adds	r1, r4, #0
    2b7a:	1c2a      	adds	r2, r5, #0
    2b7c:	f7fe fdee 	bl	175c <memcpy>
    2b80:	1c21      	adds	r1, r4, #0
    2b82:	1c30      	adds	r0, r6, #0
    2b84:	f7ff ff40 	bl	2a08 <_free_r>
    2b88:	1c3c      	adds	r4, r7, #0
    2b8a:	e7ed      	b.n	2b68 <_realloc_r+0x18>
    2b8c:	2400      	movs	r4, #0
    2b8e:	e7eb      	b.n	2b68 <_realloc_r+0x18>
    2b90:	f7ff ff3a 	bl	2a08 <_free_r>
    2b94:	2400      	movs	r4, #0
    2b96:	e7e7      	b.n	2b68 <_realloc_r+0x18>
    2b98:	1c11      	adds	r1, r2, #0
    2b9a:	f7ff ff7d 	bl	2a98 <_malloc_r>
    2b9e:	1c04      	adds	r4, r0, #0
    2ba0:	e7e2      	b.n	2b68 <_realloc_r+0x18>
    2ba2:	46c0      	nop			; (mov r8, r8)

00002ba4 <_sbrk_r>:
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	4c07      	ldr	r4, [pc, #28]	; (2bc4 <_sbrk_r+0x20>)
    2ba8:	2300      	movs	r3, #0
    2baa:	1c05      	adds	r5, r0, #0
    2bac:	1c08      	adds	r0, r1, #0
    2bae:	6023      	str	r3, [r4, #0]
    2bb0:	f7fe fb1a 	bl	11e8 <_sbrk>
    2bb4:	1c43      	adds	r3, r0, #1
    2bb6:	d000      	beq.n	2bba <_sbrk_r+0x16>
    2bb8:	bd38      	pop	{r3, r4, r5, pc}
    2bba:	6823      	ldr	r3, [r4, #0]
    2bbc:	2b00      	cmp	r3, #0
    2bbe:	d0fb      	beq.n	2bb8 <_sbrk_r+0x14>
    2bc0:	602b      	str	r3, [r5, #0]
    2bc2:	e7f9      	b.n	2bb8 <_sbrk_r+0x14>
    2bc4:	200001a4 	.word	0x200001a4

00002bc8 <__sread>:
    2bc8:	b538      	push	{r3, r4, r5, lr}
    2bca:	1c0c      	adds	r4, r1, #0
    2bcc:	250e      	movs	r5, #14
    2bce:	5f49      	ldrsh	r1, [r1, r5]
    2bd0:	f000 fa76 	bl	30c0 <_read_r>
    2bd4:	2800      	cmp	r0, #0
    2bd6:	db03      	blt.n	2be0 <__sread+0x18>
    2bd8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2bda:	1813      	adds	r3, r2, r0
    2bdc:	6563      	str	r3, [r4, #84]	; 0x54
    2bde:	bd38      	pop	{r3, r4, r5, pc}
    2be0:	89a2      	ldrh	r2, [r4, #12]
    2be2:	4b02      	ldr	r3, [pc, #8]	; (2bec <__sread+0x24>)
    2be4:	4013      	ands	r3, r2
    2be6:	81a3      	strh	r3, [r4, #12]
    2be8:	e7f9      	b.n	2bde <__sread+0x16>
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	ffffefff 	.word	0xffffefff

00002bf0 <__seofread>:
    2bf0:	2000      	movs	r0, #0
    2bf2:	4770      	bx	lr

00002bf4 <__swrite>:
    2bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bf6:	1c0c      	adds	r4, r1, #0
    2bf8:	8989      	ldrh	r1, [r1, #12]
    2bfa:	1c05      	adds	r5, r0, #0
    2bfc:	1c17      	adds	r7, r2, #0
    2bfe:	1c1e      	adds	r6, r3, #0
    2c00:	05cb      	lsls	r3, r1, #23
    2c02:	d506      	bpl.n	2c12 <__swrite+0x1e>
    2c04:	230e      	movs	r3, #14
    2c06:	5ee1      	ldrsh	r1, [r4, r3]
    2c08:	2200      	movs	r2, #0
    2c0a:	2302      	movs	r3, #2
    2c0c:	f000 fa3a 	bl	3084 <_lseek_r>
    2c10:	89a1      	ldrh	r1, [r4, #12]
    2c12:	4b05      	ldr	r3, [pc, #20]	; (2c28 <__swrite+0x34>)
    2c14:	1c28      	adds	r0, r5, #0
    2c16:	4019      	ands	r1, r3
    2c18:	81a1      	strh	r1, [r4, #12]
    2c1a:	1c3a      	adds	r2, r7, #0
    2c1c:	230e      	movs	r3, #14
    2c1e:	5ee1      	ldrsh	r1, [r4, r3]
    2c20:	1c33      	adds	r3, r6, #0
    2c22:	f000 f9e3 	bl	2fec <_write_r>
    2c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c28:	ffffefff 	.word	0xffffefff

00002c2c <__sseek>:
    2c2c:	b538      	push	{r3, r4, r5, lr}
    2c2e:	1c0c      	adds	r4, r1, #0
    2c30:	250e      	movs	r5, #14
    2c32:	5f49      	ldrsh	r1, [r1, r5]
    2c34:	f000 fa26 	bl	3084 <_lseek_r>
    2c38:	89a2      	ldrh	r2, [r4, #12]
    2c3a:	1c43      	adds	r3, r0, #1
    2c3c:	d005      	beq.n	2c4a <__sseek+0x1e>
    2c3e:	2380      	movs	r3, #128	; 0x80
    2c40:	015b      	lsls	r3, r3, #5
    2c42:	4313      	orrs	r3, r2
    2c44:	81a3      	strh	r3, [r4, #12]
    2c46:	6560      	str	r0, [r4, #84]	; 0x54
    2c48:	bd38      	pop	{r3, r4, r5, pc}
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <__sseek+0x28>)
    2c4c:	4013      	ands	r3, r2
    2c4e:	81a3      	strh	r3, [r4, #12]
    2c50:	e7fa      	b.n	2c48 <__sseek+0x1c>
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	ffffefff 	.word	0xffffefff

00002c58 <__sclose>:
    2c58:	b508      	push	{r3, lr}
    2c5a:	230e      	movs	r3, #14
    2c5c:	5ec9      	ldrsh	r1, [r1, r3]
    2c5e:	f000 f9d9 	bl	3014 <_close_r>
    2c62:	bd08      	pop	{r3, pc}

00002c64 <_printf_common>:
    2c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c66:	464e      	mov	r6, r9
    2c68:	4657      	mov	r7, sl
    2c6a:	4645      	mov	r5, r8
    2c6c:	b4e0      	push	{r5, r6, r7}
    2c6e:	4691      	mov	r9, r2
    2c70:	1c06      	adds	r6, r0, #0
    2c72:	1c1f      	adds	r7, r3, #0
    2c74:	9808      	ldr	r0, [sp, #32]
    2c76:	690a      	ldr	r2, [r1, #16]
    2c78:	688b      	ldr	r3, [r1, #8]
    2c7a:	1c0c      	adds	r4, r1, #0
    2c7c:	4680      	mov	r8, r0
    2c7e:	4293      	cmp	r3, r2
    2c80:	da00      	bge.n	2c84 <_printf_common+0x20>
    2c82:	1c13      	adds	r3, r2, #0
    2c84:	4649      	mov	r1, r9
    2c86:	600b      	str	r3, [r1, #0]
    2c88:	2243      	movs	r2, #67	; 0x43
    2c8a:	5ca2      	ldrb	r2, [r4, r2]
    2c8c:	2a00      	cmp	r2, #0
    2c8e:	d001      	beq.n	2c94 <_printf_common+0x30>
    2c90:	3301      	adds	r3, #1
    2c92:	600b      	str	r3, [r1, #0]
    2c94:	6822      	ldr	r2, [r4, #0]
    2c96:	0693      	lsls	r3, r2, #26
    2c98:	d504      	bpl.n	2ca4 <_printf_common+0x40>
    2c9a:	4648      	mov	r0, r9
    2c9c:	6803      	ldr	r3, [r0, #0]
    2c9e:	3302      	adds	r3, #2
    2ca0:	6003      	str	r3, [r0, #0]
    2ca2:	6822      	ldr	r2, [r4, #0]
    2ca4:	2306      	movs	r3, #6
    2ca6:	4213      	tst	r3, r2
    2ca8:	d120      	bne.n	2cec <_printf_common+0x88>
    2caa:	4648      	mov	r0, r9
    2cac:	68e1      	ldr	r1, [r4, #12]
    2cae:	6800      	ldr	r0, [r0, #0]
    2cb0:	1a0b      	subs	r3, r1, r0
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	dd1a      	ble.n	2cec <_printf_common+0x88>
    2cb6:	2119      	movs	r1, #25
    2cb8:	1909      	adds	r1, r1, r4
    2cba:	468a      	mov	sl, r1
    2cbc:	2500      	movs	r5, #0
    2cbe:	e006      	b.n	2cce <_printf_common+0x6a>
    2cc0:	4648      	mov	r0, r9
    2cc2:	68e2      	ldr	r2, [r4, #12]
    2cc4:	6800      	ldr	r0, [r0, #0]
    2cc6:	3501      	adds	r5, #1
    2cc8:	1a13      	subs	r3, r2, r0
    2cca:	42ab      	cmp	r3, r5
    2ccc:	dd0d      	ble.n	2cea <_printf_common+0x86>
    2cce:	1c30      	adds	r0, r6, #0
    2cd0:	1c39      	adds	r1, r7, #0
    2cd2:	4652      	mov	r2, sl
    2cd4:	2301      	movs	r3, #1
    2cd6:	47c0      	blx	r8
    2cd8:	3001      	adds	r0, #1
    2cda:	d1f1      	bne.n	2cc0 <_printf_common+0x5c>
    2cdc:	2001      	movs	r0, #1
    2cde:	4240      	negs	r0, r0
    2ce0:	bc1c      	pop	{r2, r3, r4}
    2ce2:	4690      	mov	r8, r2
    2ce4:	4699      	mov	r9, r3
    2ce6:	46a2      	mov	sl, r4
    2ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cea:	6822      	ldr	r2, [r4, #0]
    2cec:	2343      	movs	r3, #67	; 0x43
    2cee:	5ce3      	ldrb	r3, [r4, r3]
    2cf0:	1e59      	subs	r1, r3, #1
    2cf2:	418b      	sbcs	r3, r1
    2cf4:	0691      	lsls	r1, r2, #26
    2cf6:	d426      	bmi.n	2d46 <_printf_common+0xe2>
    2cf8:	1c22      	adds	r2, r4, #0
    2cfa:	1c30      	adds	r0, r6, #0
    2cfc:	1c39      	adds	r1, r7, #0
    2cfe:	3243      	adds	r2, #67	; 0x43
    2d00:	47c0      	blx	r8
    2d02:	3001      	adds	r0, #1
    2d04:	d0ea      	beq.n	2cdc <_printf_common+0x78>
    2d06:	464b      	mov	r3, r9
    2d08:	6820      	ldr	r0, [r4, #0]
    2d0a:	681a      	ldr	r2, [r3, #0]
    2d0c:	2306      	movs	r3, #6
    2d0e:	4003      	ands	r3, r0
    2d10:	2000      	movs	r0, #0
    2d12:	68e1      	ldr	r1, [r4, #12]
    2d14:	4681      	mov	r9, r0
    2d16:	2b04      	cmp	r3, #4
    2d18:	d026      	beq.n	2d68 <_printf_common+0x104>
    2d1a:	68a2      	ldr	r2, [r4, #8]
    2d1c:	6923      	ldr	r3, [r4, #16]
    2d1e:	429a      	cmp	r2, r3
    2d20:	dc1d      	bgt.n	2d5e <_printf_common+0xfa>
    2d22:	341a      	adds	r4, #26
    2d24:	4649      	mov	r1, r9
    2d26:	46a2      	mov	sl, r4
    2d28:	2400      	movs	r4, #0
    2d2a:	2900      	cmp	r1, #0
    2d2c:	dc03      	bgt.n	2d36 <_printf_common+0xd2>
    2d2e:	e019      	b.n	2d64 <_printf_common+0x100>
    2d30:	3401      	adds	r4, #1
    2d32:	454c      	cmp	r4, r9
    2d34:	d016      	beq.n	2d64 <_printf_common+0x100>
    2d36:	1c30      	adds	r0, r6, #0
    2d38:	1c39      	adds	r1, r7, #0
    2d3a:	4652      	mov	r2, sl
    2d3c:	2301      	movs	r3, #1
    2d3e:	47c0      	blx	r8
    2d40:	3001      	adds	r0, #1
    2d42:	d1f5      	bne.n	2d30 <_printf_common+0xcc>
    2d44:	e7ca      	b.n	2cdc <_printf_common+0x78>
    2d46:	18e1      	adds	r1, r4, r3
    2d48:	3140      	adds	r1, #64	; 0x40
    2d4a:	2030      	movs	r0, #48	; 0x30
    2d4c:	70c8      	strb	r0, [r1, #3]
    2d4e:	1c5a      	adds	r2, r3, #1
    2d50:	2145      	movs	r1, #69	; 0x45
    2d52:	5c61      	ldrb	r1, [r4, r1]
    2d54:	18a2      	adds	r2, r4, r2
    2d56:	3240      	adds	r2, #64	; 0x40
    2d58:	3302      	adds	r3, #2
    2d5a:	70d1      	strb	r1, [r2, #3]
    2d5c:	e7cc      	b.n	2cf8 <_printf_common+0x94>
    2d5e:	1ad3      	subs	r3, r2, r3
    2d60:	4499      	add	r9, r3
    2d62:	e7de      	b.n	2d22 <_printf_common+0xbe>
    2d64:	2000      	movs	r0, #0
    2d66:	e7bb      	b.n	2ce0 <_printf_common+0x7c>
    2d68:	1a8a      	subs	r2, r1, r2
    2d6a:	43d3      	mvns	r3, r2
    2d6c:	17db      	asrs	r3, r3, #31
    2d6e:	401a      	ands	r2, r3
    2d70:	4691      	mov	r9, r2
    2d72:	e7d2      	b.n	2d1a <_printf_common+0xb6>

00002d74 <_printf_i>:
    2d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d76:	4644      	mov	r4, r8
    2d78:	4656      	mov	r6, sl
    2d7a:	464d      	mov	r5, r9
    2d7c:	465f      	mov	r7, fp
    2d7e:	b4f0      	push	{r4, r5, r6, r7}
    2d80:	1c0c      	adds	r4, r1, #0
    2d82:	469a      	mov	sl, r3
    2d84:	7e23      	ldrb	r3, [r4, #24]
    2d86:	b087      	sub	sp, #28
    2d88:	3143      	adds	r1, #67	; 0x43
    2d8a:	4691      	mov	r9, r2
    2d8c:	4680      	mov	r8, r0
    2d8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    2d90:	9103      	str	r1, [sp, #12]
    2d92:	2b6e      	cmp	r3, #110	; 0x6e
    2d94:	d054      	beq.n	2e40 <_printf_i+0xcc>
    2d96:	d815      	bhi.n	2dc4 <_printf_i+0x50>
    2d98:	2b63      	cmp	r3, #99	; 0x63
    2d9a:	d100      	bne.n	2d9e <_printf_i+0x2a>
    2d9c:	e0d0      	b.n	2f40 <_printf_i+0x1cc>
    2d9e:	d900      	bls.n	2da2 <_printf_i+0x2e>
    2da0:	e0ba      	b.n	2f18 <_printf_i+0x1a4>
    2da2:	2b00      	cmp	r3, #0
    2da4:	d059      	beq.n	2e5a <_printf_i+0xe6>
    2da6:	2b58      	cmp	r3, #88	; 0x58
    2da8:	d000      	beq.n	2dac <_printf_i+0x38>
    2daa:	e0ed      	b.n	2f88 <_printf_i+0x214>
    2dac:	2145      	movs	r1, #69	; 0x45
    2dae:	5463      	strb	r3, [r4, r1]
    2db0:	498c      	ldr	r1, [pc, #560]	; (2fe4 <_printf_i+0x270>)
    2db2:	6823      	ldr	r3, [r4, #0]
    2db4:	468b      	mov	fp, r1
    2db6:	0619      	lsls	r1, r3, #24
    2db8:	d51a      	bpl.n	2df0 <_printf_i+0x7c>
    2dba:	6811      	ldr	r1, [r2, #0]
    2dbc:	1d08      	adds	r0, r1, #4
    2dbe:	6010      	str	r0, [r2, #0]
    2dc0:	680d      	ldr	r5, [r1, #0]
    2dc2:	e01b      	b.n	2dfc <_printf_i+0x88>
    2dc4:	2b73      	cmp	r3, #115	; 0x73
    2dc6:	d100      	bne.n	2dca <_printf_i+0x56>
    2dc8:	e0cf      	b.n	2f6a <_printf_i+0x1f6>
    2dca:	d900      	bls.n	2dce <_printf_i+0x5a>
    2dcc:	e07f      	b.n	2ece <_printf_i+0x15a>
    2dce:	2b6f      	cmp	r3, #111	; 0x6f
    2dd0:	d100      	bne.n	2dd4 <_printf_i+0x60>
    2dd2:	e0e0      	b.n	2f96 <_printf_i+0x222>
    2dd4:	2b70      	cmp	r3, #112	; 0x70
    2dd6:	d000      	beq.n	2dda <_printf_i+0x66>
    2dd8:	e0d6      	b.n	2f88 <_printf_i+0x214>
    2dda:	6821      	ldr	r1, [r4, #0]
    2ddc:	2320      	movs	r3, #32
    2dde:	430b      	orrs	r3, r1
    2de0:	6023      	str	r3, [r4, #0]
    2de2:	2145      	movs	r1, #69	; 0x45
    2de4:	2078      	movs	r0, #120	; 0x78
    2de6:	5460      	strb	r0, [r4, r1]
    2de8:	497f      	ldr	r1, [pc, #508]	; (2fe8 <_printf_i+0x274>)
    2dea:	468b      	mov	fp, r1
    2dec:	0619      	lsls	r1, r3, #24
    2dee:	d4e4      	bmi.n	2dba <_printf_i+0x46>
    2df0:	0659      	lsls	r1, r3, #25
    2df2:	d5e2      	bpl.n	2dba <_printf_i+0x46>
    2df4:	6811      	ldr	r1, [r2, #0]
    2df6:	1d08      	adds	r0, r1, #4
    2df8:	880d      	ldrh	r5, [r1, #0]
    2dfa:	6010      	str	r0, [r2, #0]
    2dfc:	07da      	lsls	r2, r3, #31
    2dfe:	d502      	bpl.n	2e06 <_printf_i+0x92>
    2e00:	2220      	movs	r2, #32
    2e02:	4313      	orrs	r3, r2
    2e04:	6023      	str	r3, [r4, #0]
    2e06:	2710      	movs	r7, #16
    2e08:	2d00      	cmp	r5, #0
    2e0a:	d103      	bne.n	2e14 <_printf_i+0xa0>
    2e0c:	6821      	ldr	r1, [r4, #0]
    2e0e:	2320      	movs	r3, #32
    2e10:	4399      	bics	r1, r3
    2e12:	6021      	str	r1, [r4, #0]
    2e14:	2200      	movs	r2, #0
    2e16:	2343      	movs	r3, #67	; 0x43
    2e18:	54e2      	strb	r2, [r4, r3]
    2e1a:	6863      	ldr	r3, [r4, #4]
    2e1c:	60a3      	str	r3, [r4, #8]
    2e1e:	2b00      	cmp	r3, #0
    2e20:	db5b      	blt.n	2eda <_printf_i+0x166>
    2e22:	6821      	ldr	r1, [r4, #0]
    2e24:	2204      	movs	r2, #4
    2e26:	4391      	bics	r1, r2
    2e28:	6021      	str	r1, [r4, #0]
    2e2a:	2d00      	cmp	r5, #0
    2e2c:	d158      	bne.n	2ee0 <_printf_i+0x16c>
    2e2e:	9e03      	ldr	r6, [sp, #12]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d154      	bne.n	2ede <_printf_i+0x16a>
    2e34:	2f08      	cmp	r7, #8
    2e36:	d064      	beq.n	2f02 <_printf_i+0x18e>
    2e38:	9903      	ldr	r1, [sp, #12]
    2e3a:	1b8b      	subs	r3, r1, r6
    2e3c:	6123      	str	r3, [r4, #16]
    2e3e:	e00f      	b.n	2e60 <_printf_i+0xec>
    2e40:	6823      	ldr	r3, [r4, #0]
    2e42:	0619      	lsls	r1, r3, #24
    2e44:	d500      	bpl.n	2e48 <_printf_i+0xd4>
    2e46:	e089      	b.n	2f5c <_printf_i+0x1e8>
    2e48:	0659      	lsls	r1, r3, #25
    2e4a:	d400      	bmi.n	2e4e <_printf_i+0xda>
    2e4c:	e086      	b.n	2f5c <_printf_i+0x1e8>
    2e4e:	6813      	ldr	r3, [r2, #0]
    2e50:	1d19      	adds	r1, r3, #4
    2e52:	6011      	str	r1, [r2, #0]
    2e54:	681b      	ldr	r3, [r3, #0]
    2e56:	6962      	ldr	r2, [r4, #20]
    2e58:	801a      	strh	r2, [r3, #0]
    2e5a:	2300      	movs	r3, #0
    2e5c:	9e03      	ldr	r6, [sp, #12]
    2e5e:	6123      	str	r3, [r4, #16]
    2e60:	4653      	mov	r3, sl
    2e62:	9300      	str	r3, [sp, #0]
    2e64:	4640      	mov	r0, r8
    2e66:	1c21      	adds	r1, r4, #0
    2e68:	aa05      	add	r2, sp, #20
    2e6a:	464b      	mov	r3, r9
    2e6c:	f7ff fefa 	bl	2c64 <_printf_common>
    2e70:	3001      	adds	r0, #1
    2e72:	d01f      	beq.n	2eb4 <_printf_i+0x140>
    2e74:	4640      	mov	r0, r8
    2e76:	4649      	mov	r1, r9
    2e78:	1c32      	adds	r2, r6, #0
    2e7a:	6923      	ldr	r3, [r4, #16]
    2e7c:	47d0      	blx	sl
    2e7e:	3001      	adds	r0, #1
    2e80:	d018      	beq.n	2eb4 <_printf_i+0x140>
    2e82:	6821      	ldr	r1, [r4, #0]
    2e84:	68e0      	ldr	r0, [r4, #12]
    2e86:	9b05      	ldr	r3, [sp, #20]
    2e88:	0789      	lsls	r1, r1, #30
    2e8a:	d51c      	bpl.n	2ec6 <_printf_i+0x152>
    2e8c:	1ac2      	subs	r2, r0, r3
    2e8e:	2a00      	cmp	r2, #0
    2e90:	dd19      	ble.n	2ec6 <_printf_i+0x152>
    2e92:	1c26      	adds	r6, r4, #0
    2e94:	3619      	adds	r6, #25
    2e96:	2500      	movs	r5, #0
    2e98:	e005      	b.n	2ea6 <_printf_i+0x132>
    2e9a:	68e0      	ldr	r0, [r4, #12]
    2e9c:	9b05      	ldr	r3, [sp, #20]
    2e9e:	3501      	adds	r5, #1
    2ea0:	1ac2      	subs	r2, r0, r3
    2ea2:	42aa      	cmp	r2, r5
    2ea4:	dd0f      	ble.n	2ec6 <_printf_i+0x152>
    2ea6:	4640      	mov	r0, r8
    2ea8:	4649      	mov	r1, r9
    2eaa:	1c32      	adds	r2, r6, #0
    2eac:	2301      	movs	r3, #1
    2eae:	47d0      	blx	sl
    2eb0:	3001      	adds	r0, #1
    2eb2:	d1f2      	bne.n	2e9a <_printf_i+0x126>
    2eb4:	2001      	movs	r0, #1
    2eb6:	4240      	negs	r0, r0
    2eb8:	b007      	add	sp, #28
    2eba:	bc3c      	pop	{r2, r3, r4, r5}
    2ebc:	4690      	mov	r8, r2
    2ebe:	4699      	mov	r9, r3
    2ec0:	46a2      	mov	sl, r4
    2ec2:	46ab      	mov	fp, r5
    2ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ec6:	4298      	cmp	r0, r3
    2ec8:	daf6      	bge.n	2eb8 <_printf_i+0x144>
    2eca:	1c18      	adds	r0, r3, #0
    2ecc:	e7f4      	b.n	2eb8 <_printf_i+0x144>
    2ece:	2b75      	cmp	r3, #117	; 0x75
    2ed0:	d061      	beq.n	2f96 <_printf_i+0x222>
    2ed2:	2b78      	cmp	r3, #120	; 0x78
    2ed4:	d158      	bne.n	2f88 <_printf_i+0x214>
    2ed6:	6823      	ldr	r3, [r4, #0]
    2ed8:	e783      	b.n	2de2 <_printf_i+0x6e>
    2eda:	2d00      	cmp	r5, #0
    2edc:	d100      	bne.n	2ee0 <_printf_i+0x16c>
    2ede:	2500      	movs	r5, #0
    2ee0:	9e03      	ldr	r6, [sp, #12]
    2ee2:	1c28      	adds	r0, r5, #0
    2ee4:	1c39      	adds	r1, r7, #0
    2ee6:	f7fe fbe7 	bl	16b8 <__aeabi_uidivmod>
    2eea:	465a      	mov	r2, fp
    2eec:	5c53      	ldrb	r3, [r2, r1]
    2eee:	3e01      	subs	r6, #1
    2ef0:	1c28      	adds	r0, r5, #0
    2ef2:	7033      	strb	r3, [r6, #0]
    2ef4:	1c39      	adds	r1, r7, #0
    2ef6:	f7fe fb9b 	bl	1630 <__aeabi_uidiv>
    2efa:	1e05      	subs	r5, r0, #0
    2efc:	d1f1      	bne.n	2ee2 <_printf_i+0x16e>
    2efe:	2f08      	cmp	r7, #8
    2f00:	d19a      	bne.n	2e38 <_printf_i+0xc4>
    2f02:	6823      	ldr	r3, [r4, #0]
    2f04:	07db      	lsls	r3, r3, #31
    2f06:	d597      	bpl.n	2e38 <_printf_i+0xc4>
    2f08:	6861      	ldr	r1, [r4, #4]
    2f0a:	6922      	ldr	r2, [r4, #16]
    2f0c:	4291      	cmp	r1, r2
    2f0e:	dc93      	bgt.n	2e38 <_printf_i+0xc4>
    2f10:	3e01      	subs	r6, #1
    2f12:	2330      	movs	r3, #48	; 0x30
    2f14:	7033      	strb	r3, [r6, #0]
    2f16:	e78f      	b.n	2e38 <_printf_i+0xc4>
    2f18:	2b64      	cmp	r3, #100	; 0x64
    2f1a:	d001      	beq.n	2f20 <_printf_i+0x1ac>
    2f1c:	2b69      	cmp	r3, #105	; 0x69
    2f1e:	d133      	bne.n	2f88 <_printf_i+0x214>
    2f20:	6823      	ldr	r3, [r4, #0]
    2f22:	0619      	lsls	r1, r3, #24
    2f24:	d401      	bmi.n	2f2a <_printf_i+0x1b6>
    2f26:	0659      	lsls	r1, r3, #25
    2f28:	d44c      	bmi.n	2fc4 <_printf_i+0x250>
    2f2a:	6813      	ldr	r3, [r2, #0]
    2f2c:	1d19      	adds	r1, r3, #4
    2f2e:	681b      	ldr	r3, [r3, #0]
    2f30:	6011      	str	r1, [r2, #0]
    2f32:	1c1d      	adds	r5, r3, #0
    2f34:	2b00      	cmp	r3, #0
    2f36:	db4c      	blt.n	2fd2 <_printf_i+0x25e>
    2f38:	4b2a      	ldr	r3, [pc, #168]	; (2fe4 <_printf_i+0x270>)
    2f3a:	270a      	movs	r7, #10
    2f3c:	469b      	mov	fp, r3
    2f3e:	e76c      	b.n	2e1a <_printf_i+0xa6>
    2f40:	6813      	ldr	r3, [r2, #0]
    2f42:	1c26      	adds	r6, r4, #0
    2f44:	1d19      	adds	r1, r3, #4
    2f46:	6011      	str	r1, [r2, #0]
    2f48:	681a      	ldr	r2, [r3, #0]
    2f4a:	2342      	movs	r3, #66	; 0x42
    2f4c:	54e2      	strb	r2, [r4, r3]
    2f4e:	2301      	movs	r3, #1
    2f50:	3642      	adds	r6, #66	; 0x42
    2f52:	6123      	str	r3, [r4, #16]
    2f54:	2200      	movs	r2, #0
    2f56:	2343      	movs	r3, #67	; 0x43
    2f58:	54e2      	strb	r2, [r4, r3]
    2f5a:	e781      	b.n	2e60 <_printf_i+0xec>
    2f5c:	6813      	ldr	r3, [r2, #0]
    2f5e:	1d19      	adds	r1, r3, #4
    2f60:	6011      	str	r1, [r2, #0]
    2f62:	681b      	ldr	r3, [r3, #0]
    2f64:	6962      	ldr	r2, [r4, #20]
    2f66:	601a      	str	r2, [r3, #0]
    2f68:	e777      	b.n	2e5a <_printf_i+0xe6>
    2f6a:	6813      	ldr	r3, [r2, #0]
    2f6c:	1d19      	adds	r1, r3, #4
    2f6e:	6011      	str	r1, [r2, #0]
    2f70:	681e      	ldr	r6, [r3, #0]
    2f72:	1c30      	adds	r0, r6, #0
    2f74:	f7fe fdda 	bl	1b2c <strlen>
    2f78:	6863      	ldr	r3, [r4, #4]
    2f7a:	6120      	str	r0, [r4, #16]
    2f7c:	4298      	cmp	r0, r3
    2f7e:	d901      	bls.n	2f84 <_printf_i+0x210>
    2f80:	6123      	str	r3, [r4, #16]
    2f82:	1c18      	adds	r0, r3, #0
    2f84:	6060      	str	r0, [r4, #4]
    2f86:	e7e5      	b.n	2f54 <_printf_i+0x1e0>
    2f88:	2242      	movs	r2, #66	; 0x42
    2f8a:	54a3      	strb	r3, [r4, r2]
    2f8c:	1c26      	adds	r6, r4, #0
    2f8e:	2301      	movs	r3, #1
    2f90:	3642      	adds	r6, #66	; 0x42
    2f92:	6123      	str	r3, [r4, #16]
    2f94:	e7de      	b.n	2f54 <_printf_i+0x1e0>
    2f96:	6823      	ldr	r3, [r4, #0]
    2f98:	0619      	lsls	r1, r3, #24
    2f9a:	d401      	bmi.n	2fa0 <_printf_i+0x22c>
    2f9c:	0659      	lsls	r1, r3, #25
    2f9e:	d40c      	bmi.n	2fba <_printf_i+0x246>
    2fa0:	6813      	ldr	r3, [r2, #0]
    2fa2:	1d19      	adds	r1, r3, #4
    2fa4:	681d      	ldr	r5, [r3, #0]
    2fa6:	6011      	str	r1, [r2, #0]
    2fa8:	4a0e      	ldr	r2, [pc, #56]	; (2fe4 <_printf_i+0x270>)
    2faa:	7e23      	ldrb	r3, [r4, #24]
    2fac:	4693      	mov	fp, r2
    2fae:	2708      	movs	r7, #8
    2fb0:	2b6f      	cmp	r3, #111	; 0x6f
    2fb2:	d100      	bne.n	2fb6 <_printf_i+0x242>
    2fb4:	e72e      	b.n	2e14 <_printf_i+0xa0>
    2fb6:	270a      	movs	r7, #10
    2fb8:	e72c      	b.n	2e14 <_printf_i+0xa0>
    2fba:	6813      	ldr	r3, [r2, #0]
    2fbc:	1d19      	adds	r1, r3, #4
    2fbe:	6011      	str	r1, [r2, #0]
    2fc0:	881d      	ldrh	r5, [r3, #0]
    2fc2:	e7f1      	b.n	2fa8 <_printf_i+0x234>
    2fc4:	6813      	ldr	r3, [r2, #0]
    2fc6:	1d19      	adds	r1, r3, #4
    2fc8:	6011      	str	r1, [r2, #0]
    2fca:	2200      	movs	r2, #0
    2fcc:	5e9d      	ldrsh	r5, [r3, r2]
    2fce:	1c2b      	adds	r3, r5, #0
    2fd0:	e7b0      	b.n	2f34 <_printf_i+0x1c0>
    2fd2:	2343      	movs	r3, #67	; 0x43
    2fd4:	222d      	movs	r2, #45	; 0x2d
    2fd6:	54e2      	strb	r2, [r4, r3]
    2fd8:	4b02      	ldr	r3, [pc, #8]	; (2fe4 <_printf_i+0x270>)
    2fda:	426d      	negs	r5, r5
    2fdc:	469b      	mov	fp, r3
    2fde:	270a      	movs	r7, #10
    2fe0:	e71b      	b.n	2e1a <_printf_i+0xa6>
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	000032fc 	.word	0x000032fc
    2fe8:	00003310 	.word	0x00003310

00002fec <_write_r>:
    2fec:	b570      	push	{r4, r5, r6, lr}
    2fee:	4c08      	ldr	r4, [pc, #32]	; (3010 <_write_r+0x24>)
    2ff0:	1c06      	adds	r6, r0, #0
    2ff2:	2500      	movs	r5, #0
    2ff4:	1c08      	adds	r0, r1, #0
    2ff6:	1c11      	adds	r1, r2, #0
    2ff8:	1c1a      	adds	r2, r3, #0
    2ffa:	6025      	str	r5, [r4, #0]
    2ffc:	f7fd fadc 	bl	5b8 <_write>
    3000:	1c43      	adds	r3, r0, #1
    3002:	d000      	beq.n	3006 <_write_r+0x1a>
    3004:	bd70      	pop	{r4, r5, r6, pc}
    3006:	6823      	ldr	r3, [r4, #0]
    3008:	2b00      	cmp	r3, #0
    300a:	d0fb      	beq.n	3004 <_write_r+0x18>
    300c:	6033      	str	r3, [r6, #0]
    300e:	e7f9      	b.n	3004 <_write_r+0x18>
    3010:	200001a4 	.word	0x200001a4

00003014 <_close_r>:
    3014:	b538      	push	{r3, r4, r5, lr}
    3016:	4c07      	ldr	r4, [pc, #28]	; (3034 <_close_r+0x20>)
    3018:	2300      	movs	r3, #0
    301a:	1c05      	adds	r5, r0, #0
    301c:	1c08      	adds	r0, r1, #0
    301e:	6023      	str	r3, [r4, #0]
    3020:	f7fe f8f4 	bl	120c <_close>
    3024:	1c43      	adds	r3, r0, #1
    3026:	d000      	beq.n	302a <_close_r+0x16>
    3028:	bd38      	pop	{r3, r4, r5, pc}
    302a:	6823      	ldr	r3, [r4, #0]
    302c:	2b00      	cmp	r3, #0
    302e:	d0fb      	beq.n	3028 <_close_r+0x14>
    3030:	602b      	str	r3, [r5, #0]
    3032:	e7f9      	b.n	3028 <_close_r+0x14>
    3034:	200001a4 	.word	0x200001a4

00003038 <_fstat_r>:
    3038:	b538      	push	{r3, r4, r5, lr}
    303a:	4c08      	ldr	r4, [pc, #32]	; (305c <_fstat_r+0x24>)
    303c:	2300      	movs	r3, #0
    303e:	1c05      	adds	r5, r0, #0
    3040:	1c08      	adds	r0, r1, #0
    3042:	1c11      	adds	r1, r2, #0
    3044:	6023      	str	r3, [r4, #0]
    3046:	f7fe f8e5 	bl	1214 <_fstat>
    304a:	1c43      	adds	r3, r0, #1
    304c:	d000      	beq.n	3050 <_fstat_r+0x18>
    304e:	bd38      	pop	{r3, r4, r5, pc}
    3050:	6823      	ldr	r3, [r4, #0]
    3052:	2b00      	cmp	r3, #0
    3054:	d0fb      	beq.n	304e <_fstat_r+0x16>
    3056:	602b      	str	r3, [r5, #0]
    3058:	e7f9      	b.n	304e <_fstat_r+0x16>
    305a:	46c0      	nop			; (mov r8, r8)
    305c:	200001a4 	.word	0x200001a4

00003060 <_isatty_r>:
    3060:	b538      	push	{r3, r4, r5, lr}
    3062:	4c07      	ldr	r4, [pc, #28]	; (3080 <_isatty_r+0x20>)
    3064:	2300      	movs	r3, #0
    3066:	1c05      	adds	r5, r0, #0
    3068:	1c08      	adds	r0, r1, #0
    306a:	6023      	str	r3, [r4, #0]
    306c:	f7fe f8d8 	bl	1220 <_isatty>
    3070:	1c43      	adds	r3, r0, #1
    3072:	d000      	beq.n	3076 <_isatty_r+0x16>
    3074:	bd38      	pop	{r3, r4, r5, pc}
    3076:	6823      	ldr	r3, [r4, #0]
    3078:	2b00      	cmp	r3, #0
    307a:	d0fb      	beq.n	3074 <_isatty_r+0x14>
    307c:	602b      	str	r3, [r5, #0]
    307e:	e7f9      	b.n	3074 <_isatty_r+0x14>
    3080:	200001a4 	.word	0x200001a4

00003084 <_lseek_r>:
    3084:	b570      	push	{r4, r5, r6, lr}
    3086:	4c08      	ldr	r4, [pc, #32]	; (30a8 <_lseek_r+0x24>)
    3088:	1c06      	adds	r6, r0, #0
    308a:	2500      	movs	r5, #0
    308c:	1c08      	adds	r0, r1, #0
    308e:	1c11      	adds	r1, r2, #0
    3090:	1c1a      	adds	r2, r3, #0
    3092:	6025      	str	r5, [r4, #0]
    3094:	f7fe f8c6 	bl	1224 <_lseek>
    3098:	1c43      	adds	r3, r0, #1
    309a:	d000      	beq.n	309e <_lseek_r+0x1a>
    309c:	bd70      	pop	{r4, r5, r6, pc}
    309e:	6823      	ldr	r3, [r4, #0]
    30a0:	2b00      	cmp	r3, #0
    30a2:	d0fb      	beq.n	309c <_lseek_r+0x18>
    30a4:	6033      	str	r3, [r6, #0]
    30a6:	e7f9      	b.n	309c <_lseek_r+0x18>
    30a8:	200001a4 	.word	0x200001a4

000030ac <_malloc_usable_size_r>:
    30ac:	3904      	subs	r1, #4
    30ae:	680b      	ldr	r3, [r1, #0]
    30b0:	1f18      	subs	r0, r3, #4
    30b2:	2b00      	cmp	r3, #0
    30b4:	db00      	blt.n	30b8 <_malloc_usable_size_r+0xc>
    30b6:	4770      	bx	lr
    30b8:	58c8      	ldr	r0, [r1, r3]
    30ba:	181b      	adds	r3, r3, r0
    30bc:	1f18      	subs	r0, r3, #4
    30be:	e7fa      	b.n	30b6 <_malloc_usable_size_r+0xa>

000030c0 <_read_r>:
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	4c08      	ldr	r4, [pc, #32]	; (30e4 <_read_r+0x24>)
    30c4:	1c06      	adds	r6, r0, #0
    30c6:	2500      	movs	r5, #0
    30c8:	1c08      	adds	r0, r1, #0
    30ca:	1c11      	adds	r1, r2, #0
    30cc:	1c1a      	adds	r2, r3, #0
    30ce:	6025      	str	r5, [r4, #0]
    30d0:	f7fd fa50 	bl	574 <_read>
    30d4:	1c43      	adds	r3, r0, #1
    30d6:	d000      	beq.n	30da <_read_r+0x1a>
    30d8:	bd70      	pop	{r4, r5, r6, pc}
    30da:	6823      	ldr	r3, [r4, #0]
    30dc:	2b00      	cmp	r3, #0
    30de:	d0fb      	beq.n	30d8 <_read_r+0x18>
    30e0:	6033      	str	r3, [r6, #0]
    30e2:	e7f9      	b.n	30d8 <_read_r+0x18>
    30e4:	200001a4 	.word	0x200001a4

000030e8 <__aeabi_idiv>:
    30e8:	2900      	cmp	r1, #0
    30ea:	d041      	beq.n	3170 <.divsi3_skip_div0_test+0x84>

000030ec <.divsi3_skip_div0_test>:
    30ec:	b410      	push	{r4}
    30ee:	1c04      	adds	r4, r0, #0
    30f0:	404c      	eors	r4, r1
    30f2:	46a4      	mov	ip, r4
    30f4:	2301      	movs	r3, #1
    30f6:	2200      	movs	r2, #0
    30f8:	2900      	cmp	r1, #0
    30fa:	d500      	bpl.n	30fe <.divsi3_skip_div0_test+0x12>
    30fc:	4249      	negs	r1, r1
    30fe:	2800      	cmp	r0, #0
    3100:	d500      	bpl.n	3104 <.divsi3_skip_div0_test+0x18>
    3102:	4240      	negs	r0, r0
    3104:	4288      	cmp	r0, r1
    3106:	d32c      	bcc.n	3162 <.divsi3_skip_div0_test+0x76>
    3108:	2401      	movs	r4, #1
    310a:	0724      	lsls	r4, r4, #28
    310c:	42a1      	cmp	r1, r4
    310e:	d204      	bcs.n	311a <.divsi3_skip_div0_test+0x2e>
    3110:	4281      	cmp	r1, r0
    3112:	d202      	bcs.n	311a <.divsi3_skip_div0_test+0x2e>
    3114:	0109      	lsls	r1, r1, #4
    3116:	011b      	lsls	r3, r3, #4
    3118:	e7f8      	b.n	310c <.divsi3_skip_div0_test+0x20>
    311a:	00e4      	lsls	r4, r4, #3
    311c:	42a1      	cmp	r1, r4
    311e:	d204      	bcs.n	312a <.divsi3_skip_div0_test+0x3e>
    3120:	4281      	cmp	r1, r0
    3122:	d202      	bcs.n	312a <.divsi3_skip_div0_test+0x3e>
    3124:	0049      	lsls	r1, r1, #1
    3126:	005b      	lsls	r3, r3, #1
    3128:	e7f8      	b.n	311c <.divsi3_skip_div0_test+0x30>
    312a:	4288      	cmp	r0, r1
    312c:	d301      	bcc.n	3132 <.divsi3_skip_div0_test+0x46>
    312e:	1a40      	subs	r0, r0, r1
    3130:	431a      	orrs	r2, r3
    3132:	084c      	lsrs	r4, r1, #1
    3134:	42a0      	cmp	r0, r4
    3136:	d302      	bcc.n	313e <.divsi3_skip_div0_test+0x52>
    3138:	1b00      	subs	r0, r0, r4
    313a:	085c      	lsrs	r4, r3, #1
    313c:	4322      	orrs	r2, r4
    313e:	088c      	lsrs	r4, r1, #2
    3140:	42a0      	cmp	r0, r4
    3142:	d302      	bcc.n	314a <.divsi3_skip_div0_test+0x5e>
    3144:	1b00      	subs	r0, r0, r4
    3146:	089c      	lsrs	r4, r3, #2
    3148:	4322      	orrs	r2, r4
    314a:	08cc      	lsrs	r4, r1, #3
    314c:	42a0      	cmp	r0, r4
    314e:	d302      	bcc.n	3156 <.divsi3_skip_div0_test+0x6a>
    3150:	1b00      	subs	r0, r0, r4
    3152:	08dc      	lsrs	r4, r3, #3
    3154:	4322      	orrs	r2, r4
    3156:	2800      	cmp	r0, #0
    3158:	d003      	beq.n	3162 <.divsi3_skip_div0_test+0x76>
    315a:	091b      	lsrs	r3, r3, #4
    315c:	d001      	beq.n	3162 <.divsi3_skip_div0_test+0x76>
    315e:	0909      	lsrs	r1, r1, #4
    3160:	e7e3      	b.n	312a <.divsi3_skip_div0_test+0x3e>
    3162:	1c10      	adds	r0, r2, #0
    3164:	4664      	mov	r4, ip
    3166:	2c00      	cmp	r4, #0
    3168:	d500      	bpl.n	316c <.divsi3_skip_div0_test+0x80>
    316a:	4240      	negs	r0, r0
    316c:	bc10      	pop	{r4}
    316e:	4770      	bx	lr
    3170:	2800      	cmp	r0, #0
    3172:	d006      	beq.n	3182 <.divsi3_skip_div0_test+0x96>
    3174:	db03      	blt.n	317e <.divsi3_skip_div0_test+0x92>
    3176:	2000      	movs	r0, #0
    3178:	43c0      	mvns	r0, r0
    317a:	0840      	lsrs	r0, r0, #1
    317c:	e001      	b.n	3182 <.divsi3_skip_div0_test+0x96>
    317e:	2080      	movs	r0, #128	; 0x80
    3180:	0600      	lsls	r0, r0, #24
    3182:	b407      	push	{r0, r1, r2}
    3184:	4802      	ldr	r0, [pc, #8]	; (3190 <.divsi3_skip_div0_test+0xa4>)
    3186:	a102      	add	r1, pc, #8	; (adr r1, 3190 <.divsi3_skip_div0_test+0xa4>)
    3188:	1840      	adds	r0, r0, r1
    318a:	9002      	str	r0, [sp, #8]
    318c:	bd03      	pop	{r0, r1, pc}
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	ffffe53d 	.word	0xffffe53d

00003194 <__aeabi_idivmod>:
    3194:	2900      	cmp	r1, #0
    3196:	d0eb      	beq.n	3170 <.divsi3_skip_div0_test+0x84>
    3198:	b503      	push	{r0, r1, lr}
    319a:	f7ff ffa7 	bl	30ec <.divsi3_skip_div0_test>
    319e:	bc0e      	pop	{r1, r2, r3}
    31a0:	4342      	muls	r2, r0
    31a2:	1a89      	subs	r1, r1, r2
    31a4:	4718      	bx	r3
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	42000800 	.word	0x42000800
    31ac:	42000c00 	.word	0x42000c00
    31b0:	42001000 	.word	0x42001000
    31b4:	42001400 	.word	0x42001400
    31b8:	42001800 	.word	0x42001800
    31bc:	42001c00 	.word	0x42001c00
    31c0:	0a090807 	.word	0x0a090807
    31c4:	00000c0b 	.word	0x00000c0b
    31c8:	00000c44 	.word	0x00000c44
    31cc:	00000c8e 	.word	0x00000c8e
    31d0:	00000c8e 	.word	0x00000c8e
    31d4:	00000c3e 	.word	0x00000c3e
    31d8:	00000c3e 	.word	0x00000c3e
    31dc:	00000c5a 	.word	0x00000c5a
    31e0:	00000c4a 	.word	0x00000c4a
    31e4:	00000c60 	.word	0x00000c60
    31e8:	00000d18 	.word	0x00000d18
    31ec:	00000d6c 	.word	0x00000d6c
    31f0:	00000d6c 	.word	0x00000d6c
    31f4:	00000cf8 	.word	0x00000cf8
    31f8:	00000d0a 	.word	0x00000d0a
    31fc:	00000d28 	.word	0x00000d28
    3200:	00000cfc 	.word	0x00000cfc
    3204:	00000d38 	.word	0x00000d38
    3208:	48540a0d 	.word	0x48540a0d
    320c:	59205349 	.word	0x59205349
    3210:	4320554f 	.word	0x4320554f
    3214:	53204e41 	.word	0x53204e41
    3218:	6d204545 	.word	0x6d204545
    321c:	736e6165 	.word	0x736e6165
    3220:	44545320 	.word	0x44545320
    3224:	43204f49 	.word	0x43204f49
    3228:	69666e6f 	.word	0x69666e6f
    322c:	65727567 	.word	0x65727567
    3230:	6f727020 	.word	0x6f727020
    3234:	6c726570 	.word	0x6c726570
    3238:	21212179 	.word	0x21212179
    323c:	0000000d 	.word	0x0000000d
    3240:	6f430a0d 	.word	0x6f430a0d
    3244:	6769666e 	.word	0x6769666e
    3248:	74617275 	.word	0x74617275
    324c:	736e6f69 	.word	0x736e6f69
    3250:	4e4f4420 	.word	0x4e4f4420
    3254:	21212145 	.word	0x21212145
    3258:	00000a0d 	.word	0x00000a0d
    325c:	43303130 	.word	0x43303130
    3260:	00000000 	.word	0x00000000
    3264:	65520a0d 	.word	0x65520a0d
    3268:	76656963 	.word	0x76656963
    326c:	66206465 	.word	0x66206465
    3270:	206d6f72 	.word	0x206d6f72
    3274:	3a4e5453 	.word	0x3a4e5453
    3278:	0d732520 	.word	0x0d732520
    327c:	0000000a 	.word	0x0000000a

00003280 <_global_impure_ptr>:
    3280:	2000000c 00000043 2b302d23 00000020     ... C...#-0+ ...
    3290:	004c6c68 45676665 00004746              hlL.efgEFG..

0000329c <__sf_fake_stderr>:
	...

000032bc <__sf_fake_stdout>:
	...

000032dc <__sf_fake_stdin>:
	...
    32fc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    330c:	00000000 33323130 37363534 62613938     ....0123456789ab
    331c:	66656463 00000000                       cdef....

00003324 <_init>:
    3324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3326:	46c0      	nop			; (mov r8, r8)
    3328:	bcf8      	pop	{r3, r4, r5, r6, r7}
    332a:	bc08      	pop	{r3}
    332c:	469e      	mov	lr, r3
    332e:	4770      	bx	lr

00003330 <__init_array_start>:
    3330:	00000125 	.word	0x00000125

00003334 <_fini>:
    3334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3336:	46c0      	nop			; (mov r8, r8)
    3338:	bcf8      	pop	{r3, r4, r5, r6, r7}
    333a:	bc08      	pop	{r3}
    333c:	469e      	mov	lr, r3
    333e:	4770      	bx	lr

00003340 <__fini_array_start>:
    3340:	000000f9 	.word	0x000000f9
