
SAMD20STN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002be4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002be4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000070  00002c54  00010070  2**2
                  ALLOC
  3 .stack        00002004  20000214  00002df8  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00014694  00000000  00000000  000100f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002656  00000000  00000000  00024787  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003ff0  00000000  00000000  00026ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000478  00000000  00000000  0002adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000004a0  00000000  00000000  0002b245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012128  00000000  00000000  0002b6e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009bd0  00000000  00000000  0003d80d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005b2bb  00000000  00000000  000473dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011b8  00000000  00000000  000a2698  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002218 	.word	0x20002218
       4:	00001151 	.word	0x00001151
       8:	0000114d 	.word	0x0000114d
       c:	0000114d 	.word	0x0000114d
	...
      2c:	0000114d 	.word	0x0000114d
	...
      38:	0000114d 	.word	0x0000114d
      3c:	0000114d 	.word	0x0000114d
      40:	0000114d 	.word	0x0000114d
      44:	0000114d 	.word	0x0000114d
      48:	0000114d 	.word	0x0000114d
      4c:	0000114d 	.word	0x0000114d
      50:	0000114d 	.word	0x0000114d
      54:	0000114d 	.word	0x0000114d
      58:	0000114d 	.word	0x0000114d
      5c:	00000ae9 	.word	0x00000ae9
      60:	00000af9 	.word	0x00000af9
      64:	00000b09 	.word	0x00000b09
      68:	00000b19 	.word	0x00000b19
      6c:	00000b29 	.word	0x00000b29
      70:	00000b39 	.word	0x00000b39
      74:	0000114d 	.word	0x0000114d
      78:	0000114d 	.word	0x0000114d
      7c:	0000114d 	.word	0x0000114d
      80:	0000114d 	.word	0x0000114d
      84:	0000114d 	.word	0x0000114d
      88:	0000114d 	.word	0x0000114d
      8c:	0000114d 	.word	0x0000114d
      90:	0000114d 	.word	0x0000114d
      94:	0000114d 	.word	0x0000114d
      98:	0000114d 	.word	0x0000114d
      9c:	0000114d 	.word	0x0000114d
      a0:	0000114d 	.word	0x0000114d

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000070 	.word	0x20000070
      c4:	00000000 	.word	0x00000000
      c8:	00002be4 	.word	0x00002be4

000000cc <frame_dummy>:
      cc:	b508      	push	{r3, lr}
      ce:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4807      	ldr	r0, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4908      	ldr	r1, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x20>
      e4:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e6:	2b00      	cmp	r3, #0
      e8:	d000      	beq.n	ec <frame_dummy+0x20>
      ea:	4798      	blx	r3
      ec:	bd08      	pop	{r3, pc}
      ee:	46c0      	nop			; (mov r8, r8)
      f0:	00000000 	.word	0x00000000
      f4:	00002be4 	.word	0x00002be4
      f8:	20000074 	.word	0x20000074
      fc:	00002be4 	.word	0x00002be4
     100:	00000000 	.word	0x00000000

00000104 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     104:	b500      	push	{lr}
     106:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     108:	ab01      	add	r3, sp, #4
     10a:	2280      	movs	r2, #128	; 0x80
     10c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     10e:	780a      	ldrb	r2, [r1, #0]
     110:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     112:	784a      	ldrb	r2, [r1, #1]
     114:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     116:	788a      	ldrb	r2, [r1, #2]
     118:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     11a:	1c19      	adds	r1, r3, #0
     11c:	4b01      	ldr	r3, [pc, #4]	; (124 <port_pin_set_config+0x20>)
     11e:	4798      	blx	r3
}
     120:	b003      	add	sp, #12
     122:	bd00      	pop	{pc}
     124:	000010f9 	.word	0x000010f9

00000128 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     128:	b510      	push	{r4, lr}
     12a:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     12c:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     12e:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     130:	4299      	cmp	r1, r3
     132:	d30c      	bcc.n	14e <_sercom_get_sync_baud_val+0x26>
     134:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     136:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     138:	1c60      	adds	r0, r4, #1
     13a:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     13c:	428b      	cmp	r3, r1
     13e:	d801      	bhi.n	144 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     140:	1c04      	adds	r4, r0, #0
     142:	e7f8      	b.n	136 <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     144:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     146:	2cff      	cmp	r4, #255	; 0xff
     148:	d801      	bhi.n	14e <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     14a:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     14c:	2000      	movs	r0, #0
	}
}
     14e:	bd10      	pop	{r4, pc}

00000150 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     150:	b5f0      	push	{r4, r5, r6, r7, lr}
     152:	465f      	mov	r7, fp
     154:	4656      	mov	r6, sl
     156:	464d      	mov	r5, r9
     158:	4644      	mov	r4, r8
     15a:	b4f0      	push	{r4, r5, r6, r7}
     15c:	b087      	sub	sp, #28
     15e:	1c06      	adds	r6, r0, #0
     160:	1c0d      	adds	r5, r1, #0
     162:	9204      	str	r2, [sp, #16]
     164:	aa10      	add	r2, sp, #64	; 0x40
     166:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     168:	1c32      	adds	r2, r6, #0
     16a:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     16c:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     16e:	428a      	cmp	r2, r1
     170:	d900      	bls.n	174 <_sercom_get_async_baud_val+0x24>
     172:	e0b3      	b.n	2dc <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     174:	2b00      	cmp	r3, #0
     176:	d14b      	bne.n	210 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     178:	2100      	movs	r1, #0
     17a:	1c32      	adds	r2, r6, #0
     17c:	4c5e      	ldr	r4, [pc, #376]	; (2f8 <_sercom_get_async_baud_val+0x1a8>)
     17e:	47a0      	blx	r4
     180:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     182:	1c2e      	adds	r6, r5, #0
     184:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     186:	2000      	movs	r0, #0
     188:	2100      	movs	r1, #0
     18a:	2200      	movs	r2, #0
     18c:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     18e:	243f      	movs	r4, #63	; 0x3f
     190:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     192:	2501      	movs	r5, #1
     194:	46a8      	mov	r8, r5
     196:	9002      	str	r0, [sp, #8]
     198:	9103      	str	r1, [sp, #12]
     19a:	4661      	mov	r1, ip
     19c:	3920      	subs	r1, #32
     19e:	d403      	bmi.n	1a8 <_sercom_get_async_baud_val+0x58>
     1a0:	4640      	mov	r0, r8
     1a2:	4088      	lsls	r0, r1
     1a4:	4681      	mov	r9, r0
     1a6:	e005      	b.n	1b4 <_sercom_get_async_baud_val+0x64>
     1a8:	2120      	movs	r1, #32
     1aa:	4665      	mov	r5, ip
     1ac:	1b4c      	subs	r4, r1, r5
     1ae:	4640      	mov	r0, r8
     1b0:	40e0      	lsrs	r0, r4
     1b2:	4681      	mov	r9, r0
     1b4:	4641      	mov	r1, r8
     1b6:	4664      	mov	r4, ip
     1b8:	40a1      	lsls	r1, r4
     1ba:	468a      	mov	sl, r1

		r = r << 1;
     1bc:	1c10      	adds	r0, r2, #0
     1be:	1c19      	adds	r1, r3, #0
     1c0:	1880      	adds	r0, r0, r2
     1c2:	4159      	adcs	r1, r3
     1c4:	1c02      	adds	r2, r0, #0
     1c6:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     1c8:	465d      	mov	r5, fp
     1ca:	464c      	mov	r4, r9
     1cc:	4225      	tst	r5, r4
     1ce:	d002      	beq.n	1d6 <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     1d0:	4642      	mov	r2, r8
     1d2:	4302      	orrs	r2, r0
     1d4:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     1d6:	429f      	cmp	r7, r3
     1d8:	d80c      	bhi.n	1f4 <_sercom_get_async_baud_val+0xa4>
     1da:	d101      	bne.n	1e0 <_sercom_get_async_baud_val+0x90>
     1dc:	4296      	cmp	r6, r2
     1de:	d809      	bhi.n	1f4 <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     1e0:	1b92      	subs	r2, r2, r6
     1e2:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     1e4:	4650      	mov	r0, sl
     1e6:	9d02      	ldr	r5, [sp, #8]
     1e8:	4328      	orrs	r0, r5
     1ea:	4649      	mov	r1, r9
     1ec:	9c03      	ldr	r4, [sp, #12]
     1ee:	4321      	orrs	r1, r4
     1f0:	9002      	str	r0, [sp, #8]
     1f2:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     1f4:	4665      	mov	r5, ip
     1f6:	3d01      	subs	r5, #1
     1f8:	46ac      	mov	ip, r5
     1fa:	d2ce      	bcs.n	19a <_sercom_get_async_baud_val+0x4a>
     1fc:	9802      	ldr	r0, [sp, #8]
     1fe:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     200:	4b3c      	ldr	r3, [pc, #240]	; (2f4 <_sercom_get_async_baud_val+0x1a4>)
     202:	4a3b      	ldr	r2, [pc, #236]	; (2f0 <_sercom_get_async_baud_val+0x1a0>)
     204:	1a12      	subs	r2, r2, r0
     206:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     208:	0c12      	lsrs	r2, r2, #16
     20a:	041b      	lsls	r3, r3, #16
     20c:	431a      	orrs	r2, r3
     20e:	e062      	b.n	2d6 <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     210:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     212:	2b01      	cmp	r3, #1
     214:	d15f      	bne.n	2d6 <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     216:	0f4f      	lsrs	r7, r1, #29
     218:	46b9      	mov	r9, r7
     21a:	00cd      	lsls	r5, r1, #3
     21c:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     21e:	2100      	movs	r1, #0
     220:	1c32      	adds	r2, r6, #0
     222:	2300      	movs	r3, #0
     224:	4c34      	ldr	r4, [pc, #208]	; (2f8 <_sercom_get_async_baud_val+0x1a8>)
     226:	47a0      	blx	r4
     228:	1c06      	adds	r6, r0, #0
     22a:	1c0f      	adds	r7, r1, #0
     22c:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     22e:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     230:	9602      	str	r6, [sp, #8]
     232:	9703      	str	r7, [sp, #12]
     234:	469a      	mov	sl, r3
     236:	4650      	mov	r0, sl
     238:	b2c0      	uxtb	r0, r0
     23a:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     23c:	2100      	movs	r1, #0
     23e:	4688      	mov	r8, r1
     240:	2200      	movs	r2, #0
     242:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     244:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     246:	1c27      	adds	r7, r4, #0
     248:	3f20      	subs	r7, #32
     24a:	d403      	bmi.n	254 <_sercom_get_async_baud_val+0x104>
     24c:	1c2e      	adds	r6, r5, #0
     24e:	40be      	lsls	r6, r7
     250:	9601      	str	r6, [sp, #4]
     252:	e004      	b.n	25e <_sercom_get_async_baud_val+0x10e>
     254:	2020      	movs	r0, #32
     256:	1b07      	subs	r7, r0, r4
     258:	1c29      	adds	r1, r5, #0
     25a:	40f9      	lsrs	r1, r7
     25c:	9101      	str	r1, [sp, #4]
     25e:	1c2e      	adds	r6, r5, #0
     260:	40a6      	lsls	r6, r4
     262:	9600      	str	r6, [sp, #0]

		r = r << 1;
     264:	1c10      	adds	r0, r2, #0
     266:	1c19      	adds	r1, r3, #0
     268:	1880      	adds	r0, r0, r2
     26a:	4159      	adcs	r1, r3
     26c:	1c02      	adds	r2, r0, #0
     26e:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     270:	465f      	mov	r7, fp
     272:	4037      	ands	r7, r6
     274:	46bc      	mov	ip, r7
     276:	9e01      	ldr	r6, [sp, #4]
     278:	464f      	mov	r7, r9
     27a:	403e      	ands	r6, r7
     27c:	4667      	mov	r7, ip
     27e:	433e      	orrs	r6, r7
     280:	d002      	beq.n	288 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     282:	1c2a      	adds	r2, r5, #0
     284:	4302      	orrs	r2, r0
     286:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     288:	9803      	ldr	r0, [sp, #12]
     28a:	4298      	cmp	r0, r3
     28c:	d80b      	bhi.n	2a6 <_sercom_get_async_baud_val+0x156>
     28e:	d102      	bne.n	296 <_sercom_get_async_baud_val+0x146>
     290:	9902      	ldr	r1, [sp, #8]
     292:	4291      	cmp	r1, r2
     294:	d807      	bhi.n	2a6 <_sercom_get_async_baud_val+0x156>
			r = r - d;
     296:	9e02      	ldr	r6, [sp, #8]
     298:	9f03      	ldr	r7, [sp, #12]
     29a:	1b92      	subs	r2, r2, r6
     29c:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     29e:	4647      	mov	r7, r8
     2a0:	9800      	ldr	r0, [sp, #0]
     2a2:	4307      	orrs	r7, r0
     2a4:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     2a6:	3c01      	subs	r4, #1
     2a8:	d2cd      	bcs.n	246 <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     2aa:	4641      	mov	r1, r8
     2ac:	4652      	mov	r2, sl
     2ae:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     2b0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2b2:	4c12      	ldr	r4, [pc, #72]	; (2fc <_sercom_get_async_baud_val+0x1ac>)
     2b4:	42a3      	cmp	r3, r4
     2b6:	d908      	bls.n	2ca <_sercom_get_async_baud_val+0x17a>
     2b8:	9a05      	ldr	r2, [sp, #20]
     2ba:	3201      	adds	r2, #1
     2bc:	b2d2      	uxtb	r2, r2
     2be:	9205      	str	r2, [sp, #20]
     2c0:	2601      	movs	r6, #1
     2c2:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2c4:	4657      	mov	r7, sl
     2c6:	2f08      	cmp	r7, #8
     2c8:	d1b5      	bne.n	236 <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ca:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     2cc:	9805      	ldr	r0, [sp, #20]
     2ce:	2808      	cmp	r0, #8
     2d0:	d004      	beq.n	2dc <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     2d2:	0342      	lsls	r2, r0, #13
     2d4:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     2d6:	9c04      	ldr	r4, [sp, #16]
     2d8:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     2da:	2400      	movs	r4, #0
}
     2dc:	1c20      	adds	r0, r4, #0
     2de:	b007      	add	sp, #28
     2e0:	bc3c      	pop	{r2, r3, r4, r5}
     2e2:	4690      	mov	r8, r2
     2e4:	4699      	mov	r9, r3
     2e6:	46a2      	mov	sl, r4
     2e8:	46ab      	mov	fp, r5
     2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ec:	46c0      	nop			; (mov r8, r8)
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	00000000 	.word	0x00000000
     2f4:	00000001 	.word	0x00000001
     2f8:	00001871 	.word	0x00001871
     2fc:	00001fff 	.word	0x00001fff

00000300 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     300:	b510      	push	{r4, lr}
     302:	b082      	sub	sp, #8
     304:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     306:	4b0f      	ldr	r3, [pc, #60]	; (344 <sercom_set_gclk_generator+0x44>)
     308:	781b      	ldrb	r3, [r3, #0]
     30a:	2b00      	cmp	r3, #0
     30c:	d001      	beq.n	312 <sercom_set_gclk_generator+0x12>
     30e:	2900      	cmp	r1, #0
     310:	d00d      	beq.n	32e <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     312:	a901      	add	r1, sp, #4
     314:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     316:	200c      	movs	r0, #12
     318:	4b0b      	ldr	r3, [pc, #44]	; (348 <sercom_set_gclk_generator+0x48>)
     31a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     31c:	200c      	movs	r0, #12
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <sercom_set_gclk_generator+0x4c>)
     320:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     322:	4b08      	ldr	r3, [pc, #32]	; (344 <sercom_set_gclk_generator+0x44>)
     324:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     326:	2201      	movs	r2, #1
     328:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     32a:	2000      	movs	r0, #0
     32c:	e007      	b.n	33e <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     32e:	4b05      	ldr	r3, [pc, #20]	; (344 <sercom_set_gclk_generator+0x44>)
     330:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     332:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     334:	1b14      	subs	r4, r2, r4
     336:	1e62      	subs	r2, r4, #1
     338:	4194      	sbcs	r4, r2
     33a:	4264      	negs	r4, r4
     33c:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     33e:	b002      	add	sp, #8
     340:	bd10      	pop	{r4, pc}
     342:	46c0      	nop			; (mov r8, r8)
     344:	2000008c 	.word	0x2000008c
     348:	0000101d 	.word	0x0000101d
     34c:	00000f91 	.word	0x00000f91

00000350 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     350:	4b44      	ldr	r3, [pc, #272]	; (464 <_sercom_get_default_pad+0x114>)
     352:	4298      	cmp	r0, r3
     354:	d033      	beq.n	3be <_sercom_get_default_pad+0x6e>
     356:	d806      	bhi.n	366 <_sercom_get_default_pad+0x16>
     358:	4b43      	ldr	r3, [pc, #268]	; (468 <_sercom_get_default_pad+0x118>)
     35a:	4298      	cmp	r0, r3
     35c:	d00d      	beq.n	37a <_sercom_get_default_pad+0x2a>
     35e:	4b43      	ldr	r3, [pc, #268]	; (46c <_sercom_get_default_pad+0x11c>)
     360:	4298      	cmp	r0, r3
     362:	d01b      	beq.n	39c <_sercom_get_default_pad+0x4c>
     364:	e06f      	b.n	446 <_sercom_get_default_pad+0xf6>
     366:	4b42      	ldr	r3, [pc, #264]	; (470 <_sercom_get_default_pad+0x120>)
     368:	4298      	cmp	r0, r3
     36a:	d04a      	beq.n	402 <_sercom_get_default_pad+0xb2>
     36c:	4b41      	ldr	r3, [pc, #260]	; (474 <_sercom_get_default_pad+0x124>)
     36e:	4298      	cmp	r0, r3
     370:	d058      	beq.n	424 <_sercom_get_default_pad+0xd4>
     372:	4b41      	ldr	r3, [pc, #260]	; (478 <_sercom_get_default_pad+0x128>)
     374:	4298      	cmp	r0, r3
     376:	d166      	bne.n	446 <_sercom_get_default_pad+0xf6>
     378:	e032      	b.n	3e0 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     37a:	2901      	cmp	r1, #1
     37c:	d065      	beq.n	44a <_sercom_get_default_pad+0xfa>
     37e:	2900      	cmp	r1, #0
     380:	d004      	beq.n	38c <_sercom_get_default_pad+0x3c>
     382:	2902      	cmp	r1, #2
     384:	d006      	beq.n	394 <_sercom_get_default_pad+0x44>
     386:	2903      	cmp	r1, #3
     388:	d006      	beq.n	398 <_sercom_get_default_pad+0x48>
     38a:	e001      	b.n	390 <_sercom_get_default_pad+0x40>
     38c:	483b      	ldr	r0, [pc, #236]	; (47c <_sercom_get_default_pad+0x12c>)
     38e:	e067      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     390:	2000      	movs	r0, #0
     392:	e065      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     394:	483a      	ldr	r0, [pc, #232]	; (480 <_sercom_get_default_pad+0x130>)
     396:	e063      	b.n	460 <_sercom_get_default_pad+0x110>
     398:	483a      	ldr	r0, [pc, #232]	; (484 <_sercom_get_default_pad+0x134>)
     39a:	e061      	b.n	460 <_sercom_get_default_pad+0x110>
     39c:	2901      	cmp	r1, #1
     39e:	d056      	beq.n	44e <_sercom_get_default_pad+0xfe>
     3a0:	2900      	cmp	r1, #0
     3a2:	d004      	beq.n	3ae <_sercom_get_default_pad+0x5e>
     3a4:	2902      	cmp	r1, #2
     3a6:	d006      	beq.n	3b6 <_sercom_get_default_pad+0x66>
     3a8:	2903      	cmp	r1, #3
     3aa:	d006      	beq.n	3ba <_sercom_get_default_pad+0x6a>
     3ac:	e001      	b.n	3b2 <_sercom_get_default_pad+0x62>
     3ae:	2003      	movs	r0, #3
     3b0:	e056      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3b2:	2000      	movs	r0, #0
     3b4:	e054      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3b6:	4834      	ldr	r0, [pc, #208]	; (488 <_sercom_get_default_pad+0x138>)
     3b8:	e052      	b.n	460 <_sercom_get_default_pad+0x110>
     3ba:	4834      	ldr	r0, [pc, #208]	; (48c <_sercom_get_default_pad+0x13c>)
     3bc:	e050      	b.n	460 <_sercom_get_default_pad+0x110>
     3be:	2901      	cmp	r1, #1
     3c0:	d047      	beq.n	452 <_sercom_get_default_pad+0x102>
     3c2:	2900      	cmp	r1, #0
     3c4:	d004      	beq.n	3d0 <_sercom_get_default_pad+0x80>
     3c6:	2902      	cmp	r1, #2
     3c8:	d006      	beq.n	3d8 <_sercom_get_default_pad+0x88>
     3ca:	2903      	cmp	r1, #3
     3cc:	d006      	beq.n	3dc <_sercom_get_default_pad+0x8c>
     3ce:	e001      	b.n	3d4 <_sercom_get_default_pad+0x84>
     3d0:	482f      	ldr	r0, [pc, #188]	; (490 <_sercom_get_default_pad+0x140>)
     3d2:	e045      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3d4:	2000      	movs	r0, #0
     3d6:	e043      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d8:	482e      	ldr	r0, [pc, #184]	; (494 <_sercom_get_default_pad+0x144>)
     3da:	e041      	b.n	460 <_sercom_get_default_pad+0x110>
     3dc:	482e      	ldr	r0, [pc, #184]	; (498 <_sercom_get_default_pad+0x148>)
     3de:	e03f      	b.n	460 <_sercom_get_default_pad+0x110>
     3e0:	2901      	cmp	r1, #1
     3e2:	d038      	beq.n	456 <_sercom_get_default_pad+0x106>
     3e4:	2900      	cmp	r1, #0
     3e6:	d004      	beq.n	3f2 <_sercom_get_default_pad+0xa2>
     3e8:	2902      	cmp	r1, #2
     3ea:	d006      	beq.n	3fa <_sercom_get_default_pad+0xaa>
     3ec:	2903      	cmp	r1, #3
     3ee:	d006      	beq.n	3fe <_sercom_get_default_pad+0xae>
     3f0:	e001      	b.n	3f6 <_sercom_get_default_pad+0xa6>
     3f2:	482a      	ldr	r0, [pc, #168]	; (49c <_sercom_get_default_pad+0x14c>)
     3f4:	e034      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     3f6:	2000      	movs	r0, #0
     3f8:	e032      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3fa:	4829      	ldr	r0, [pc, #164]	; (4a0 <_sercom_get_default_pad+0x150>)
     3fc:	e030      	b.n	460 <_sercom_get_default_pad+0x110>
     3fe:	4829      	ldr	r0, [pc, #164]	; (4a4 <_sercom_get_default_pad+0x154>)
     400:	e02e      	b.n	460 <_sercom_get_default_pad+0x110>
     402:	2901      	cmp	r1, #1
     404:	d029      	beq.n	45a <_sercom_get_default_pad+0x10a>
     406:	2900      	cmp	r1, #0
     408:	d004      	beq.n	414 <_sercom_get_default_pad+0xc4>
     40a:	2902      	cmp	r1, #2
     40c:	d006      	beq.n	41c <_sercom_get_default_pad+0xcc>
     40e:	2903      	cmp	r1, #3
     410:	d006      	beq.n	420 <_sercom_get_default_pad+0xd0>
     412:	e001      	b.n	418 <_sercom_get_default_pad+0xc8>
     414:	4824      	ldr	r0, [pc, #144]	; (4a8 <_sercom_get_default_pad+0x158>)
     416:	e023      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     418:	2000      	movs	r0, #0
     41a:	e021      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     41c:	4823      	ldr	r0, [pc, #140]	; (4ac <_sercom_get_default_pad+0x15c>)
     41e:	e01f      	b.n	460 <_sercom_get_default_pad+0x110>
     420:	4823      	ldr	r0, [pc, #140]	; (4b0 <_sercom_get_default_pad+0x160>)
     422:	e01d      	b.n	460 <_sercom_get_default_pad+0x110>
     424:	2901      	cmp	r1, #1
     426:	d01a      	beq.n	45e <_sercom_get_default_pad+0x10e>
     428:	2900      	cmp	r1, #0
     42a:	d004      	beq.n	436 <_sercom_get_default_pad+0xe6>
     42c:	2902      	cmp	r1, #2
     42e:	d006      	beq.n	43e <_sercom_get_default_pad+0xee>
     430:	2903      	cmp	r1, #3
     432:	d006      	beq.n	442 <_sercom_get_default_pad+0xf2>
     434:	e001      	b.n	43a <_sercom_get_default_pad+0xea>
     436:	481f      	ldr	r0, [pc, #124]	; (4b4 <_sercom_get_default_pad+0x164>)
     438:	e012      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     43a:	2000      	movs	r0, #0
     43c:	e010      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     43e:	481e      	ldr	r0, [pc, #120]	; (4b8 <_sercom_get_default_pad+0x168>)
     440:	e00e      	b.n	460 <_sercom_get_default_pad+0x110>
     442:	481e      	ldr	r0, [pc, #120]	; (4bc <_sercom_get_default_pad+0x16c>)
     444:	e00c      	b.n	460 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     446:	2000      	movs	r0, #0
     448:	e00a      	b.n	460 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     44a:	481d      	ldr	r0, [pc, #116]	; (4c0 <_sercom_get_default_pad+0x170>)
     44c:	e008      	b.n	460 <_sercom_get_default_pad+0x110>
     44e:	481d      	ldr	r0, [pc, #116]	; (4c4 <_sercom_get_default_pad+0x174>)
     450:	e006      	b.n	460 <_sercom_get_default_pad+0x110>
     452:	481d      	ldr	r0, [pc, #116]	; (4c8 <_sercom_get_default_pad+0x178>)
     454:	e004      	b.n	460 <_sercom_get_default_pad+0x110>
     456:	481d      	ldr	r0, [pc, #116]	; (4cc <_sercom_get_default_pad+0x17c>)
     458:	e002      	b.n	460 <_sercom_get_default_pad+0x110>
     45a:	481d      	ldr	r0, [pc, #116]	; (4d0 <_sercom_get_default_pad+0x180>)
     45c:	e000      	b.n	460 <_sercom_get_default_pad+0x110>
     45e:	481d      	ldr	r0, [pc, #116]	; (4d4 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     460:	4770      	bx	lr
     462:	46c0      	nop			; (mov r8, r8)
     464:	42001000 	.word	0x42001000
     468:	42000800 	.word	0x42000800
     46c:	42000c00 	.word	0x42000c00
     470:	42001800 	.word	0x42001800
     474:	42001c00 	.word	0x42001c00
     478:	42001400 	.word	0x42001400
     47c:	00040003 	.word	0x00040003
     480:	00060003 	.word	0x00060003
     484:	00070003 	.word	0x00070003
     488:	001e0003 	.word	0x001e0003
     48c:	001f0003 	.word	0x001f0003
     490:	00080003 	.word	0x00080003
     494:	000a0003 	.word	0x000a0003
     498:	000b0003 	.word	0x000b0003
     49c:	00100003 	.word	0x00100003
     4a0:	00120003 	.word	0x00120003
     4a4:	00130003 	.word	0x00130003
     4a8:	000c0003 	.word	0x000c0003
     4ac:	000e0003 	.word	0x000e0003
     4b0:	000f0003 	.word	0x000f0003
     4b4:	00160003 	.word	0x00160003
     4b8:	00180003 	.word	0x00180003
     4bc:	00190003 	.word	0x00190003
     4c0:	00050003 	.word	0x00050003
     4c4:	00010003 	.word	0x00010003
     4c8:	00090003 	.word	0x00090003
     4cc:	00110003 	.word	0x00110003
     4d0:	000d0003 	.word	0x000d0003
     4d4:	00170003 	.word	0x00170003

000004d8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4d8:	b570      	push	{r4, r5, r6, lr}
     4da:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4dc:	4a0c      	ldr	r2, [pc, #48]	; (510 <_sercom_get_sercom_inst_index+0x38>)
     4de:	466b      	mov	r3, sp
     4e0:	ca70      	ldmia	r2!, {r4, r5, r6}
     4e2:	c370      	stmia	r3!, {r4, r5, r6}
     4e4:	ca32      	ldmia	r2!, {r1, r4, r5}
     4e6:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e8:	9e00      	ldr	r6, [sp, #0]
     4ea:	4286      	cmp	r6, r0
     4ec:	d006      	beq.n	4fc <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4ee:	2301      	movs	r3, #1
     4f0:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4f2:	4669      	mov	r1, sp
     4f4:	5852      	ldr	r2, [r2, r1]
     4f6:	4282      	cmp	r2, r0
     4f8:	d103      	bne.n	502 <_sercom_get_sercom_inst_index+0x2a>
     4fa:	e000      	b.n	4fe <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fc:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     4fe:	b2d8      	uxtb	r0, r3
     500:	e003      	b.n	50a <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     502:	3301      	adds	r3, #1
     504:	2b06      	cmp	r3, #6
     506:	d1f3      	bne.n	4f0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     508:	2000      	movs	r0, #0
}
     50a:	b006      	add	sp, #24
     50c:	bd70      	pop	{r4, r5, r6, pc}
     50e:	46c0      	nop			; (mov r8, r8)
     510:	000028fc 	.word	0x000028fc

00000514 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     514:	b5f0      	push	{r4, r5, r6, r7, lr}
     516:	4647      	mov	r7, r8
     518:	b480      	push	{r7}
     51a:	1c0c      	adds	r4, r1, #0
     51c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     51e:	2800      	cmp	r0, #0
     520:	d10c      	bne.n	53c <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
     522:	2a00      	cmp	r2, #0
     524:	dd0d      	ble.n	542 <_read+0x2e>
     526:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     528:	4e09      	ldr	r6, [pc, #36]	; (550 <_read+0x3c>)
     52a:	4d0a      	ldr	r5, [pc, #40]	; (554 <_read+0x40>)
     52c:	6830      	ldr	r0, [r6, #0]
     52e:	1c21      	adds	r1, r4, #0
     530:	682b      	ldr	r3, [r5, #0]
     532:	4798      	blx	r3
		ptr++;
     534:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
     536:	42bc      	cmp	r4, r7
     538:	d1f8      	bne.n	52c <_read+0x18>
     53a:	e004      	b.n	546 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
     53c:	2001      	movs	r0, #1
     53e:	4240      	negs	r0, r0
     540:	e002      	b.n	548 <_read+0x34>
	}

	for (; len > 0; --len) {
     542:	2000      	movs	r0, #0
     544:	e000      	b.n	548 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
     546:	4640      	mov	r0, r8
	}
	return nChars;
}
     548:	bc04      	pop	{r2}
     54a:	4690      	mov	r8, r2
     54c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	200001ac 	.word	0x200001ac
     554:	200001a4 	.word	0x200001a4

00000558 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     558:	b5f0      	push	{r4, r5, r6, r7, lr}
     55a:	4647      	mov	r7, r8
     55c:	b480      	push	{r7}
     55e:	1c0e      	adds	r6, r1, #0
     560:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     562:	3801      	subs	r0, #1
     564:	2802      	cmp	r0, #2
     566:	d810      	bhi.n	58a <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     568:	2a00      	cmp	r2, #0
     56a:	d011      	beq.n	590 <_write+0x38>
     56c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     56e:	4b0d      	ldr	r3, [pc, #52]	; (5a4 <_write+0x4c>)
     570:	4698      	mov	r8, r3
     572:	4f0d      	ldr	r7, [pc, #52]	; (5a8 <_write+0x50>)
     574:	4643      	mov	r3, r8
     576:	6818      	ldr	r0, [r3, #0]
     578:	5d31      	ldrb	r1, [r6, r4]
     57a:	683b      	ldr	r3, [r7, #0]
     57c:	4798      	blx	r3
     57e:	2800      	cmp	r0, #0
     580:	db08      	blt.n	594 <_write+0x3c>
			return -1;
		}
		++nChars;
     582:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
     584:	42a5      	cmp	r5, r4
     586:	d1f5      	bne.n	574 <_write+0x1c>
     588:	e007      	b.n	59a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
     58a:	2001      	movs	r0, #1
     58c:	4240      	negs	r0, r0
     58e:	e005      	b.n	59c <_write+0x44>
	}

	for (; len != 0; --len) {
     590:	2000      	movs	r0, #0
     592:	e003      	b.n	59c <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
     594:	2001      	movs	r0, #1
     596:	4240      	negs	r0, r0
     598:	e000      	b.n	59c <_write+0x44>
		}
		++nChars;
     59a:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
     59c:	bc04      	pop	{r2}
     59e:	4690      	mov	r8, r2
     5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	200001ac 	.word	0x200001ac
     5a8:	200001a8 	.word	0x200001a8

000005ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ae:	465f      	mov	r7, fp
     5b0:	4656      	mov	r6, sl
     5b2:	464d      	mov	r5, r9
     5b4:	4644      	mov	r4, r8
     5b6:	b4f0      	push	{r4, r5, r6, r7}
     5b8:	b08d      	sub	sp, #52	; 0x34
     5ba:	1c05      	adds	r5, r0, #0
     5bc:	1c0c      	adds	r4, r1, #0
     5be:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5c0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5c2:	1c08      	adds	r0, r1, #0
     5c4:	4b7d      	ldr	r3, [pc, #500]	; (7bc <usart_init+0x210>)
     5c6:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5c8:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5ca:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5cc:	07ca      	lsls	r2, r1, #31
     5ce:	d500      	bpl.n	5d2 <usart_init+0x26>
     5d0:	e0ec      	b.n	7ac <usart_init+0x200>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5d2:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     5d4:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5d6:	0797      	lsls	r7, r2, #30
     5d8:	d500      	bpl.n	5dc <usart_init+0x30>
     5da:	e0e7      	b.n	7ac <usart_init+0x200>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5dc:	4b78      	ldr	r3, [pc, #480]	; (7c0 <usart_init+0x214>)
     5de:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5e0:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5e2:	2701      	movs	r7, #1
     5e4:	4097      	lsls	r7, r2
     5e6:	1c3a      	adds	r2, r7, #0
     5e8:	430a      	orrs	r2, r1
     5ea:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     5ec:	a90b      	add	r1, sp, #44	; 0x2c
     5ee:	7f73      	ldrb	r3, [r6, #29]
     5f0:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5f2:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5f4:	b2c7      	uxtb	r7, r0
     5f6:	1c38      	adds	r0, r7, #0
     5f8:	4b72      	ldr	r3, [pc, #456]	; (7c4 <usart_init+0x218>)
     5fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5fc:	1c38      	adds	r0, r7, #0
     5fe:	4b72      	ldr	r3, [pc, #456]	; (7c8 <usart_init+0x21c>)
     600:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     602:	7f70      	ldrb	r0, [r6, #29]
     604:	2100      	movs	r1, #0
     606:	4b71      	ldr	r3, [pc, #452]	; (7cc <usart_init+0x220>)
     608:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     60a:	7af3      	ldrb	r3, [r6, #11]
     60c:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     60e:	7d33      	ldrb	r3, [r6, #20]
     610:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     612:	7d73      	ldrb	r3, [r6, #21]
     614:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     616:	682f      	ldr	r7, [r5, #0]
     618:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     61a:	1c38      	adds	r0, r7, #0
     61c:	4b67      	ldr	r3, [pc, #412]	; (7bc <usart_init+0x210>)
     61e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     620:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     622:	2200      	movs	r2, #0
     624:	466b      	mov	r3, sp
     626:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     628:	6831      	ldr	r1, [r6, #0]
     62a:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
     62c:	68f2      	ldr	r2, [r6, #12]
     62e:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     630:	7db3      	ldrb	r3, [r6, #22]
     632:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     634:	6873      	ldr	r3, [r6, #4]
     636:	2b00      	cmp	r3, #0
     638:	d013      	beq.n	662 <usart_init+0xb6>
     63a:	2280      	movs	r2, #128	; 0x80
     63c:	0552      	lsls	r2, r2, #21
     63e:	4293      	cmp	r3, r2
     640:	d12b      	bne.n	69a <usart_init+0xee>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     642:	7df3      	ldrb	r3, [r6, #23]
     644:	2b00      	cmp	r3, #0
     646:	d001      	beq.n	64c <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     648:	682a      	ldr	r2, [r5, #0]
     64a:	e02b      	b.n	6a4 <usart_init+0xf8>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     64c:	6937      	ldr	r7, [r6, #16]
     64e:	b2c0      	uxtb	r0, r0
     650:	4b5f      	ldr	r3, [pc, #380]	; (7d0 <usart_init+0x224>)
     652:	4798      	blx	r3
     654:	1c01      	adds	r1, r0, #0
     656:	1c38      	adds	r0, r7, #0
     658:	466a      	mov	r2, sp
     65a:	3216      	adds	r2, #22
     65c:	4b5d      	ldr	r3, [pc, #372]	; (7d4 <usart_init+0x228>)
     65e:	4798      	blx	r3
     660:	e01c      	b.n	69c <usart_init+0xf0>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     662:	7df3      	ldrb	r3, [r6, #23]
     664:	2b00      	cmp	r3, #0
     666:	d009      	beq.n	67c <usart_init+0xd0>
				status_code =
     668:	2310      	movs	r3, #16
     66a:	9300      	str	r3, [sp, #0]
     66c:	6930      	ldr	r0, [r6, #16]
     66e:	69b1      	ldr	r1, [r6, #24]
     670:	466a      	mov	r2, sp
     672:	3216      	adds	r2, #22
     674:	2300      	movs	r3, #0
     676:	4f58      	ldr	r7, [pc, #352]	; (7d8 <usart_init+0x22c>)
     678:	47b8      	blx	r7
     67a:	e00f      	b.n	69c <usart_init+0xf0>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     67c:	6931      	ldr	r1, [r6, #16]
     67e:	468b      	mov	fp, r1
     680:	b2c0      	uxtb	r0, r0
     682:	4b53      	ldr	r3, [pc, #332]	; (7d0 <usart_init+0x224>)
     684:	4798      	blx	r3
     686:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     688:	2310      	movs	r3, #16
     68a:	9300      	str	r3, [sp, #0]
     68c:	4658      	mov	r0, fp
     68e:	466a      	mov	r2, sp
     690:	3216      	adds	r2, #22
     692:	2300      	movs	r3, #0
     694:	4f50      	ldr	r7, [pc, #320]	; (7d8 <usart_init+0x22c>)
     696:	47b8      	blx	r7
     698:	e000      	b.n	69c <usart_init+0xf0>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     69a:	2000      	movs	r0, #0
     69c:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
     69e:	d000      	beq.n	6a2 <usart_init+0xf6>
     6a0:	e084      	b.n	7ac <usart_init+0x200>
     6a2:	e7d1      	b.n	648 <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     6a4:	8a13      	ldrh	r3, [r2, #16]
     6a6:	0bdb      	lsrs	r3, r3, #15
     6a8:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     6aa:	b29b      	uxth	r3, r3
     6ac:	2b00      	cmp	r3, #0
     6ae:	d1f9      	bne.n	6a4 <usart_init+0xf8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     6b0:	466b      	mov	r3, sp
     6b2:	3316      	adds	r3, #22
     6b4:	881b      	ldrh	r3, [r3, #0]
     6b6:	9f03      	ldr	r7, [sp, #12]
     6b8:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     6ba:	4652      	mov	r2, sl
     6bc:	4649      	mov	r1, r9
     6be:	430a      	orrs	r2, r1
     6c0:	6873      	ldr	r3, [r6, #4]
     6c2:	431a      	orrs	r2, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6c4:	4647      	mov	r7, r8
     6c6:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     6c8:	431a      	orrs	r2, r3

	if (config->use_external_clock == false) {
     6ca:	7df3      	ldrb	r3, [r6, #23]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d101      	bne.n	6d4 <usart_init+0x128>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     6d0:	2304      	movs	r3, #4
     6d2:	431a      	orrs	r2, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     6d4:	7d30      	ldrb	r0, [r6, #20]
     6d6:	0440      	lsls	r0, r0, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     6d8:	7d73      	ldrb	r3, [r6, #21]
     6da:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     6dc:	4318      	orrs	r0, r3
     6de:	7af1      	ldrb	r1, [r6, #11]
     6e0:	7ab3      	ldrb	r3, [r6, #10]
     6e2:	430b      	orrs	r3, r1
     6e4:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     6e6:	8933      	ldrh	r3, [r6, #8]
     6e8:	2bff      	cmp	r3, #255	; 0xff
     6ea:	d003      	beq.n	6f4 <usart_init+0x148>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     6ec:	2180      	movs	r1, #128	; 0x80
     6ee:	0449      	lsls	r1, r1, #17
     6f0:	430a      	orrs	r2, r1
#endif
		ctrlb |= config->parity;
     6f2:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     6f4:	7f33      	ldrb	r3, [r6, #28]
     6f6:	2b00      	cmp	r3, #0
     6f8:	d103      	bne.n	702 <usart_init+0x156>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     6fa:	4b38      	ldr	r3, [pc, #224]	; (7dc <usart_init+0x230>)
     6fc:	789b      	ldrb	r3, [r3, #2]
     6fe:	0799      	lsls	r1, r3, #30
     700:	d501      	bpl.n	706 <usart_init+0x15a>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     702:	2380      	movs	r3, #128	; 0x80
     704:	431a      	orrs	r2, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     706:	6829      	ldr	r1, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     708:	8a0b      	ldrh	r3, [r1, #16]
     70a:	0bdb      	lsrs	r3, r3, #15
     70c:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     70e:	b29b      	uxth	r3, r3
     710:	2b00      	cmp	r3, #0
     712:	d1f9      	bne.n	708 <usart_init+0x15c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     714:	9f03      	ldr	r7, [sp, #12]
     716:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     718:	6829      	ldr	r1, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     71a:	8a0b      	ldrh	r3, [r1, #16]
     71c:	0bdb      	lsrs	r3, r3, #15
     71e:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     720:	b29b      	uxth	r3, r3
     722:	2b00      	cmp	r3, #0
     724:	d1f9      	bne.n	71a <usart_init+0x16e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     726:	9f03      	ldr	r7, [sp, #12]
     728:	603a      	str	r2, [r7, #0]
     72a:	ab0a      	add	r3, sp, #40	; 0x28
     72c:	2280      	movs	r2, #128	; 0x80
     72e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     730:	2200      	movs	r2, #0
     732:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     734:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     736:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
     738:	6a31      	ldr	r1, [r6, #32]
     73a:	9106      	str	r1, [sp, #24]
     73c:	6a72      	ldr	r2, [r6, #36]	; 0x24
     73e:	9207      	str	r2, [sp, #28]
     740:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     742:	9308      	str	r3, [sp, #32]
     744:	6af6      	ldr	r6, [r6, #44]	; 0x2c
     746:	9609      	str	r6, [sp, #36]	; 0x24
     748:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     74a:	ae0a      	add	r6, sp, #40	; 0x28
     74c:	b2f9      	uxtb	r1, r7
     74e:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     750:	aa06      	add	r2, sp, #24
     752:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     754:	2800      	cmp	r0, #0
     756:	d102      	bne.n	75e <usart_init+0x1b2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     758:	1c20      	adds	r0, r4, #0
     75a:	4a21      	ldr	r2, [pc, #132]	; (7e0 <usart_init+0x234>)
     75c:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
     75e:	1c43      	adds	r3, r0, #1
     760:	d005      	beq.n	76e <usart_init+0x1c2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     762:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     764:	0c00      	lsrs	r0, r0, #16
     766:	b2c0      	uxtb	r0, r0
     768:	1c31      	adds	r1, r6, #0
     76a:	4a1e      	ldr	r2, [pc, #120]	; (7e4 <usart_init+0x238>)
     76c:	4790      	blx	r2
     76e:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     770:	2f04      	cmp	r7, #4
     772:	d1eb      	bne.n	74c <usart_init+0x1a0>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     774:	2300      	movs	r3, #0
     776:	60ab      	str	r3, [r5, #8]
     778:	60eb      	str	r3, [r5, #12]
     77a:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
     77c:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     77e:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     780:	2200      	movs	r2, #0
     782:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     784:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     786:	2320      	movs	r3, #32
     788:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     78a:	2321      	movs	r3, #33	; 0x21
     78c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     78e:	2322      	movs	r3, #34	; 0x22
     790:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     792:	2323      	movs	r3, #35	; 0x23
     794:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     796:	6828      	ldr	r0, [r5, #0]
     798:	4b08      	ldr	r3, [pc, #32]	; (7bc <usart_init+0x210>)
     79a:	4798      	blx	r3
     79c:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     79e:	4912      	ldr	r1, [pc, #72]	; (7e8 <usart_init+0x23c>)
     7a0:	4b12      	ldr	r3, [pc, #72]	; (7ec <usart_init+0x240>)
     7a2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     7a4:	00a4      	lsls	r4, r4, #2
     7a6:	4b12      	ldr	r3, [pc, #72]	; (7f0 <usart_init+0x244>)
     7a8:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     7aa:	2300      	movs	r3, #0
}
     7ac:	1c18      	adds	r0, r3, #0
     7ae:	b00d      	add	sp, #52	; 0x34
     7b0:	bc3c      	pop	{r2, r3, r4, r5}
     7b2:	4690      	mov	r8, r2
     7b4:	4699      	mov	r9, r3
     7b6:	46a2      	mov	sl, r4
     7b8:	46ab      	mov	fp, r5
     7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7bc:	000004d9 	.word	0x000004d9
     7c0:	40000400 	.word	0x40000400
     7c4:	0000101d 	.word	0x0000101d
     7c8:	00000f91 	.word	0x00000f91
     7cc:	00000301 	.word	0x00000301
     7d0:	00001039 	.word	0x00001039
     7d4:	00000129 	.word	0x00000129
     7d8:	00000151 	.word	0x00000151
     7dc:	41002000 	.word	0x41002000
     7e0:	00000351 	.word	0x00000351
     7e4:	000010f9 	.word	0x000010f9
     7e8:	0000094d 	.word	0x0000094d
     7ec:	00000a81 	.word	0x00000a81
     7f0:	200001b0 	.word	0x200001b0

000007f4 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
     7f4:	b510      	push	{r4, lr}
     7f6:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7f8:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7fa:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     7fc:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     7fe:	2c00      	cmp	r4, #0
     800:	d010      	beq.n	824 <usart_write_wait+0x30>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     802:	8bd2      	ldrh	r2, [r2, #30]
     804:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     806:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
     808:	2a00      	cmp	r2, #0
     80a:	d10b      	bne.n	824 <usart_write_wait+0x30>
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     80c:	8a1a      	ldrh	r2, [r3, #16]
     80e:	0bd2      	lsrs	r2, r2, #15
     810:	03d2      	lsls	r2, r2, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     812:	b292      	uxth	r2, r2
     814:	2a00      	cmp	r2, #0
     816:	d1f9      	bne.n	80c <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
     818:	8319      	strh	r1, [r3, #24]

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     81a:	2102      	movs	r1, #2
     81c:	7b9a      	ldrb	r2, [r3, #14]
     81e:	420a      	tst	r2, r1
     820:	d0fc      	beq.n	81c <usart_write_wait+0x28>
		/* Wait until data is sent */
	}

	return STATUS_OK;
     822:	2000      	movs	r0, #0
}
     824:	bd10      	pop	{r4, pc}
     826:	46c0      	nop			; (mov r8, r8)

00000828 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
     828:	b510      	push	{r4, lr}
     82a:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     82c:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     82e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     830:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     832:	2a00      	cmp	r2, #0
     834:	d026      	beq.n	884 <usart_read_wait+0x5c>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     836:	8b9b      	ldrh	r3, [r3, #28]
     838:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
     83a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
     83c:	2b00      	cmp	r3, #0
     83e:	d121      	bne.n	884 <usart_read_wait+0x5c>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     840:	7ba3      	ldrb	r3, [r4, #14]
     842:	075a      	lsls	r2, r3, #29
     844:	d51e      	bpl.n	884 <usart_read_wait+0x5c>
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     846:	8a23      	ldrh	r3, [r4, #16]
     848:	0bdb      	lsrs	r3, r3, #15
     84a:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     84c:	b29b      	uxth	r3, r3
     84e:	2b00      	cmp	r3, #0
     850:	d1f9      	bne.n	846 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     852:	8a23      	ldrh	r3, [r4, #16]
     854:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
     856:	075a      	lsls	r2, r3, #29
     858:	d011      	beq.n	87e <usart_read_wait+0x56>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
     85a:	079a      	lsls	r2, r3, #30
     85c:	d503      	bpl.n	866 <usart_read_wait+0x3e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     85e:	2302      	movs	r3, #2
     860:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_BAD_FORMAT;
     862:	201a      	movs	r0, #26
     864:	e00e      	b.n	884 <usart_read_wait+0x5c>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     866:	075a      	lsls	r2, r3, #29
     868:	d503      	bpl.n	872 <usart_read_wait+0x4a>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     86a:	2304      	movs	r3, #4
     86c:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_OVERFLOW;
     86e:	201e      	movs	r0, #30
     870:	e008      	b.n	884 <usart_read_wait+0x5c>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     872:	07da      	lsls	r2, r3, #31
     874:	d503      	bpl.n	87e <usart_read_wait+0x56>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     876:	2301      	movs	r3, #1
     878:	8223      	strh	r3, [r4, #16]

			return STATUS_ERR_BAD_DATA;
     87a:	2013      	movs	r0, #19
     87c:	e002      	b.n	884 <usart_read_wait+0x5c>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
     87e:	8b23      	ldrh	r3, [r4, #24]
     880:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
     882:	2000      	movs	r0, #0
}
     884:	bd10      	pop	{r4, pc}
     886:	46c0      	nop			; (mov r8, r8)

00000888 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     888:	b5f0      	push	{r4, r5, r6, r7, lr}
     88a:	4657      	mov	r7, sl
     88c:	464e      	mov	r6, r9
     88e:	4645      	mov	r5, r8
     890:	b4e0      	push	{r5, r6, r7}
     892:	1c06      	adds	r6, r0, #0
     894:	4688      	mov	r8, r1
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     896:	2017      	movs	r0, #23
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
     898:	2a00      	cmp	r2, #0
     89a:	d04d      	beq.n	938 <usart_write_buffer_wait+0xb0>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     89c:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
     89e:	201c      	movs	r0, #28
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8a0:	2b00      	cmp	r3, #0
     8a2:	d049      	beq.n	938 <usart_write_buffer_wait+0xb0>
		return STATUS_ERR_DENIED;
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     8a4:	6834      	ldr	r4, [r6, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     8a6:	8a23      	ldrh	r3, [r4, #16]
     8a8:	0bdb      	lsrs	r3, r3, #15
     8aa:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     8ac:	b29b      	uxth	r3, r3
     8ae:	2b00      	cmp	r3, #0
     8b0:	d1f9      	bne.n	8a6 <usart_write_buffer_wait+0x1e>
     8b2:	4692      	mov	sl, r2
     8b4:	2700      	movs	r7, #0
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     8b6:	2501      	movs	r5, #1
     8b8:	4a22      	ldr	r2, [pc, #136]	; (944 <usart_write_buffer_wait+0xbc>)
     8ba:	4691      	mov	r9, r2
     8bc:	e01f      	b.n	8fe <usart_write_buffer_wait+0x76>
     8be:	7ba2      	ldrb	r2, [r4, #14]
     8c0:	422a      	tst	r2, r5
     8c2:	d104      	bne.n	8ce <usart_write_buffer_wait+0x46>
				break;
			} else if (i == USART_TIMEOUT) {
     8c4:	2b01      	cmp	r3, #1
     8c6:	d029      	beq.n	91c <usart_write_buffer_wait+0x94>
     8c8:	3b01      	subs	r3, #1

	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     8ca:	2b00      	cmp	r3, #0
     8cc:	d1f7      	bne.n	8be <usart_write_buffer_wait+0x36>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     8ce:	1c7b      	adds	r3, r7, #1
     8d0:	b29b      	uxth	r3, r3
     8d2:	4642      	mov	r2, r8
     8d4:	5dd1      	ldrb	r1, [r2, r7]

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     8d6:	7972      	ldrb	r2, [r6, #5]
     8d8:	2a01      	cmp	r2, #1
     8da:	d001      	beq.n	8e0 <usart_write_buffer_wait+0x58>
				return STATUS_ERR_TIMEOUT;
			}
		}

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
     8dc:	1c1f      	adds	r7, r3, #0
     8de:	e005      	b.n	8ec <usart_write_buffer_wait+0x64>

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
			data_to_send |= (tx_data[tx_pos++] << 8);
     8e0:	1cba      	adds	r2, r7, #2
     8e2:	b297      	uxth	r7, r2
     8e4:	4642      	mov	r2, r8
     8e6:	5cd3      	ldrb	r3, [r2, r3]
     8e8:	021b      	lsls	r3, r3, #8
     8ea:	4319      	orrs	r1, r3
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
     8ec:	1c30      	adds	r0, r6, #0
     8ee:	4b16      	ldr	r3, [pc, #88]	; (948 <usart_write_buffer_wait+0xc0>)
     8f0:	4798      	blx	r3
     8f2:	4653      	mov	r3, sl
     8f4:	3b01      	subs	r3, #1
     8f6:	b29b      	uxth	r3, r3
     8f8:	469a      	mov	sl, r3
	_usart_wait_for_sync(module);

	uint16_t tx_pos = 0;

	/* Blocks while buffer is being transferred */
	while (length--) {
     8fa:	2b00      	cmp	r3, #0
     8fc:	d016      	beq.n	92c <usart_write_buffer_wait+0xa4>
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     8fe:	7ba3      	ldrb	r3, [r4, #14]
     900:	422b      	tst	r3, r5
     902:	d1e4      	bne.n	8ce <usart_write_buffer_wait+0x46>
     904:	464b      	mov	r3, r9
     906:	e7da      	b.n	8be <usart_write_buffer_wait+0x36>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     908:	7ba2      	ldrb	r2, [r4, #14]
     90a:	420a      	tst	r2, r1
     90c:	d108      	bne.n	920 <usart_write_buffer_wait+0x98>
			break;
		} else if (i == USART_TIMEOUT) {
     90e:	2b01      	cmp	r3, #1
     910:	d008      	beq.n	924 <usart_write_buffer_wait+0x9c>
     912:	3b01      	subs	r3, #1
		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     914:	2b00      	cmp	r3, #0
     916:	d1f7      	bne.n	908 <usart_write_buffer_wait+0x80>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     918:	2000      	movs	r0, #0
     91a:	e00d      	b.n	938 <usart_write_buffer_wait+0xb0>
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
				break;
			} else if (i == USART_TIMEOUT) {
				return STATUS_ERR_TIMEOUT;
     91c:	2012      	movs	r0, #18
     91e:	e00b      	b.n	938 <usart_write_buffer_wait+0xb0>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
     920:	2000      	movs	r0, #0
     922:	e009      	b.n	938 <usart_write_buffer_wait+0xb0>
	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
			break;
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
     924:	2012      	movs	r0, #18
     926:	e007      	b.n	938 <usart_write_buffer_wait+0xb0>
		}
	}

	return STATUS_OK;
     928:	2000      	movs	r0, #0
     92a:	e005      	b.n	938 <usart_write_buffer_wait+0xb0>
		usart_write_wait(module, data_to_send);
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     92c:	7ba3      	ldrb	r3, [r4, #14]
     92e:	079a      	lsls	r2, r3, #30
     930:	d4fa      	bmi.n	928 <usart_write_buffer_wait+0xa0>
     932:	4b04      	ldr	r3, [pc, #16]	; (944 <usart_write_buffer_wait+0xbc>)
     934:	2102      	movs	r1, #2
     936:	e7e7      	b.n	908 <usart_write_buffer_wait+0x80>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     938:	bc1c      	pop	{r2, r3, r4}
     93a:	4690      	mov	r8, r2
     93c:	4699      	mov	r9, r3
     93e:	46a2      	mov	sl, r4
     940:	bdf0      	pop	{r4, r5, r6, r7, pc}
     942:	46c0      	nop			; (mov r8, r8)
     944:	0000ffff 	.word	0x0000ffff
     948:	000007f5 	.word	0x000007f5

0000094c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     94e:	0080      	lsls	r0, r0, #2
     950:	4b49      	ldr	r3, [pc, #292]	; (a78 <_usart_interrupt_handler+0x12c>)
     952:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     954:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     956:	8a23      	ldrh	r3, [r4, #16]
     958:	0bdb      	lsrs	r3, r3, #15
     95a:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     95c:	b29b      	uxth	r3, r3
     95e:	2b00      	cmp	r3, #0
     960:	d1f9      	bne.n	956 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     962:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     964:	7b66      	ldrb	r6, [r4, #13]
     966:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     968:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     96a:	5ceb      	ldrb	r3, [r5, r3]
     96c:	2220      	movs	r2, #32
     96e:	5caa      	ldrb	r2, [r5, r2]
     970:	1c17      	adds	r7, r2, #0
     972:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     974:	07f1      	lsls	r1, r6, #31
     976:	d520      	bpl.n	9ba <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     978:	8beb      	ldrh	r3, [r5, #30]
     97a:	b29b      	uxth	r3, r3
     97c:	2b00      	cmp	r3, #0
     97e:	d01a      	beq.n	9b6 <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     980:	69ab      	ldr	r3, [r5, #24]
     982:	781a      	ldrb	r2, [r3, #0]
     984:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     986:	1c59      	adds	r1, r3, #1
     988:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     98a:	7969      	ldrb	r1, [r5, #5]
     98c:	2901      	cmp	r1, #1
     98e:	d104      	bne.n	99a <_usart_interrupt_handler+0x4e>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     990:	7859      	ldrb	r1, [r3, #1]
     992:	0209      	lsls	r1, r1, #8
     994:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     996:	3302      	adds	r3, #2
     998:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     99a:	05d3      	lsls	r3, r2, #23
     99c:	0ddb      	lsrs	r3, r3, #23
     99e:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     9a0:	8beb      	ldrh	r3, [r5, #30]
     9a2:	3b01      	subs	r3, #1
     9a4:	b29b      	uxth	r3, r3
     9a6:	83eb      	strh	r3, [r5, #30]
     9a8:	2b00      	cmp	r3, #0
     9aa:	d106      	bne.n	9ba <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9ac:	2301      	movs	r3, #1
     9ae:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9b0:	2302      	movs	r3, #2
     9b2:	7363      	strb	r3, [r4, #13]
     9b4:	e001      	b.n	9ba <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9b6:	2301      	movs	r3, #1
     9b8:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9ba:	07b2      	lsls	r2, r6, #30
     9bc:	d509      	bpl.n	9d2 <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9be:	2302      	movs	r3, #2
     9c0:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     9c2:	2200      	movs	r2, #0
     9c4:	2323      	movs	r3, #35	; 0x23
     9c6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9c8:	07fb      	lsls	r3, r7, #31
     9ca:	d502      	bpl.n	9d2 <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     9cc:	1c28      	adds	r0, r5, #0
     9ce:	68a9      	ldr	r1, [r5, #8]
     9d0:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9d2:	0772      	lsls	r2, r6, #29
     9d4:	d54e      	bpl.n	a74 <_usart_interrupt_handler+0x128>

		if (module->remaining_rx_buffer_length) {
     9d6:	8bab      	ldrh	r3, [r5, #28]
     9d8:	b29b      	uxth	r3, r3
     9da:	2b00      	cmp	r3, #0
     9dc:	d048      	beq.n	a70 <_usart_interrupt_handler+0x124>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     9de:	8a23      	ldrh	r3, [r4, #16]
     9e0:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     9e2:	0759      	lsls	r1, r3, #29
     9e4:	d022      	beq.n	a2c <_usart_interrupt_handler+0xe0>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     9e6:	079a      	lsls	r2, r3, #30
     9e8:	d507      	bpl.n	9fa <_usart_interrupt_handler+0xae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     9ea:	221a      	movs	r2, #26
     9ec:	2322      	movs	r3, #34	; 0x22
     9ee:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     9f0:	8a22      	ldrh	r2, [r4, #16]
     9f2:	2302      	movs	r3, #2
     9f4:	4313      	orrs	r3, r2
     9f6:	8223      	strh	r3, [r4, #16]
     9f8:	e012      	b.n	a20 <_usart_interrupt_handler+0xd4>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     9fa:	0759      	lsls	r1, r3, #29
     9fc:	d507      	bpl.n	a0e <_usart_interrupt_handler+0xc2>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     9fe:	221e      	movs	r2, #30
     a00:	2322      	movs	r3, #34	; 0x22
     a02:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     a04:	8a22      	ldrh	r2, [r4, #16]
     a06:	2304      	movs	r3, #4
     a08:	4313      	orrs	r3, r2
     a0a:	8223      	strh	r3, [r4, #16]
     a0c:	e008      	b.n	a20 <_usart_interrupt_handler+0xd4>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a0e:	07da      	lsls	r2, r3, #31
     a10:	d506      	bpl.n	a20 <_usart_interrupt_handler+0xd4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     a12:	2213      	movs	r2, #19
     a14:	2322      	movs	r3, #34	; 0x22
     a16:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     a18:	8a22      	ldrh	r2, [r4, #16]
     a1a:	2301      	movs	r3, #1
     a1c:	4313      	orrs	r3, r2
     a1e:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a20:	077b      	lsls	r3, r7, #29
     a22:	d527      	bpl.n	a74 <_usart_interrupt_handler+0x128>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a24:	692b      	ldr	r3, [r5, #16]
     a26:	1c28      	adds	r0, r5, #0
     a28:	4798      	blx	r3
     a2a:	e023      	b.n	a74 <_usart_interrupt_handler+0x128>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a2c:	8b22      	ldrh	r2, [r4, #24]
     a2e:	05d2      	lsls	r2, r2, #23
     a30:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a32:	b2d3      	uxtb	r3, r2
     a34:	6969      	ldr	r1, [r5, #20]
     a36:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a38:	696b      	ldr	r3, [r5, #20]
     a3a:	1c59      	adds	r1, r3, #1
     a3c:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a3e:	7969      	ldrb	r1, [r5, #5]
     a40:	2901      	cmp	r1, #1
     a42:	d104      	bne.n	a4e <_usart_interrupt_handler+0x102>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     a44:	0a12      	lsrs	r2, r2, #8
     a46:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     a48:	696b      	ldr	r3, [r5, #20]
     a4a:	3301      	adds	r3, #1
     a4c:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a4e:	8bab      	ldrh	r3, [r5, #28]
     a50:	3b01      	subs	r3, #1
     a52:	b29b      	uxth	r3, r3
     a54:	83ab      	strh	r3, [r5, #28]
     a56:	2b00      	cmp	r3, #0
     a58:	d10c      	bne.n	a74 <_usart_interrupt_handler+0x128>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a5a:	2304      	movs	r3, #4
     a5c:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     a5e:	2200      	movs	r2, #0
     a60:	2322      	movs	r3, #34	; 0x22
     a62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     a64:	07ba      	lsls	r2, r7, #30
     a66:	d505      	bpl.n	a74 <_usart_interrupt_handler+0x128>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     a68:	68eb      	ldr	r3, [r5, #12]
     a6a:	1c28      	adds	r0, r5, #0
     a6c:	4798      	blx	r3
     a6e:	e001      	b.n	a74 <_usart_interrupt_handler+0x128>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a70:	2304      	movs	r3, #4
     a72:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	200001b0 	.word	0x200001b0

00000a7c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a7c:	4770      	bx	lr
     a7e:	46c0      	nop			; (mov r8, r8)

00000a80 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a80:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     a82:	4b0a      	ldr	r3, [pc, #40]	; (aac <_sercom_set_handler+0x2c>)
     a84:	781b      	ldrb	r3, [r3, #0]
     a86:	2b00      	cmp	r3, #0
     a88:	d10c      	bne.n	aa4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a8a:	4f09      	ldr	r7, [pc, #36]	; (ab0 <_sercom_set_handler+0x30>)
     a8c:	4e09      	ldr	r6, [pc, #36]	; (ab4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a8e:	4d0a      	ldr	r5, [pc, #40]	; (ab8 <_sercom_set_handler+0x38>)
     a90:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a92:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a94:	195a      	adds	r2, r3, r5
     a96:	6014      	str	r4, [r2, #0]
     a98:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a9a:	2b18      	cmp	r3, #24
     a9c:	d1f9      	bne.n	a92 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     a9e:	2201      	movs	r2, #1
     aa0:	4b02      	ldr	r3, [pc, #8]	; (aac <_sercom_set_handler+0x2c>)
     aa2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     aa4:	0080      	lsls	r0, r0, #2
     aa6:	4b02      	ldr	r3, [pc, #8]	; (ab0 <_sercom_set_handler+0x30>)
     aa8:	50c1      	str	r1, [r0, r3]
}
     aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aac:	20000090 	.word	0x20000090
     ab0:	20000094 	.word	0x20000094
     ab4:	00000a7d 	.word	0x00000a7d
     ab8:	200001b0 	.word	0x200001b0

00000abc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     abc:	b510      	push	{r4, lr}
     abe:	b082      	sub	sp, #8
     ac0:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     ac2:	4668      	mov	r0, sp
     ac4:	4905      	ldr	r1, [pc, #20]	; (adc <_sercom_get_interrupt_vector+0x20>)
     ac6:	2206      	movs	r2, #6
     ac8:	4b05      	ldr	r3, [pc, #20]	; (ae0 <_sercom_get_interrupt_vector+0x24>)
     aca:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     acc:	1c20      	adds	r0, r4, #0
     ace:	4b05      	ldr	r3, [pc, #20]	; (ae4 <_sercom_get_interrupt_vector+0x28>)
     ad0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     ad2:	466b      	mov	r3, sp
     ad4:	5618      	ldrsb	r0, [r3, r0]
}
     ad6:	b002      	add	sp, #8
     ad8:	bd10      	pop	{r4, pc}
     ada:	46c0      	nop			; (mov r8, r8)
     adc:	00002914 	.word	0x00002914
     ae0:	00001901 	.word	0x00001901
     ae4:	000004d9 	.word	0x000004d9

00000ae8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ae8:	b508      	push	{r3, lr}
     aea:	4b02      	ldr	r3, [pc, #8]	; (af4 <SERCOM0_Handler+0xc>)
     aec:	681b      	ldr	r3, [r3, #0]
     aee:	2000      	movs	r0, #0
     af0:	4798      	blx	r3
     af2:	bd08      	pop	{r3, pc}
     af4:	20000094 	.word	0x20000094

00000af8 <SERCOM1_Handler>:
     af8:	b508      	push	{r3, lr}
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <SERCOM1_Handler+0xc>)
     afc:	685b      	ldr	r3, [r3, #4]
     afe:	2001      	movs	r0, #1
     b00:	4798      	blx	r3
     b02:	bd08      	pop	{r3, pc}
     b04:	20000094 	.word	0x20000094

00000b08 <SERCOM2_Handler>:
     b08:	b508      	push	{r3, lr}
     b0a:	4b02      	ldr	r3, [pc, #8]	; (b14 <SERCOM2_Handler+0xc>)
     b0c:	689b      	ldr	r3, [r3, #8]
     b0e:	2002      	movs	r0, #2
     b10:	4798      	blx	r3
     b12:	bd08      	pop	{r3, pc}
     b14:	20000094 	.word	0x20000094

00000b18 <SERCOM3_Handler>:
     b18:	b508      	push	{r3, lr}
     b1a:	4b02      	ldr	r3, [pc, #8]	; (b24 <SERCOM3_Handler+0xc>)
     b1c:	68db      	ldr	r3, [r3, #12]
     b1e:	2003      	movs	r0, #3
     b20:	4798      	blx	r3
     b22:	bd08      	pop	{r3, pc}
     b24:	20000094 	.word	0x20000094

00000b28 <SERCOM4_Handler>:
     b28:	b508      	push	{r3, lr}
     b2a:	4b02      	ldr	r3, [pc, #8]	; (b34 <SERCOM4_Handler+0xc>)
     b2c:	691b      	ldr	r3, [r3, #16]
     b2e:	2004      	movs	r0, #4
     b30:	4798      	blx	r3
     b32:	bd08      	pop	{r3, pc}
     b34:	20000094 	.word	0x20000094

00000b38 <SERCOM5_Handler>:
     b38:	b508      	push	{r3, lr}
     b3a:	4b02      	ldr	r3, [pc, #8]	; (b44 <SERCOM5_Handler+0xc>)
     b3c:	695b      	ldr	r3, [r3, #20]
     b3e:	2005      	movs	r0, #5
     b40:	4798      	blx	r3
     b42:	bd08      	pop	{r3, pc}
     b44:	20000094 	.word	0x20000094

00000b48 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     b48:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     b4a:	2000      	movs	r0, #0
     b4c:	4b08      	ldr	r3, [pc, #32]	; (b70 <delay_init+0x28>)
     b4e:	4798      	blx	r3
	cycles_per_ms /= 1000;
     b50:	4c08      	ldr	r4, [pc, #32]	; (b74 <delay_init+0x2c>)
     b52:	21fa      	movs	r1, #250	; 0xfa
     b54:	0089      	lsls	r1, r1, #2
     b56:	47a0      	blx	r4
     b58:	4b07      	ldr	r3, [pc, #28]	; (b78 <delay_init+0x30>)
     b5a:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     b5c:	21fa      	movs	r1, #250	; 0xfa
     b5e:	0089      	lsls	r1, r1, #2
     b60:	47a0      	blx	r4
     b62:	4b06      	ldr	r3, [pc, #24]	; (b7c <delay_init+0x34>)
     b64:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     b66:	2205      	movs	r2, #5
     b68:	4b05      	ldr	r3, [pc, #20]	; (b80 <delay_init+0x38>)
     b6a:	601a      	str	r2, [r3, #0]
}
     b6c:	bd10      	pop	{r4, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	00000f05 	.word	0x00000f05
     b74:	000017d1 	.word	0x000017d1
     b78:	20000004 	.word	0x20000004
     b7c:	20000000 	.word	0x20000000
     b80:	e000e010 	.word	0xe000e010

00000b84 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     b84:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     b86:	4b08      	ldr	r3, [pc, #32]	; (ba8 <delay_cycles_ms+0x24>)
     b88:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     b8a:	4a08      	ldr	r2, [pc, #32]	; (bac <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     b8c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b8e:	2180      	movs	r1, #128	; 0x80
     b90:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     b92:	e006      	b.n	ba2 <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     b94:	2c00      	cmp	r4, #0
     b96:	d004      	beq.n	ba2 <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     b98:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     b9a:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     b9c:	6813      	ldr	r3, [r2, #0]
     b9e:	420b      	tst	r3, r1
     ba0:	d0fc      	beq.n	b9c <delay_cycles_ms+0x18>
     ba2:	3801      	subs	r0, #1
     ba4:	d2f6      	bcs.n	b94 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     ba6:	bd30      	pop	{r4, r5, pc}
     ba8:	20000004 	.word	0x20000004
     bac:	e000e010 	.word	0xe000e010

00000bb0 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     bb0:	4770      	bx	lr
     bb2:	46c0      	nop			; (mov r8, r8)

00000bb4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     bb4:	4b0c      	ldr	r3, [pc, #48]	; (be8 <cpu_irq_enter_critical+0x34>)
     bb6:	681b      	ldr	r3, [r3, #0]
     bb8:	2b00      	cmp	r3, #0
     bba:	d110      	bne.n	bde <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     bbc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     bc0:	2b00      	cmp	r3, #0
     bc2:	d109      	bne.n	bd8 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     bc4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bc6:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     bca:	2200      	movs	r2, #0
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <cpu_irq_enter_critical+0x38>)
     bce:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     bd0:	2201      	movs	r2, #1
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <cpu_irq_enter_critical+0x3c>)
     bd4:	701a      	strb	r2, [r3, #0]
     bd6:	e002      	b.n	bde <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bd8:	2200      	movs	r2, #0
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <cpu_irq_enter_critical+0x3c>)
     bdc:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bde:	4b02      	ldr	r3, [pc, #8]	; (be8 <cpu_irq_enter_critical+0x34>)
     be0:	681a      	ldr	r2, [r3, #0]
     be2:	3201      	adds	r2, #1
     be4:	601a      	str	r2, [r3, #0]
}
     be6:	4770      	bx	lr
     be8:	200000ac 	.word	0x200000ac
     bec:	20000008 	.word	0x20000008
     bf0:	200000b0 	.word	0x200000b0

00000bf4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     bf4:	4b08      	ldr	r3, [pc, #32]	; (c18 <cpu_irq_leave_critical+0x24>)
     bf6:	681a      	ldr	r2, [r3, #0]
     bf8:	3a01      	subs	r2, #1
     bfa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     bfc:	681b      	ldr	r3, [r3, #0]
     bfe:	2b00      	cmp	r3, #0
     c00:	d109      	bne.n	c16 <cpu_irq_leave_critical+0x22>
     c02:	4b06      	ldr	r3, [pc, #24]	; (c1c <cpu_irq_leave_critical+0x28>)
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	2b00      	cmp	r3, #0
     c08:	d005      	beq.n	c16 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c0a:	2201      	movs	r2, #1
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <cpu_irq_leave_critical+0x2c>)
     c0e:	701a      	strb	r2, [r3, #0]
     c10:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     c14:	b662      	cpsie	i
	}
}
     c16:	4770      	bx	lr
     c18:	200000ac 	.word	0x200000ac
     c1c:	200000b0 	.word	0x200000b0
     c20:	20000008 	.word	0x20000008

00000c24 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     c24:	b508      	push	{r3, lr}
	switch (clock_source) {
     c26:	2807      	cmp	r0, #7
     c28:	d82b      	bhi.n	c82 <system_clock_source_get_hz+0x5e>
     c2a:	0080      	lsls	r0, r0, #2
     c2c:	4b17      	ldr	r3, [pc, #92]	; (c8c <system_clock_source_get_hz+0x68>)
     c2e:	581b      	ldr	r3, [r3, r0]
     c30:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     c32:	2080      	movs	r0, #128	; 0x80
     c34:	0200      	lsls	r0, r0, #8
     c36:	e027      	b.n	c88 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     c38:	4b15      	ldr	r3, [pc, #84]	; (c90 <system_clock_source_get_hz+0x6c>)
     c3a:	68d8      	ldr	r0, [r3, #12]
     c3c:	e024      	b.n	c88 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     c3e:	4b15      	ldr	r3, [pc, #84]	; (c94 <system_clock_source_get_hz+0x70>)
     c40:	6a18      	ldr	r0, [r3, #32]
     c42:	0580      	lsls	r0, r0, #22
     c44:	0f80      	lsrs	r0, r0, #30
     c46:	4b14      	ldr	r3, [pc, #80]	; (c98 <system_clock_source_get_hz+0x74>)
     c48:	40c3      	lsrs	r3, r0
     c4a:	1c18      	adds	r0, r3, #0
     c4c:	e01c      	b.n	c88 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     c4e:	4b10      	ldr	r3, [pc, #64]	; (c90 <system_clock_source_get_hz+0x6c>)
     c50:	6918      	ldr	r0, [r3, #16]
     c52:	e019      	b.n	c88 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     c54:	4b0e      	ldr	r3, [pc, #56]	; (c90 <system_clock_source_get_hz+0x6c>)
     c56:	681b      	ldr	r3, [r3, #0]
     c58:	2002      	movs	r0, #2
     c5a:	4018      	ands	r0, r3
     c5c:	d014      	beq.n	c88 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c5e:	490d      	ldr	r1, [pc, #52]	; (c94 <system_clock_source_get_hz+0x70>)
     c60:	2210      	movs	r2, #16
     c62:	68cb      	ldr	r3, [r1, #12]
     c64:	421a      	tst	r2, r3
     c66:	d0fc      	beq.n	c62 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     c68:	4b09      	ldr	r3, [pc, #36]	; (c90 <system_clock_source_get_hz+0x6c>)
     c6a:	681b      	ldr	r3, [r3, #0]
     c6c:	075a      	lsls	r2, r3, #29
     c6e:	d50a      	bpl.n	c86 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c70:	2000      	movs	r0, #0
     c72:	4b0a      	ldr	r3, [pc, #40]	; (c9c <system_clock_source_get_hz+0x78>)
     c74:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     c76:	4b06      	ldr	r3, [pc, #24]	; (c90 <system_clock_source_get_hz+0x6c>)
     c78:	689b      	ldr	r3, [r3, #8]
     c7a:	041b      	lsls	r3, r3, #16
     c7c:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     c7e:	4358      	muls	r0, r3
     c80:	e002      	b.n	c88 <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
     c82:	2000      	movs	r0, #0
     c84:	e000      	b.n	c88 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     c86:	4806      	ldr	r0, [pc, #24]	; (ca0 <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
     c88:	bd08      	pop	{r3, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	0000291c 	.word	0x0000291c
     c90:	200000b4 	.word	0x200000b4
     c94:	40000800 	.word	0x40000800
     c98:	007a1200 	.word	0x007a1200
     c9c:	00001039 	.word	0x00001039
     ca0:	02dc6c00 	.word	0x02dc6c00

00000ca4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     ca6:	4b0c      	ldr	r3, [pc, #48]	; (cd8 <system_clock_source_osc8m_set_config+0x34>)
     ca8:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     caa:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     cac:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     cae:	7840      	ldrb	r0, [r0, #1]
     cb0:	2201      	movs	r2, #1
     cb2:	4010      	ands	r0, r2
     cb4:	0180      	lsls	r0, r0, #6
     cb6:	2640      	movs	r6, #64	; 0x40
     cb8:	43b4      	bics	r4, r6
     cba:	4304      	orrs	r4, r0
     cbc:	402a      	ands	r2, r5
     cbe:	01d0      	lsls	r0, r2, #7
     cc0:	2280      	movs	r2, #128	; 0x80
     cc2:	4394      	bics	r4, r2
     cc4:	1c22      	adds	r2, r4, #0
     cc6:	4302      	orrs	r2, r0
     cc8:	2003      	movs	r0, #3
     cca:	4001      	ands	r1, r0
     ccc:	0209      	lsls	r1, r1, #8
     cce:	4803      	ldr	r0, [pc, #12]	; (cdc <system_clock_source_osc8m_set_config+0x38>)
     cd0:	4002      	ands	r2, r0
     cd2:	430a      	orrs	r2, r1
     cd4:	621a      	str	r2, [r3, #32]
}
     cd6:	bd70      	pop	{r4, r5, r6, pc}
     cd8:	40000800 	.word	0x40000800
     cdc:	fffffcff 	.word	0xfffffcff

00000ce0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     ce0:	2807      	cmp	r0, #7
     ce2:	d83b      	bhi.n	d5c <system_clock_source_enable+0x7c>
     ce4:	0080      	lsls	r0, r0, #2
     ce6:	4b1e      	ldr	r3, [pc, #120]	; (d60 <system_clock_source_enable+0x80>)
     ce8:	581b      	ldr	r3, [r3, r0]
     cea:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     cec:	2000      	movs	r0, #0
     cee:	e036      	b.n	d5e <system_clock_source_enable+0x7e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     cf0:	4b1c      	ldr	r3, [pc, #112]	; (d64 <system_clock_source_enable+0x84>)
     cf2:	6a19      	ldr	r1, [r3, #32]
     cf4:	2202      	movs	r2, #2
     cf6:	430a      	orrs	r2, r1
     cf8:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     cfa:	2000      	movs	r0, #0
     cfc:	e02f      	b.n	d5e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     cfe:	4b19      	ldr	r3, [pc, #100]	; (d64 <system_clock_source_enable+0x84>)
     d00:	6999      	ldr	r1, [r3, #24]
     d02:	2202      	movs	r2, #2
     d04:	430a      	orrs	r2, r1
     d06:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d08:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     d0a:	e028      	b.n	d5e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     d0c:	4b15      	ldr	r3, [pc, #84]	; (d64 <system_clock_source_enable+0x84>)
     d0e:	8a19      	ldrh	r1, [r3, #16]
     d10:	2202      	movs	r2, #2
     d12:	430a      	orrs	r2, r1
     d14:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d16:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     d18:	e021      	b.n	d5e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     d1a:	4b12      	ldr	r3, [pc, #72]	; (d64 <system_clock_source_enable+0x84>)
     d1c:	8a99      	ldrh	r1, [r3, #20]
     d1e:	2202      	movs	r2, #2
     d20:	430a      	orrs	r2, r1
     d22:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d24:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     d26:	e01a      	b.n	d5e <system_clock_source_enable+0x7e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     d28:	4b0f      	ldr	r3, [pc, #60]	; (d68 <system_clock_source_enable+0x88>)
     d2a:	6819      	ldr	r1, [r3, #0]
     d2c:	2202      	movs	r2, #2
     d2e:	430a      	orrs	r2, r1
     d30:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d32:	681a      	ldr	r2, [r3, #0]
     d34:	4b0d      	ldr	r3, [pc, #52]	; (d6c <system_clock_source_enable+0x8c>)
     d36:	401a      	ands	r2, r3
     d38:	4b0a      	ldr	r3, [pc, #40]	; (d64 <system_clock_source_enable+0x84>)
     d3a:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     d3c:	1c19      	adds	r1, r3, #0
     d3e:	2210      	movs	r2, #16
     d40:	68cb      	ldr	r3, [r1, #12]
     d42:	421a      	tst	r2, r3
     d44:	d0fc      	beq.n	d40 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     d46:	4a08      	ldr	r2, [pc, #32]	; (d68 <system_clock_source_enable+0x88>)
     d48:	6891      	ldr	r1, [r2, #8]
     d4a:	4b06      	ldr	r3, [pc, #24]	; (d64 <system_clock_source_enable+0x84>)
     d4c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     d4e:	6851      	ldr	r1, [r2, #4]
     d50:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     d52:	6812      	ldr	r2, [r2, #0]
     d54:	b292      	uxth	r2, r2
     d56:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     d58:	2000      	movs	r0, #0
     d5a:	e000      	b.n	d5e <system_clock_source_enable+0x7e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d5c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     d5e:	4770      	bx	lr
     d60:	0000293c 	.word	0x0000293c
     d64:	40000800 	.word	0x40000800
     d68:	200000b4 	.word	0x200000b4
     d6c:	0000ff7f 	.word	0x0000ff7f

00000d70 <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
     d70:	b530      	push	{r4, r5, lr}
     d72:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d74:	22c2      	movs	r2, #194	; 0xc2
     d76:	00d2      	lsls	r2, r2, #3
     d78:	4b13      	ldr	r3, [pc, #76]	; (dc8 <system_clock_init+0x58>)
     d7a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     d7c:	4b13      	ldr	r3, [pc, #76]	; (dcc <system_clock_init+0x5c>)
     d7e:	685a      	ldr	r2, [r3, #4]
     d80:	211e      	movs	r1, #30
     d82:	438a      	bics	r2, r1
     d84:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
     d86:	a803      	add	r0, sp, #12
     d88:	2400      	movs	r4, #0
     d8a:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     d8c:	2501      	movs	r5, #1
     d8e:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d90:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d92:	4b0f      	ldr	r3, [pc, #60]	; (dd0 <system_clock_init+0x60>)
     d94:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d96:	2006      	movs	r0, #6
     d98:	4b0e      	ldr	r3, [pc, #56]	; (dd4 <system_clock_init+0x64>)
     d9a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d9c:	4b0e      	ldr	r3, [pc, #56]	; (dd8 <system_clock_init+0x68>)
     d9e:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     da0:	4b0e      	ldr	r3, [pc, #56]	; (ddc <system_clock_init+0x6c>)
     da2:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     da4:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     da6:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     da8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     daa:	466a      	mov	r2, sp
     dac:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
     dae:	2306      	movs	r3, #6
     db0:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
     db2:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     db4:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     db6:	2000      	movs	r0, #0
     db8:	4669      	mov	r1, sp
     dba:	4b09      	ldr	r3, [pc, #36]	; (de0 <system_clock_init+0x70>)
     dbc:	4798      	blx	r3
     dbe:	2000      	movs	r0, #0
     dc0:	4b08      	ldr	r3, [pc, #32]	; (de4 <system_clock_init+0x74>)
     dc2:	4798      	blx	r3
#endif
}
     dc4:	b005      	add	sp, #20
     dc6:	bd30      	pop	{r4, r5, pc}
     dc8:	40000800 	.word	0x40000800
     dcc:	41004000 	.word	0x41004000
     dd0:	00000ca5 	.word	0x00000ca5
     dd4:	00000ce1 	.word	0x00000ce1
     dd8:	00000de9 	.word	0x00000de9
     ddc:	40000400 	.word	0x40000400
     de0:	00000e0d 	.word	0x00000e0d
     de4:	00000ec1 	.word	0x00000ec1

00000de8 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     de8:	4b06      	ldr	r3, [pc, #24]	; (e04 <system_gclk_init+0x1c>)
     dea:	6999      	ldr	r1, [r3, #24]
     dec:	2208      	movs	r2, #8
     dee:	430a      	orrs	r2, r1
     df0:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     df2:	2201      	movs	r2, #1
     df4:	4b04      	ldr	r3, [pc, #16]	; (e08 <system_gclk_init+0x20>)
     df6:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     df8:	1c19      	adds	r1, r3, #0
     dfa:	780b      	ldrb	r3, [r1, #0]
     dfc:	4213      	tst	r3, r2
     dfe:	d1fc      	bne.n	dfa <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e00:	4770      	bx	lr
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	40000400 	.word	0x40000400
     e08:	40000c00 	.word	0x40000c00

00000e0c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e0e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e10:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e12:	780d      	ldrb	r5, [r1, #0]
     e14:	022d      	lsls	r5, r5, #8
     e16:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e18:	784b      	ldrb	r3, [r1, #1]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d002      	beq.n	e24 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e1e:	2380      	movs	r3, #128	; 0x80
     e20:	02db      	lsls	r3, r3, #11
     e22:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e24:	7a4b      	ldrb	r3, [r1, #9]
     e26:	2b00      	cmp	r3, #0
     e28:	d002      	beq.n	e30 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e2a:	2380      	movs	r3, #128	; 0x80
     e2c:	031b      	lsls	r3, r3, #12
     e2e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e30:	684c      	ldr	r4, [r1, #4]
     e32:	2c01      	cmp	r4, #1
     e34:	d917      	bls.n	e66 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e36:	1e63      	subs	r3, r4, #1
     e38:	421c      	tst	r4, r3
     e3a:	d10f      	bne.n	e5c <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e3c:	2c02      	cmp	r4, #2
     e3e:	d906      	bls.n	e4e <system_gclk_gen_set_config+0x42>
     e40:	2302      	movs	r3, #2
     e42:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     e44:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     e46:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e48:	429c      	cmp	r4, r3
     e4a:	d8fb      	bhi.n	e44 <system_gclk_gen_set_config+0x38>
     e4c:	e000      	b.n	e50 <system_gclk_gen_set_config+0x44>
     e4e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e50:	0217      	lsls	r7, r2, #8
     e52:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e54:	2380      	movs	r3, #128	; 0x80
     e56:	035b      	lsls	r3, r3, #13
     e58:	431d      	orrs	r5, r3
     e5a:	e004      	b.n	e66 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e5c:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     e5e:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e60:	2380      	movs	r3, #128	; 0x80
     e62:	029b      	lsls	r3, r3, #10
     e64:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e66:	7a0b      	ldrb	r3, [r1, #8]
     e68:	2b00      	cmp	r3, #0
     e6a:	d002      	beq.n	e72 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     e6c:	2380      	movs	r3, #128	; 0x80
     e6e:	039b      	lsls	r3, r3, #14
     e70:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
     e72:	4a0f      	ldr	r2, [pc, #60]	; (eb0 <system_gclk_gen_set_config+0xa4>)
     e74:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     e76:	b25b      	sxtb	r3, r3
     e78:	2b00      	cmp	r3, #0
     e7a:	dbfb      	blt.n	e74 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     e7c:	4b0d      	ldr	r3, [pc, #52]	; (eb4 <system_gclk_gen_set_config+0xa8>)
     e7e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     e80:	4b0d      	ldr	r3, [pc, #52]	; (eb8 <system_gclk_gen_set_config+0xac>)
     e82:	701e      	strb	r6, [r3, #0]
     e84:	4a0a      	ldr	r2, [pc, #40]	; (eb0 <system_gclk_gen_set_config+0xa4>)
     e86:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     e88:	b25b      	sxtb	r3, r3
     e8a:	2b00      	cmp	r3, #0
     e8c:	dbfb      	blt.n	e86 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     e8e:	4b08      	ldr	r3, [pc, #32]	; (eb0 <system_gclk_gen_set_config+0xa4>)
     e90:	609f      	str	r7, [r3, #8]
     e92:	1c1a      	adds	r2, r3, #0
     e94:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     e96:	b25b      	sxtb	r3, r3
     e98:	2b00      	cmp	r3, #0
     e9a:	dbfb      	blt.n	e94 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     e9c:	4b04      	ldr	r3, [pc, #16]	; (eb0 <system_gclk_gen_set_config+0xa4>)
     e9e:	6859      	ldr	r1, [r3, #4]
     ea0:	2280      	movs	r2, #128	; 0x80
     ea2:	0252      	lsls	r2, r2, #9
     ea4:	400a      	ands	r2, r1
     ea6:	4315      	orrs	r5, r2
     ea8:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <system_gclk_gen_set_config+0xb0>)
     eac:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb0:	40000c00 	.word	0x40000c00
     eb4:	00000bb5 	.word	0x00000bb5
     eb8:	40000c08 	.word	0x40000c08
     ebc:	00000bf5 	.word	0x00000bf5

00000ec0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     ec0:	b510      	push	{r4, lr}
     ec2:	1c04      	adds	r4, r0, #0
     ec4:	4a0b      	ldr	r2, [pc, #44]	; (ef4 <system_gclk_gen_enable+0x34>)
     ec6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     ec8:	b25b      	sxtb	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	dbfb      	blt.n	ec6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     ece:	4b0a      	ldr	r3, [pc, #40]	; (ef8 <system_gclk_gen_enable+0x38>)
     ed0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     ed2:	4b0a      	ldr	r3, [pc, #40]	; (efc <system_gclk_gen_enable+0x3c>)
     ed4:	701c      	strb	r4, [r3, #0]
     ed6:	4a07      	ldr	r2, [pc, #28]	; (ef4 <system_gclk_gen_enable+0x34>)
     ed8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     eda:	b25b      	sxtb	r3, r3
     edc:	2b00      	cmp	r3, #0
     ede:	dbfb      	blt.n	ed8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     ee0:	4b04      	ldr	r3, [pc, #16]	; (ef4 <system_gclk_gen_enable+0x34>)
     ee2:	6859      	ldr	r1, [r3, #4]
     ee4:	2280      	movs	r2, #128	; 0x80
     ee6:	0252      	lsls	r2, r2, #9
     ee8:	430a      	orrs	r2, r1
     eea:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     eec:	4b04      	ldr	r3, [pc, #16]	; (f00 <system_gclk_gen_enable+0x40>)
     eee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     ef0:	bd10      	pop	{r4, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	40000c00 	.word	0x40000c00
     ef8:	00000bb5 	.word	0x00000bb5
     efc:	40000c04 	.word	0x40000c04
     f00:	00000bf5 	.word	0x00000bf5

00000f04 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     f04:	b570      	push	{r4, r5, r6, lr}
     f06:	1c04      	adds	r4, r0, #0
     f08:	4a1a      	ldr	r2, [pc, #104]	; (f74 <system_gclk_gen_get_hz+0x70>)
     f0a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f0c:	b25b      	sxtb	r3, r3
     f0e:	2b00      	cmp	r3, #0
     f10:	dbfb      	blt.n	f0a <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f12:	4b19      	ldr	r3, [pc, #100]	; (f78 <system_gclk_gen_get_hz+0x74>)
     f14:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f16:	4b19      	ldr	r3, [pc, #100]	; (f7c <system_gclk_gen_get_hz+0x78>)
     f18:	701c      	strb	r4, [r3, #0]
     f1a:	4a16      	ldr	r2, [pc, #88]	; (f74 <system_gclk_gen_get_hz+0x70>)
     f1c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f1e:	b25b      	sxtb	r3, r3
     f20:	2b00      	cmp	r3, #0
     f22:	dbfb      	blt.n	f1c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     f24:	4e13      	ldr	r6, [pc, #76]	; (f74 <system_gclk_gen_get_hz+0x70>)
     f26:	6870      	ldr	r0, [r6, #4]
     f28:	04c0      	lsls	r0, r0, #19
     f2a:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
     f2c:	4b14      	ldr	r3, [pc, #80]	; (f80 <system_gclk_gen_get_hz+0x7c>)
     f2e:	4798      	blx	r3
     f30:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f32:	4b12      	ldr	r3, [pc, #72]	; (f7c <system_gclk_gen_get_hz+0x78>)
     f34:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     f36:	6876      	ldr	r6, [r6, #4]
     f38:	02f6      	lsls	r6, r6, #11
     f3a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f3c:	4b11      	ldr	r3, [pc, #68]	; (f84 <system_gclk_gen_get_hz+0x80>)
     f3e:	701c      	strb	r4, [r3, #0]
     f40:	4a0c      	ldr	r2, [pc, #48]	; (f74 <system_gclk_gen_get_hz+0x70>)
     f42:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f44:	b25b      	sxtb	r3, r3
     f46:	2b00      	cmp	r3, #0
     f48:	dbfb      	blt.n	f42 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     f4a:	4b0a      	ldr	r3, [pc, #40]	; (f74 <system_gclk_gen_get_hz+0x70>)
     f4c:	689c      	ldr	r4, [r3, #8]
     f4e:	0a24      	lsrs	r4, r4, #8
     f50:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f52:	4b0d      	ldr	r3, [pc, #52]	; (f88 <system_gclk_gen_get_hz+0x84>)
     f54:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     f56:	2e00      	cmp	r6, #0
     f58:	d107      	bne.n	f6a <system_gclk_gen_get_hz+0x66>
     f5a:	2c01      	cmp	r4, #1
     f5c:	d907      	bls.n	f6e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     f5e:	1c28      	adds	r0, r5, #0
     f60:	1c21      	adds	r1, r4, #0
     f62:	4b0a      	ldr	r3, [pc, #40]	; (f8c <system_gclk_gen_get_hz+0x88>)
     f64:	4798      	blx	r3
     f66:	1c05      	adds	r5, r0, #0
     f68:	e001      	b.n	f6e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     f6a:	3401      	adds	r4, #1
     f6c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     f6e:	1c28      	adds	r0, r5, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	40000c00 	.word	0x40000c00
     f78:	00000bb5 	.word	0x00000bb5
     f7c:	40000c04 	.word	0x40000c04
     f80:	00000c25 	.word	0x00000c25
     f84:	40000c08 	.word	0x40000c08
     f88:	00000bf5 	.word	0x00000bf5
     f8c:	000017d1 	.word	0x000017d1

00000f90 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f90:	b510      	push	{r4, lr}
     f92:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <system_gclk_chan_enable+0x20>)
     f96:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f98:	4b06      	ldr	r3, [pc, #24]	; (fb4 <system_gclk_chan_enable+0x24>)
     f9a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f9c:	4b06      	ldr	r3, [pc, #24]	; (fb8 <system_gclk_chan_enable+0x28>)
     f9e:	8859      	ldrh	r1, [r3, #2]
     fa0:	2280      	movs	r2, #128	; 0x80
     fa2:	01d2      	lsls	r2, r2, #7
     fa4:	430a      	orrs	r2, r1
     fa6:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     fa8:	4b04      	ldr	r3, [pc, #16]	; (fbc <system_gclk_chan_enable+0x2c>)
     faa:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fac:	bd10      	pop	{r4, pc}
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	00000bb5 	.word	0x00000bb5
     fb4:	40000c02 	.word	0x40000c02
     fb8:	40000c00 	.word	0x40000c00
     fbc:	00000bf5 	.word	0x00000bf5

00000fc0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     fc0:	b510      	push	{r4, lr}
     fc2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     fc4:	4b0f      	ldr	r3, [pc, #60]	; (1004 <system_gclk_chan_disable+0x44>)
     fc6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     fc8:	4b0f      	ldr	r3, [pc, #60]	; (1008 <system_gclk_chan_disable+0x48>)
     fca:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     fcc:	4b0f      	ldr	r3, [pc, #60]	; (100c <system_gclk_chan_disable+0x4c>)
     fce:	8858      	ldrh	r0, [r3, #2]
     fd0:	0500      	lsls	r0, r0, #20
     fd2:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     fd4:	8859      	ldrh	r1, [r3, #2]
     fd6:	4a0e      	ldr	r2, [pc, #56]	; (1010 <system_gclk_chan_disable+0x50>)
     fd8:	400a      	ands	r2, r1
     fda:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     fdc:	8859      	ldrh	r1, [r3, #2]
     fde:	4a0d      	ldr	r2, [pc, #52]	; (1014 <system_gclk_chan_disable+0x54>)
     fe0:	400a      	ands	r2, r1
     fe2:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     fe4:	1c19      	adds	r1, r3, #0
     fe6:	2280      	movs	r2, #128	; 0x80
     fe8:	01d2      	lsls	r2, r2, #7
     fea:	884b      	ldrh	r3, [r1, #2]
     fec:	4213      	tst	r3, r2
     fee:	d1fc      	bne.n	fea <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     ff0:	4b06      	ldr	r3, [pc, #24]	; (100c <system_gclk_chan_disable+0x4c>)
     ff2:	0201      	lsls	r1, r0, #8
     ff4:	8858      	ldrh	r0, [r3, #2]
     ff6:	4a06      	ldr	r2, [pc, #24]	; (1010 <system_gclk_chan_disable+0x50>)
     ff8:	4002      	ands	r2, r0
     ffa:	430a      	orrs	r2, r1
     ffc:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <system_gclk_chan_disable+0x58>)
    1000:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1002:	bd10      	pop	{r4, pc}
    1004:	00000bb5 	.word	0x00000bb5
    1008:	40000c02 	.word	0x40000c02
    100c:	40000c00 	.word	0x40000c00
    1010:	fffff0ff 	.word	0xfffff0ff
    1014:	ffffbfff 	.word	0xffffbfff
    1018:	00000bf5 	.word	0x00000bf5

0000101c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    101c:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    101e:	780c      	ldrb	r4, [r1, #0]
    1020:	0224      	lsls	r4, r4, #8
    1022:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1024:	4b02      	ldr	r3, [pc, #8]	; (1030 <system_gclk_chan_set_config+0x14>)
    1026:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1028:	b2a4      	uxth	r4, r4
    102a:	4b02      	ldr	r3, [pc, #8]	; (1034 <system_gclk_chan_set_config+0x18>)
    102c:	805c      	strh	r4, [r3, #2]
}
    102e:	bd10      	pop	{r4, pc}
    1030:	00000fc1 	.word	0x00000fc1
    1034:	40000c00 	.word	0x40000c00

00001038 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1038:	b510      	push	{r4, lr}
    103a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    103c:	4b06      	ldr	r3, [pc, #24]	; (1058 <system_gclk_chan_get_hz+0x20>)
    103e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1040:	4b06      	ldr	r3, [pc, #24]	; (105c <system_gclk_chan_get_hz+0x24>)
    1042:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1044:	4b06      	ldr	r3, [pc, #24]	; (1060 <system_gclk_chan_get_hz+0x28>)
    1046:	885c      	ldrh	r4, [r3, #2]
    1048:	0524      	lsls	r4, r4, #20
    104a:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    104c:	4b05      	ldr	r3, [pc, #20]	; (1064 <system_gclk_chan_get_hz+0x2c>)
    104e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1050:	1c20      	adds	r0, r4, #0
    1052:	4b05      	ldr	r3, [pc, #20]	; (1068 <system_gclk_chan_get_hz+0x30>)
    1054:	4798      	blx	r3
}
    1056:	bd10      	pop	{r4, pc}
    1058:	00000bb5 	.word	0x00000bb5
    105c:	40000c02 	.word	0x40000c02
    1060:	40000c00 	.word	0x40000c00
    1064:	00000bf5 	.word	0x00000bf5
    1068:	00000f05 	.word	0x00000f05

0000106c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    106c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    106e:	78d3      	ldrb	r3, [r2, #3]
    1070:	2b00      	cmp	r3, #0
    1072:	d11e      	bne.n	10b2 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1074:	7813      	ldrb	r3, [r2, #0]
    1076:	2b80      	cmp	r3, #128	; 0x80
    1078:	d004      	beq.n	1084 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    107a:	061b      	lsls	r3, r3, #24
    107c:	2480      	movs	r4, #128	; 0x80
    107e:	0264      	lsls	r4, r4, #9
    1080:	4323      	orrs	r3, r4
    1082:	e000      	b.n	1086 <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1084:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1086:	7854      	ldrb	r4, [r2, #1]
    1088:	2502      	movs	r5, #2
    108a:	43ac      	bics	r4, r5
    108c:	d10a      	bne.n	10a4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    108e:	7894      	ldrb	r4, [r2, #2]
    1090:	2c00      	cmp	r4, #0
    1092:	d103      	bne.n	109c <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1094:	2480      	movs	r4, #128	; 0x80
    1096:	02a4      	lsls	r4, r4, #10
    1098:	4323      	orrs	r3, r4
    109a:	e002      	b.n	10a2 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    109c:	24c0      	movs	r4, #192	; 0xc0
    109e:	02e4      	lsls	r4, r4, #11
    10a0:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    10a2:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10a4:	7854      	ldrb	r4, [r2, #1]
    10a6:	3c01      	subs	r4, #1
    10a8:	2c01      	cmp	r4, #1
    10aa:	d804      	bhi.n	10b6 <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    10ac:	4c11      	ldr	r4, [pc, #68]	; (10f4 <_system_pinmux_config+0x88>)
    10ae:	4023      	ands	r3, r4
    10b0:	e001      	b.n	10b6 <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    10b2:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    10b4:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    10b6:	040d      	lsls	r5, r1, #16
    10b8:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10ba:	24a0      	movs	r4, #160	; 0xa0
    10bc:	05e4      	lsls	r4, r4, #23
    10be:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    10c0:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10c2:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    10c4:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10c6:	24d0      	movs	r4, #208	; 0xd0
    10c8:	0624      	lsls	r4, r4, #24
    10ca:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    10cc:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    10ce:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    10d0:	78d4      	ldrb	r4, [r2, #3]
    10d2:	2c00      	cmp	r4, #0
    10d4:	d10c      	bne.n	10f0 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    10d6:	035c      	lsls	r4, r3, #13
    10d8:	d505      	bpl.n	10e6 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    10da:	7893      	ldrb	r3, [r2, #2]
    10dc:	2b01      	cmp	r3, #1
    10de:	d101      	bne.n	10e4 <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    10e0:	6181      	str	r1, [r0, #24]
    10e2:	e000      	b.n	10e6 <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    10e4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    10e6:	7853      	ldrb	r3, [r2, #1]
    10e8:	3b01      	subs	r3, #1
    10ea:	2b01      	cmp	r3, #1
    10ec:	d800      	bhi.n	10f0 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    10ee:	6081      	str	r1, [r0, #8]
		}
	}
}
    10f0:	bd30      	pop	{r4, r5, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	fffbffff 	.word	0xfffbffff

000010f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    10f8:	b508      	push	{r3, lr}
    10fa:	1c03      	adds	r3, r0, #0
    10fc:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    10fe:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1100:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1102:	2900      	cmp	r1, #0
    1104:	d103      	bne.n	110e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1106:	0958      	lsrs	r0, r3, #5
    1108:	01c0      	lsls	r0, r0, #7
    110a:	4904      	ldr	r1, [pc, #16]	; (111c <system_pinmux_pin_set_config+0x24>)
    110c:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    110e:	211f      	movs	r1, #31
    1110:	400b      	ands	r3, r1
    1112:	2101      	movs	r1, #1
    1114:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1116:	4b02      	ldr	r3, [pc, #8]	; (1120 <system_pinmux_pin_set_config+0x28>)
    1118:	4798      	blx	r3
}
    111a:	bd08      	pop	{r3, pc}
    111c:	41004400 	.word	0x41004400
    1120:	0000106d 	.word	0x0000106d

00001124 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1124:	4770      	bx	lr
    1126:	46c0      	nop			; (mov r8, r8)

00001128 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1128:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    112a:	4b04      	ldr	r3, [pc, #16]	; (113c <system_init+0x14>)
    112c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    112e:	4b04      	ldr	r3, [pc, #16]	; (1140 <system_init+0x18>)
    1130:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1132:	4b04      	ldr	r3, [pc, #16]	; (1144 <system_init+0x1c>)
    1134:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1136:	4b04      	ldr	r3, [pc, #16]	; (1148 <system_init+0x20>)
    1138:	4798      	blx	r3
}
    113a:	bd08      	pop	{r3, pc}
    113c:	00000d71 	.word	0x00000d71
    1140:	00000bb1 	.word	0x00000bb1
    1144:	00001125 	.word	0x00001125
    1148:	00001125 	.word	0x00001125

0000114c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    114c:	e7fe      	b.n	114c <Dummy_Handler>
    114e:	46c0      	nop			; (mov r8, r8)

00001150 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1150:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1152:	4b19      	ldr	r3, [pc, #100]	; (11b8 <Reset_Handler+0x68>)
    1154:	4a19      	ldr	r2, [pc, #100]	; (11bc <Reset_Handler+0x6c>)
    1156:	429a      	cmp	r2, r3
    1158:	d003      	beq.n	1162 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    115a:	4b19      	ldr	r3, [pc, #100]	; (11c0 <Reset_Handler+0x70>)
    115c:	4a16      	ldr	r2, [pc, #88]	; (11b8 <Reset_Handler+0x68>)
    115e:	429a      	cmp	r2, r3
    1160:	d304      	bcc.n	116c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1162:	4b18      	ldr	r3, [pc, #96]	; (11c4 <Reset_Handler+0x74>)
    1164:	4a18      	ldr	r2, [pc, #96]	; (11c8 <Reset_Handler+0x78>)
    1166:	429a      	cmp	r2, r3
    1168:	d310      	bcc.n	118c <Reset_Handler+0x3c>
    116a:	e01b      	b.n	11a4 <Reset_Handler+0x54>
    116c:	4b17      	ldr	r3, [pc, #92]	; (11cc <Reset_Handler+0x7c>)
    116e:	4814      	ldr	r0, [pc, #80]	; (11c0 <Reset_Handler+0x70>)
    1170:	3003      	adds	r0, #3
    1172:	1ac0      	subs	r0, r0, r3
    1174:	0880      	lsrs	r0, r0, #2
    1176:	3001      	adds	r0, #1
    1178:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    117a:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    117c:	490e      	ldr	r1, [pc, #56]	; (11b8 <Reset_Handler+0x68>)
    117e:	4a0f      	ldr	r2, [pc, #60]	; (11bc <Reset_Handler+0x6c>)
    1180:	58d4      	ldr	r4, [r2, r3]
    1182:	50cc      	str	r4, [r1, r3]
    1184:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1186:	4283      	cmp	r3, r0
    1188:	d1fa      	bne.n	1180 <Reset_Handler+0x30>
    118a:	e7ea      	b.n	1162 <Reset_Handler+0x12>
    118c:	4b0e      	ldr	r3, [pc, #56]	; (11c8 <Reset_Handler+0x78>)
    118e:	1d1a      	adds	r2, r3, #4
    1190:	490c      	ldr	r1, [pc, #48]	; (11c4 <Reset_Handler+0x74>)
    1192:	3103      	adds	r1, #3
    1194:	1a89      	subs	r1, r1, r2
    1196:	0889      	lsrs	r1, r1, #2
    1198:	0089      	lsls	r1, r1, #2
    119a:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    119c:	2100      	movs	r1, #0
    119e:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    11a0:	4293      	cmp	r3, r2
    11a2:	d1fc      	bne.n	119e <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    11a4:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <Reset_Handler+0x80>)
    11a6:	217f      	movs	r1, #127	; 0x7f
    11a8:	4a0a      	ldr	r2, [pc, #40]	; (11d4 <Reset_Handler+0x84>)
    11aa:	438a      	bics	r2, r1
    11ac:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    11ae:	4b0a      	ldr	r3, [pc, #40]	; (11d8 <Reset_Handler+0x88>)
    11b0:	4798      	blx	r3

        /* Branch to main function */
        main();
    11b2:	4b0a      	ldr	r3, [pc, #40]	; (11dc <Reset_Handler+0x8c>)
    11b4:	4798      	blx	r3
    11b6:	e7fe      	b.n	11b6 <Reset_Handler+0x66>
    11b8:	20000000 	.word	0x20000000
    11bc:	00002be4 	.word	0x00002be4
    11c0:	20000070 	.word	0x20000070
    11c4:	20000214 	.word	0x20000214
    11c8:	20000070 	.word	0x20000070
    11cc:	20000004 	.word	0x20000004
    11d0:	e000ed00 	.word	0xe000ed00
    11d4:	00000000 	.word	0x00000000
    11d8:	000018b5 	.word	0x000018b5
    11dc:	000015c5 	.word	0x000015c5

000011e0 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    11e0:	4b06      	ldr	r3, [pc, #24]	; (11fc <_sbrk+0x1c>)
    11e2:	681b      	ldr	r3, [r3, #0]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d102      	bne.n	11ee <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    11e8:	4a05      	ldr	r2, [pc, #20]	; (1200 <_sbrk+0x20>)
    11ea:	4b04      	ldr	r3, [pc, #16]	; (11fc <_sbrk+0x1c>)
    11ec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    11ee:	4a03      	ldr	r2, [pc, #12]	; (11fc <_sbrk+0x1c>)
    11f0:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    11f2:	1818      	adds	r0, r3, r0
    11f4:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    11f6:	1c18      	adds	r0, r3, #0
    11f8:	4770      	bx	lr
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	200000c8 	.word	0x200000c8
    1200:	20002218 	.word	0x20002218

00001204 <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    1204:	2001      	movs	r0, #1
}
    1206:	4240      	negs	r0, r0
    1208:	4770      	bx	lr
    120a:	46c0      	nop			; (mov r8, r8)

0000120c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    120c:	2380      	movs	r3, #128	; 0x80
    120e:	019b      	lsls	r3, r3, #6
    1210:	604b      	str	r3, [r1, #4]

	return 0;
}
    1212:	2000      	movs	r0, #0
    1214:	4770      	bx	lr
    1216:	46c0      	nop			; (mov r8, r8)

00001218 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1218:	2001      	movs	r0, #1
    121a:	4770      	bx	lr

0000121c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    121c:	2000      	movs	r0, #0
    121e:	4770      	bx	lr

00001220 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1220:	b570      	push	{r4, r5, r6, lr}
    1222:	b082      	sub	sp, #8
    1224:	1c05      	adds	r5, r0, #0
    1226:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    1228:	2200      	movs	r2, #0
    122a:	466b      	mov	r3, sp
    122c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    122e:	4c06      	ldr	r4, [pc, #24]	; (1248 <usart_serial_getchar+0x28>)
    1230:	1c28      	adds	r0, r5, #0
    1232:	4669      	mov	r1, sp
    1234:	3106      	adds	r1, #6
    1236:	47a0      	blx	r4
    1238:	2800      	cmp	r0, #0
    123a:	d1f9      	bne.n	1230 <usart_serial_getchar+0x10>

	*c = temp;
    123c:	466b      	mov	r3, sp
    123e:	3306      	adds	r3, #6
    1240:	881b      	ldrh	r3, [r3, #0]
    1242:	7033      	strb	r3, [r6, #0]
}
    1244:	b002      	add	sp, #8
    1246:	bd70      	pop	{r4, r5, r6, pc}
    1248:	00000829 	.word	0x00000829

0000124c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	1c06      	adds	r6, r0, #0
    1250:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    1252:	4c03      	ldr	r4, [pc, #12]	; (1260 <usart_serial_putchar+0x14>)
    1254:	1c30      	adds	r0, r6, #0
    1256:	1c29      	adds	r1, r5, #0
    1258:	47a0      	blx	r4
    125a:	2800      	cmp	r0, #0
    125c:	d1fa      	bne.n	1254 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    125e:	bd70      	pop	{r4, r5, r6, pc}
    1260:	000007f5 	.word	0x000007f5

00001264 <configure_usart_CONSOLE>:
		
	};

//--------------------------------------configure console------------------------------------------------------------------------------
void configure_usart_CONSOLE(void)
{
    1264:	b570      	push	{r4, r5, r6, lr}
    1266:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1268:	2380      	movs	r3, #128	; 0x80
    126a:	05db      	lsls	r3, r3, #23
    126c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    126e:	2300      	movs	r3, #0
    1270:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1272:	22ff      	movs	r2, #255	; 0xff
    1274:	4669      	mov	r1, sp
    1276:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1278:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    127a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    127c:	2201      	movs	r2, #1
    127e:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    1280:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    1282:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1284:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1286:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1288:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    128a:	774b      	strb	r3, [r1, #29]
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 115200;
    128c:	23e1      	movs	r3, #225	; 0xe1
    128e:	025b      	lsls	r3, r3, #9
    1290:	9304      	str	r3, [sp, #16]

	/* Settings For New SAM Board. */
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;//
    1292:	23c4      	movs	r3, #196	; 0xc4
    1294:	039b      	lsls	r3, r3, #14
    1296:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
    1298:	2301      	movs	r3, #1
    129a:	425b      	negs	r3, r3
    129c:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
    129e:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA30D_SERCOM1_PAD2;
    12a0:	4b2d      	ldr	r3, [pc, #180]	; (1358 <configure_usart_CONSOLE+0xf4>)
    12a2:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA31D_SERCOM1_PAD3;
    12a4:	4b2d      	ldr	r3, [pc, #180]	; (135c <configure_usart_CONSOLE+0xf8>)
    12a6:	930b      	str	r3, [sp, #44]	; 0x2c
	
	while (usart_init(&usart_instance_CONSOLE, SERCOM1, &config_usart) != STATUS_OK) {	}
    12a8:	4e2d      	ldr	r6, [pc, #180]	; (1360 <configure_usart_CONSOLE+0xfc>)
    12aa:	4d2e      	ldr	r5, [pc, #184]	; (1364 <configure_usart_CONSOLE+0x100>)
    12ac:	4c2e      	ldr	r4, [pc, #184]	; (1368 <configure_usart_CONSOLE+0x104>)
    12ae:	1c30      	adds	r0, r6, #0
    12b0:	1c29      	adds	r1, r5, #0
    12b2:	466a      	mov	r2, sp
    12b4:	47a0      	blx	r4
    12b6:	2800      	cmp	r0, #0
    12b8:	d1f9      	bne.n	12ae <configure_usart_CONSOLE+0x4a>
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    12ba:	4c29      	ldr	r4, [pc, #164]	; (1360 <configure_usart_CONSOLE+0xfc>)
    12bc:	4b2b      	ldr	r3, [pc, #172]	; (136c <configure_usart_CONSOLE+0x108>)
    12be:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    12c0:	4a2b      	ldr	r2, [pc, #172]	; (1370 <configure_usart_CONSOLE+0x10c>)
    12c2:	4b2c      	ldr	r3, [pc, #176]	; (1374 <configure_usart_CONSOLE+0x110>)
    12c4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    12c6:	4a2c      	ldr	r2, [pc, #176]	; (1378 <configure_usart_CONSOLE+0x114>)
    12c8:	4b2c      	ldr	r3, [pc, #176]	; (137c <configure_usart_CONSOLE+0x118>)
    12ca:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    12cc:	1c20      	adds	r0, r4, #0
    12ce:	4925      	ldr	r1, [pc, #148]	; (1364 <configure_usart_CONSOLE+0x100>)
    12d0:	466a      	mov	r2, sp
    12d2:	4b25      	ldr	r3, [pc, #148]	; (1368 <configure_usart_CONSOLE+0x104>)
    12d4:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    12d6:	4e2a      	ldr	r6, [pc, #168]	; (1380 <configure_usart_CONSOLE+0x11c>)
    12d8:	6833      	ldr	r3, [r6, #0]
    12da:	6898      	ldr	r0, [r3, #8]
    12dc:	2100      	movs	r1, #0
    12de:	4d29      	ldr	r5, [pc, #164]	; (1384 <configure_usart_CONSOLE+0x120>)
    12e0:	47a8      	blx	r5
	setbuf(stdin, NULL);
    12e2:	6833      	ldr	r3, [r6, #0]
    12e4:	6858      	ldr	r0, [r3, #4]
    12e6:	2100      	movs	r1, #0
    12e8:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ea:	6825      	ldr	r5, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    12ec:	1c28      	adds	r0, r5, #0
    12ee:	4b26      	ldr	r3, [pc, #152]	; (1388 <configure_usart_CONSOLE+0x124>)
    12f0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12f2:	231f      	movs	r3, #31
    12f4:	4018      	ands	r0, r3
    12f6:	2301      	movs	r3, #1
    12f8:	4083      	lsls	r3, r0
    12fa:	1c18      	adds	r0, r3, #0
    12fc:	4b23      	ldr	r3, [pc, #140]	; (138c <configure_usart_CONSOLE+0x128>)
    12fe:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1300:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1302:	8a13      	ldrh	r3, [r2, #16]
    1304:	0bdb      	lsrs	r3, r3, #15
    1306:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1308:	b29b      	uxth	r3, r3
    130a:	2b00      	cmp	r3, #0
    130c:	d1f9      	bne.n	1302 <configure_usart_CONSOLE+0x9e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    130e:	682a      	ldr	r2, [r5, #0]
    1310:	2302      	movs	r3, #2
    1312:	4313      	orrs	r3, r2
    1314:	602b      	str	r3, [r5, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1316:	4b12      	ldr	r3, [pc, #72]	; (1360 <configure_usart_CONSOLE+0xfc>)
    1318:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    131a:	8a1a      	ldrh	r2, [r3, #16]
    131c:	0bd2      	lsrs	r2, r2, #15
    131e:	03d2      	lsls	r2, r2, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1320:	b292      	uxth	r2, r2
    1322:	2a00      	cmp	r2, #0
    1324:	d1f9      	bne.n	131a <configure_usart_CONSOLE+0xb6>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1326:	6859      	ldr	r1, [r3, #4]
    1328:	2280      	movs	r2, #128	; 0x80
    132a:	0252      	lsls	r2, r2, #9
    132c:	430a      	orrs	r2, r1
    132e:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    1330:	2101      	movs	r1, #1
    1332:	4a0b      	ldr	r2, [pc, #44]	; (1360 <configure_usart_CONSOLE+0xfc>)
    1334:	71d1      	strb	r1, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1336:	8a1a      	ldrh	r2, [r3, #16]
    1338:	0bd2      	lsrs	r2, r2, #15
    133a:	03d2      	lsls	r2, r2, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    133c:	b292      	uxth	r2, r2
    133e:	2a00      	cmp	r2, #0
    1340:	d1f9      	bne.n	1336 <configure_usart_CONSOLE+0xd2>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1342:	6859      	ldr	r1, [r3, #4]
    1344:	2280      	movs	r2, #128	; 0x80
    1346:	0292      	lsls	r2, r2, #10
    1348:	430a      	orrs	r2, r1
    134a:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    134c:	2201      	movs	r2, #1
    134e:	4b04      	ldr	r3, [pc, #16]	; (1360 <configure_usart_CONSOLE+0xfc>)
    1350:	719a      	strb	r2, [r3, #6]
	
	usart_enable(&usart_instance_CONSOLE);
	usart_enable_transceiver(&usart_instance_CONSOLE, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance_CONSOLE, USART_TRANSCEIVER_RX);
	
	}
    1352:	b00c      	add	sp, #48	; 0x30
    1354:	bd70      	pop	{r4, r5, r6, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	001e0003 	.word	0x001e0003
    135c:	001f0003 	.word	0x001f0003
    1360:	200001ec 	.word	0x200001ec
    1364:	42000c00 	.word	0x42000c00
    1368:	000005ad 	.word	0x000005ad
    136c:	200001ac 	.word	0x200001ac
    1370:	0000124d 	.word	0x0000124d
    1374:	200001a8 	.word	0x200001a8
    1378:	00001221 	.word	0x00001221
    137c:	200001a4 	.word	0x200001a4
    1380:	2000006c 	.word	0x2000006c
    1384:	00001a31 	.word	0x00001a31
    1388:	00000abd 	.word	0x00000abd
    138c:	e000e100 	.word	0xe000e100

00001390 <write_DEBUG>:

//-------------------------------------------------------------------------------------------------------------------------------------
void write_DEBUG(const char *tx_data)
{
    1390:	b510      	push	{r4, lr}
    1392:	1c04      	adds	r4, r0, #0
	usart_write_buffer_wait(&usart_instance_CONSOLE, (uint8_t *)tx_data, strlen(tx_data));
    1394:	4b03      	ldr	r3, [pc, #12]	; (13a4 <write_DEBUG+0x14>)
    1396:	4798      	blx	r3
    1398:	b282      	uxth	r2, r0
    139a:	4803      	ldr	r0, [pc, #12]	; (13a8 <write_DEBUG+0x18>)
    139c:	1c21      	adds	r1, r4, #0
    139e:	4b03      	ldr	r3, [pc, #12]	; (13ac <write_DEBUG+0x1c>)
    13a0:	4798      	blx	r3
}
    13a2:	bd10      	pop	{r4, pc}
    13a4:	00001b51 	.word	0x00001b51
    13a8:	200001ec 	.word	0x200001ec
    13ac:	00000889 	.word	0x00000889

000013b0 <configure_usart_STN>:
//-----------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------CONFIGURE STN------------------------------------------------------------------------------
int configure_usart_STN(void)
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13b4:	2380      	movs	r3, #128	; 0x80
    13b6:	05db      	lsls	r3, r3, #23
    13b8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13ba:	2300      	movs	r3, #0
    13bc:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    13be:	22ff      	movs	r2, #255	; 0xff
    13c0:	4669      	mov	r1, sp
    13c2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    13c4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    13c6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    13c8:	2296      	movs	r2, #150	; 0x96
    13ca:	0192      	lsls	r2, r2, #6
    13cc:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
    13ce:	2201      	movs	r2, #1
    13d0:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    13d2:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    13d4:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    13d6:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    13d8:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    13da:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    13dc:	774b      	strb	r3, [r1, #29]
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 9600;

	/* Settings For New SAM Board. */
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
    13de:	2380      	movs	r3, #128	; 0x80
    13e0:	035b      	lsls	r3, r3, #13
    13e2:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;
    13e4:	4b28      	ldr	r3, [pc, #160]	; (1488 <configure_usart_STN+0xd8>)
    13e6:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;
    13e8:	4b28      	ldr	r3, [pc, #160]	; (148c <configure_usart_STN+0xdc>)
    13ea:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
    13ec:	2301      	movs	r3, #1
    13ee:	425b      	negs	r3, r3
    13f0:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
    13f2:	930b      	str	r3, [sp, #44]	; 0x2c

	while (usart_init(&usart_instance_STN,SERCOM4, &config_usart) != STATUS_OK) {
    13f4:	4e26      	ldr	r6, [pc, #152]	; (1490 <configure_usart_STN+0xe0>)
    13f6:	4d27      	ldr	r5, [pc, #156]	; (1494 <configure_usart_STN+0xe4>)
    13f8:	4c27      	ldr	r4, [pc, #156]	; (1498 <configure_usart_STN+0xe8>)
    13fa:	1c30      	adds	r0, r6, #0
    13fc:	1c29      	adds	r1, r5, #0
    13fe:	466a      	mov	r2, sp
    1400:	47a0      	blx	r4
    1402:	2800      	cmp	r0, #0
    1404:	d1f9      	bne.n	13fa <configure_usart_STN+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1406:	4d22      	ldr	r5, [pc, #136]	; (1490 <configure_usart_STN+0xe0>)
    1408:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    140a:	1c20      	adds	r0, r4, #0
    140c:	4b23      	ldr	r3, [pc, #140]	; (149c <configure_usart_STN+0xec>)
    140e:	4798      	blx	r3
    1410:	231f      	movs	r3, #31
    1412:	4018      	ands	r0, r3
    1414:	2301      	movs	r3, #1
    1416:	4083      	lsls	r3, r0
    1418:	1c18      	adds	r0, r3, #0
    141a:	4b21      	ldr	r3, [pc, #132]	; (14a0 <configure_usart_STN+0xf0>)
    141c:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    141e:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1420:	8a13      	ldrh	r3, [r2, #16]
    1422:	0bdb      	lsrs	r3, r3, #15
    1424:	03db      	lsls	r3, r3, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1426:	b29b      	uxth	r3, r3
    1428:	2b00      	cmp	r3, #0
    142a:	d1f9      	bne.n	1420 <configure_usart_STN+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    142c:	6822      	ldr	r2, [r4, #0]
    142e:	2302      	movs	r3, #2
    1430:	4313      	orrs	r3, r2
    1432:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1434:	4b16      	ldr	r3, [pc, #88]	; (1490 <configure_usart_STN+0xe0>)
    1436:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1438:	8a1a      	ldrh	r2, [r3, #16]
    143a:	0bd2      	lsrs	r2, r2, #15
    143c:	03d2      	lsls	r2, r2, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    143e:	b292      	uxth	r2, r2
    1440:	2a00      	cmp	r2, #0
    1442:	d1f9      	bne.n	1438 <configure_usart_STN+0x88>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    1444:	6859      	ldr	r1, [r3, #4]
    1446:	2280      	movs	r2, #128	; 0x80
    1448:	0252      	lsls	r2, r2, #9
    144a:	430a      	orrs	r2, r1
    144c:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    144e:	2101      	movs	r1, #1
    1450:	4a0f      	ldr	r2, [pc, #60]	; (1490 <configure_usart_STN+0xe0>)
    1452:	71d1      	strb	r1, [r2, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    1454:	8a1a      	ldrh	r2, [r3, #16]
    1456:	0bd2      	lsrs	r2, r2, #15
    1458:	03d2      	lsls	r2, r2, #15
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    145a:	b292      	uxth	r2, r2
    145c:	2a00      	cmp	r2, #0
    145e:	d1f9      	bne.n	1454 <configure_usart_STN+0xa4>
	_usart_wait_for_sync(module);

	switch (transceiver_type) {
		case USART_TRANSCEIVER_RX:
			/* Enable RX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    1460:	6859      	ldr	r1, [r3, #4]
    1462:	2280      	movs	r2, #128	; 0x80
    1464:	0292      	lsls	r2, r2, #10
    1466:	430a      	orrs	r2, r1
    1468:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    146a:	2201      	movs	r2, #1
    146c:	4b08      	ldr	r3, [pc, #32]	; (1490 <configure_usart_STN+0xe0>)
    146e:	719a      	strb	r2, [r3, #6]

	usart_enable(&usart_instance_STN);
	usart_enable_transceiver(&usart_instance_STN, USART_TRANSCEIVER_TX);
	usart_enable_transceiver(&usart_instance_STN, USART_TRANSCEIVER_RX);
	
	_sercom_set_handler(_sercom_get_sercom_inst_index(SERCOM4),	stn_rx_handler);
    1470:	4c08      	ldr	r4, [pc, #32]	; (1494 <configure_usart_STN+0xe4>)
    1472:	1c20      	adds	r0, r4, #0
    1474:	4b0b      	ldr	r3, [pc, #44]	; (14a4 <configure_usart_STN+0xf4>)
    1476:	4798      	blx	r3
    1478:	490b      	ldr	r1, [pc, #44]	; (14a8 <configure_usart_STN+0xf8>)
    147a:	4b0c      	ldr	r3, [pc, #48]	; (14ac <configure_usart_STN+0xfc>)
    147c:	4798      	blx	r3
	SERCOM4->USART.INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    147e:	2304      	movs	r3, #4
    1480:	7363      	strb	r3, [r4, #13]
	
	retVal = 1;
	
	return retVal;
}
    1482:	2001      	movs	r0, #1
    1484:	b00c      	add	sp, #48	; 0x30
    1486:	bd70      	pop	{r4, r5, r6, pc}
    1488:	00280003 	.word	0x00280003
    148c:	00290003 	.word	0x00290003
    1490:	200001c8 	.word	0x200001c8
    1494:	42001800 	.word	0x42001800
    1498:	000005ad 	.word	0x000005ad
    149c:	00000abd 	.word	0x00000abd
    14a0:	e000e100 	.word	0xe000e100
    14a4:	000004d9 	.word	0x000004d9
    14a8:	000014e1 	.word	0x000014e1
    14ac:	00000a81 	.word	0x00000a81

000014b0 <RcvResponseFromSTN>:
}

//-------------------------------------------RECEIVE RESPONSE FROM STN--------------------------------------------------------------------
void RcvResponseFromSTN(uint8_t RcvedData)
{
	switch(RcvedData)
    14b0:	2820      	cmp	r0, #32
    14b2:	d00e      	beq.n	14d2 <RcvResponseFromSTN+0x22>
    14b4:	283e      	cmp	r0, #62	; 0x3e
    14b6:	d002      	beq.n	14be <RcvResponseFromSTN+0xe>
    14b8:	280d      	cmp	r0, #13
    14ba:	d104      	bne.n	14c6 <RcvResponseFromSTN+0x16>
    14bc:	e009      	b.n	14d2 <RcvResponseFromSTN+0x22>
		case 0x0D:/* 0x0D */
		break;
		
		case '>':/* '>' */
		//write_DEBUG(STNResBuff,RcvCount);
			STNRcvCompleteFlag = true;
    14be:	2201      	movs	r2, #1
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <RcvResponseFromSTN+0x24>)
    14c2:	701a      	strb	r2, [r3, #0]
		break;
    14c4:	e005      	b.n	14d2 <RcvResponseFromSTN+0x22>

		case ' ':/* ' ' */
		break;

		default:
			STNResBuff[RcvCount++] = RcvedData;
    14c6:	4a04      	ldr	r2, [pc, #16]	; (14d8 <RcvResponseFromSTN+0x28>)
    14c8:	7813      	ldrb	r3, [r2, #0]
    14ca:	1c59      	adds	r1, r3, #1
    14cc:	7011      	strb	r1, [r2, #0]
    14ce:	4a03      	ldr	r2, [pc, #12]	; (14dc <RcvResponseFromSTN+0x2c>)
    14d0:	54d0      	strb	r0, [r2, r3]
		break;
	}
}
    14d2:	4770      	bx	lr
    14d4:	20000199 	.word	0x20000199
    14d8:	20000198 	.word	0x20000198
    14dc:	200000d0 	.word	0x200000d0

000014e0 <stn_rx_handler>:
}

//---------------------------------------------------STN INTERRUPT VECTOR-------------------------------------------------------------

void stn_rx_handler(uint8_t instance)
{
    14e0:	b508      	push	{r3, lr}
	SercomUsart *const usart_hw = &SERCOM4->USART;
	UNUSED(instance);

	//write_DEBUG("\r\nHere 1", strlen("\n\rHere 1"));
    // printf("into the interrupt");
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)
    14e2:	4b09      	ldr	r3, [pc, #36]	; (1508 <stn_rx_handler+0x28>)
    14e4:	7b9b      	ldrb	r3, [r3, #14]
    14e6:	075a      	lsls	r2, r3, #29
    14e8:	d50c      	bpl.n	1504 <stn_rx_handler+0x24>
	{
		/* Check if a data reception error occurred */
		uint8_t rx_error = usart_hw->STATUS.reg & (SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF);
    14ea:	4b07      	ldr	r3, [pc, #28]	; (1508 <stn_rx_handler+0x28>)
    14ec:	8a1a      	ldrh	r2, [r3, #16]
    14ee:	2306      	movs	r3, #6
    14f0:	4013      	ands	r3, r2

		/* If error occurred clear the error flags, otherwise queue new data */
		if (rx_error)
    14f2:	d002      	beq.n	14fa <stn_rx_handler+0x1a>
		usart_hw->STATUS.reg = rx_error;
    14f4:	4a04      	ldr	r2, [pc, #16]	; (1508 <stn_rx_handler+0x28>)
    14f6:	8213      	strh	r3, [r2, #16]
    14f8:	e004      	b.n	1504 <stn_rx_handler+0x24>
		else
		{
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    14fa:	4b03      	ldr	r3, [pc, #12]	; (1508 <stn_rx_handler+0x28>)
    14fc:	8b18      	ldrh	r0, [r3, #24]
			RcvResponseFromSTN(data);
    14fe:	b2c0      	uxtb	r0, r0
    1500:	4b02      	ldr	r3, [pc, #8]	; (150c <stn_rx_handler+0x2c>)
    1502:	4798      	blx	r3
			//write_DEBUG(&data);
			//printf(&data);
		}
	}
}
    1504:	bd08      	pop	{r3, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	42001800 	.word	0x42001800
    150c:	000014b1 	.word	0x000014b1

00001510 <sendPID>:
}

//---------------------------------------------SEND PID-------------------------------------------------------------------------

void sendPID(const char *cmd)
{
    1510:	b570      	push	{r4, r5, r6, lr}
    1512:	1c05      	adds	r5, r0, #0
	/*  Clear STNResString */
	memset(STNResBuff,'\0',strlen((char *)STNResBuff));
    1514:	4e12      	ldr	r6, [pc, #72]	; (1560 <sendPID+0x50>)
    1516:	1c30      	adds	r0, r6, #0
    1518:	4c12      	ldr	r4, [pc, #72]	; (1564 <sendPID+0x54>)
    151a:	47a0      	blx	r4
    151c:	1c02      	adds	r2, r0, #0
    151e:	1c30      	adds	r0, r6, #0
    1520:	2100      	movs	r1, #0
    1522:	4b11      	ldr	r3, [pc, #68]	; (1568 <sendPID+0x58>)
    1524:	4798      	blx	r3
	RcvCount = 0;
    1526:	2200      	movs	r2, #0
    1528:	4b10      	ldr	r3, [pc, #64]	; (156c <sendPID+0x5c>)
    152a:	701a      	strb	r2, [r3, #0]
	
	usart_write_buffer_wait(&usart_instance_STN, (uint8_t *)cmd, strlen(cmd));
    152c:	1c28      	adds	r0, r5, #0
    152e:	47a0      	blx	r4
    1530:	4c0f      	ldr	r4, [pc, #60]	; (1570 <sendPID+0x60>)
    1532:	b282      	uxth	r2, r0
    1534:	1c20      	adds	r0, r4, #0
    1536:	1c29      	adds	r1, r5, #0
    1538:	4b0e      	ldr	r3, [pc, #56]	; (1574 <sendPID+0x64>)
    153a:	4798      	blx	r3
	usart_write_wait(&usart_instance_STN, '\r');
    153c:	1c20      	adds	r0, r4, #0
    153e:	210d      	movs	r1, #13
    1540:	4d0d      	ldr	r5, [pc, #52]	; (1578 <sendPID+0x68>)
    1542:	47a8      	blx	r5
	usart_write_wait(&usart_instance_STN, '\n');
    1544:	1c20      	adds	r0, r4, #0
    1546:	210a      	movs	r1, #10
    1548:	47a8      	blx	r5
	
	delay_ms(50) ; // This delay is playing role in improving throughput with STN communication
    154a:	2032      	movs	r0, #50	; 0x32
    154c:	4b0b      	ldr	r3, [pc, #44]	; (157c <sendPID+0x6c>)
    154e:	4798      	blx	r3
	
	while( STNRcvCompleteFlag != true );
    1550:	4a0b      	ldr	r2, [pc, #44]	; (1580 <sendPID+0x70>)
    1552:	7813      	ldrb	r3, [r2, #0]
    1554:	2b00      	cmp	r3, #0
    1556:	d0fc      	beq.n	1552 <sendPID+0x42>
	STNRcvCompleteFlag = false;
    1558:	2200      	movs	r2, #0
    155a:	4b09      	ldr	r3, [pc, #36]	; (1580 <sendPID+0x70>)
    155c:	701a      	strb	r2, [r3, #0]
}
    155e:	bd70      	pop	{r4, r5, r6, pc}
    1560:	200000d0 	.word	0x200000d0
    1564:	00001b51 	.word	0x00001b51
    1568:	00001913 	.word	0x00001913
    156c:	20000198 	.word	0x20000198
    1570:	200001c8 	.word	0x200001c8
    1574:	00000889 	.word	0x00000889
    1578:	000007f5 	.word	0x000007f5
    157c:	00000b85 	.word	0x00000b85
    1580:	20000199 	.word	0x20000199

00001584 <LedInit>:


//-------------------------------------------------------LED ININT--------------------------------------------------------------------------

void LedInit(void)
{
    1584:	b530      	push	{r4, r5, lr}
    1586:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1588:	ac01      	add	r4, sp, #4
    158a:	2301      	movs	r3, #1
    158c:	7063      	strb	r3, [r4, #1]
	config->powersave  = false;
    158e:	2200      	movs	r2, #0
    1590:	70a2      	strb	r2, [r4, #2]
	struct port_config ConfigPinLed;
	
	port_get_config_defaults(&ConfigPinLed);
	ConfigPinLed.direction = PORT_PIN_DIR_OUTPUT;
    1592:	7023      	strb	r3, [r4, #0]
	ConfigPinLed.input_pull = PORT_PIN_PULL_UP;
	
	port_pin_set_config(PIN_PB01, &ConfigPinLed);
    1594:	2021      	movs	r0, #33	; 0x21
    1596:	1c21      	adds	r1, r4, #0
    1598:	4d08      	ldr	r5, [pc, #32]	; (15bc <LedInit+0x38>)
    159a:	47a8      	blx	r5
	port_pin_set_config(PIN_PB02, &ConfigPinLed);
    159c:	2022      	movs	r0, #34	; 0x22
    159e:	1c21      	adds	r1, r4, #0
    15a0:	47a8      	blx	r5
	port_pin_set_config(PIN_PB03, &ConfigPinLed);
    15a2:	2023      	movs	r0, #35	; 0x23
    15a4:	1c21      	adds	r1, r4, #0
    15a6:	47a8      	blx	r5

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    15a8:	4b05      	ldr	r3, [pc, #20]	; (15c0 <LedInit+0x3c>)
    15aa:	2202      	movs	r2, #2
    15ac:	615a      	str	r2, [r3, #20]
    15ae:	2204      	movs	r2, #4
    15b0:	615a      	str	r2, [r3, #20]
    15b2:	2208      	movs	r2, #8
    15b4:	615a      	str	r2, [r3, #20]
	
	port_pin_set_output_level(PIN_PB01, 0);
	port_pin_set_output_level(PIN_PB02, 0);
	port_pin_set_output_level(PIN_PB03, 0);
}
    15b6:	b003      	add	sp, #12
    15b8:	bd30      	pop	{r4, r5, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	00000105 	.word	0x00000105
    15c0:	41004480 	.word	0x41004480

000015c4 <main>:

//---------------------------------------------------MAIN--------------------------------------------------------------------------
int main (void)
{
    15c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15c6:	465f      	mov	r7, fp
    15c8:	4656      	mov	r6, sl
    15ca:	464d      	mov	r5, r9
    15cc:	4644      	mov	r4, r8
    15ce:	b4f0      	push	{r4, r5, r6, r7}
	char  received_data;
	system_init();
    15d0:	4b5c      	ldr	r3, [pc, #368]	; (1744 <main+0x180>)
    15d2:	4798      	blx	r3
	delay_init();
    15d4:	4b5c      	ldr	r3, [pc, #368]	; (1748 <main+0x184>)
    15d6:	4798      	blx	r3
	configure_usart_CONSOLE();
    15d8:	4b5c      	ldr	r3, [pc, #368]	; (174c <main+0x188>)
    15da:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
    15dc:	2201      	movs	r2, #1
    15de:	4b5c      	ldr	r3, [pc, #368]	; (1750 <main+0x18c>)
    15e0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    15e2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    15e6:	b662      	cpsie	i
	system_interrupt_enable_global();
	configure_usart_STN();
    15e8:	4b5a      	ldr	r3, [pc, #360]	; (1754 <main+0x190>)
    15ea:	4798      	blx	r3
	LedInit();
    15ec:	4b5a      	ldr	r3, [pc, #360]	; (1758 <main+0x194>)
    15ee:	4798      	blx	r3
	int i;
	const char temp;
	printf("\r\n welcome to CARIQ!!!!!!!!!!!!!\r\n");
    15f0:	485a      	ldr	r0, [pc, #360]	; (175c <main+0x198>)
    15f2:	4b5b      	ldr	r3, [pc, #364]	; (1760 <main+0x19c>)
    15f4:	4798      	blx	r3
	printf("\n done with all initializations!!! \n ");
    15f6:	485b      	ldr	r0, [pc, #364]	; (1764 <main+0x1a0>)
    15f8:	4b5b      	ldr	r3, [pc, #364]	; (1768 <main+0x1a4>)
    15fa:	4798      	blx	r3
    15fc:	2404      	movs	r4, #4
    15fe:	4f5b      	ldr	r7, [pc, #364]	; (176c <main+0x1a8>)
    1600:	2208      	movs	r2, #8
    1602:	4690      	mov	r8, r2
    1604:	4691      	mov	r9, r2
    1606:	464b      	mov	r3, r9
    1608:	617b      	str	r3, [r7, #20]
		
	
	for(i=0;i<4;i++)
		{
			port_pin_set_output_level(PIN_PB03,0);
			delay_ms(1000);
    160a:	26fa      	movs	r6, #250	; 0xfa
    160c:	00b6      	lsls	r6, r6, #2
    160e:	1c30      	adds	r0, r6, #0
    1610:	4d57      	ldr	r5, [pc, #348]	; (1770 <main+0x1ac>)
    1612:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1614:	4642      	mov	r2, r8
    1616:	61ba      	str	r2, [r7, #24]
			port_pin_set_output_level(PIN_PB03,1);
			delay_ms(1000);
    1618:	1c30      	adds	r0, r6, #0
    161a:	47a8      	blx	r5
    161c:	3c01      	subs	r4, #1
//----------------------------------------------------------------------------------------------------------------	
		
	
		
	
	for(i=0;i<4;i++)
    161e:	2c00      	cmp	r4, #0
    1620:	d1f1      	bne.n	1606 <main+0x42>
			delay_ms(1000);
		}
	
//printf("\n press any key for basic STN Testing \n \r");
//scanf("%d",&temp);
delay_ms(4000);
    1622:	20fa      	movs	r0, #250	; 0xfa
    1624:	0100      	lsls	r0, r0, #4
    1626:	4c52      	ldr	r4, [pc, #328]	; (1770 <main+0x1ac>)
    1628:	47a0      	blx	r4

	


printf("\n sending PID ATZ:");
    162a:	4852      	ldr	r0, [pc, #328]	; (1774 <main+0x1b0>)
    162c:	4d4e      	ldr	r5, [pc, #312]	; (1768 <main+0x1a4>)
    162e:	47a8      	blx	r5
sendPID("ATZ");
    1630:	4851      	ldr	r0, [pc, #324]	; (1778 <main+0x1b4>)
    1632:	4b52      	ldr	r3, [pc, #328]	; (177c <main+0x1b8>)
    1634:	4699      	mov	r9, r3
    1636:	4798      	blx	r3
write_DEBUG(&STNResBuff);
    1638:	4a51      	ldr	r2, [pc, #324]	; (1780 <main+0x1bc>)
    163a:	4690      	mov	r8, r2
    163c:	1c10      	adds	r0, r2, #0
    163e:	4f51      	ldr	r7, [pc, #324]	; (1784 <main+0x1c0>)
    1640:	47b8      	blx	r7
delay_ms(2000);
    1642:	26fa      	movs	r6, #250	; 0xfa
    1644:	00f6      	lsls	r6, r6, #3
    1646:	1c30      	adds	r0, r6, #0
    1648:	47a0      	blx	r4

printf("\n sending PID ATRV:");
    164a:	484f      	ldr	r0, [pc, #316]	; (1788 <main+0x1c4>)
    164c:	47a8      	blx	r5
sendPID("ATRV");
    164e:	484f      	ldr	r0, [pc, #316]	; (178c <main+0x1c8>)
    1650:	47c8      	blx	r9
write_DEBUG(&STNResBuff);
    1652:	4640      	mov	r0, r8
    1654:	47b8      	blx	r7
delay_ms(2000);
    1656:	1c30      	adds	r0, r6, #0
    1658:	47a0      	blx	r4

printf("\n sending PID 010C:");
    165a:	484d      	ldr	r0, [pc, #308]	; (1790 <main+0x1cc>)
    165c:	47a8      	blx	r5
sendPID("010C");
    165e:	484d      	ldr	r0, [pc, #308]	; (1794 <main+0x1d0>)
    1660:	47c8      	blx	r9
write_DEBUG(&STNResBuff);
    1662:	4640      	mov	r0, r8
    1664:	47b8      	blx	r7
delay_ms(2000);
    1666:	1c30      	adds	r0, r6, #0
    1668:	47a0      	blx	r4

printf("\n sending PID ATDP:");
    166a:	484b      	ldr	r0, [pc, #300]	; (1798 <main+0x1d4>)
    166c:	47a8      	blx	r5
sendPID("ATDP");
    166e:	484b      	ldr	r0, [pc, #300]	; (179c <main+0x1d8>)
    1670:	47c8      	blx	r9
write_DEBUG(&STNResBuff);
    1672:	4640      	mov	r0, r8
    1674:	47b8      	blx	r7
delay_ms(2000);
    1676:	1c30      	adds	r0, r6, #0
    1678:	47a0      	blx	r4


//printf("\n done with basic STN testing!!! press y to proceed!!!!\n \r");
//scanf("%c",&temp);
delay_ms(3000);
    167a:	4849      	ldr	r0, [pc, #292]	; (17a0 <main+0x1dc>)
    167c:	47a0      	blx	r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    167e:	2208      	movs	r2, #8
    1680:	4b3a      	ldr	r3, [pc, #232]	; (176c <main+0x1a8>)
    1682:	615a      	str	r2, [r3, #20]
//if(temp=='y'|| temp=='Y')
//	{
		
		
		port_pin_set_output_level(PIN_PB03,0);
		delay_ms(1000);
    1684:	20fa      	movs	r0, #250	; 0xfa
    1686:	0080      	lsls	r0, r0, #2
    1688:	47a0      	blx	r4
		printf("\n Sameer!!!");
    168a:	4846      	ldr	r0, [pc, #280]	; (17a4 <main+0x1e0>)
    168c:	47a8      	blx	r5
		//void start_scan();

        printf("\n Initializing CAR_SCAN...	");
    168e:	4846      	ldr	r0, [pc, #280]	; (17a8 <main+0x1e4>)
    1690:	47a8      	blx	r5
        delay_ms(20);
    1692:	2014      	movs	r0, #20
    1694:	47a0      	blx	r4
        printf("...");
    1696:	4845      	ldr	r0, [pc, #276]	; (17ac <main+0x1e8>)
    1698:	47a8      	blx	r5
        delay_ms(30);
    169a:	201e      	movs	r0, #30
    169c:	47a0      	blx	r4
        printf(".... \n");
    169e:	4844      	ldr	r0, [pc, #272]	; (17b0 <main+0x1ec>)
    16a0:	4c2f      	ldr	r4, [pc, #188]	; (1760 <main+0x19c>)
    16a2:	47a0      	blx	r4
        printf("\n Default header\n");
    16a4:	4843      	ldr	r0, [pc, #268]	; (17b4 <main+0x1f0>)
    16a6:	47a0      	blx	r4
    16a8:	4b43      	ldr	r3, [pc, #268]	; (17b8 <main+0x1f4>)
    16aa:	469a      	mov	sl, r3
    16ac:	1c1d      	adds	r5, r3, #0
    16ae:	354b      	adds	r5, #75	; 0x4b
    16b0:	1c1c      	adds	r4, r3, #0
        
        for(i=0;i<TOTAL_PIDS;i++)
        {
	        printf("\n sending PID %s: ",PIDS[i]);
    16b2:	4a42      	ldr	r2, [pc, #264]	; (17bc <main+0x1f8>)
    16b4:	4690      	mov	r8, r2
    16b6:	4f2c      	ldr	r7, [pc, #176]	; (1768 <main+0x1a4>)
			sendPID(PIDS[i]);
    16b8:	4e30      	ldr	r6, [pc, #192]	; (177c <main+0x1b8>)
        printf(".... \n");
        printf("\n Default header\n");
        
        for(i=0;i<TOTAL_PIDS;i++)
        {
	        printf("\n sending PID %s: ",PIDS[i]);
    16ba:	4640      	mov	r0, r8
    16bc:	1c21      	adds	r1, r4, #0
    16be:	47b8      	blx	r7
			sendPID(PIDS[i]);
    16c0:	1c20      	adds	r0, r4, #0
    16c2:	47b0      	blx	r6
	        write_DEBUG(&STNResBuff);
    16c4:	482e      	ldr	r0, [pc, #184]	; (1780 <main+0x1bc>)
    16c6:	4b2f      	ldr	r3, [pc, #188]	; (1784 <main+0x1c0>)
    16c8:	4798      	blx	r3
	        delay_ms(1000);
    16ca:	20fa      	movs	r0, #250	; 0xfa
    16cc:	0080      	lsls	r0, r0, #2
    16ce:	4b28      	ldr	r3, [pc, #160]	; (1770 <main+0x1ac>)
    16d0:	4798      	blx	r3
    16d2:	3405      	adds	r4, #5
        printf("...");
        delay_ms(30);
        printf(".... \n");
        printf("\n Default header\n");
        
        for(i=0;i<TOTAL_PIDS;i++)
    16d4:	42ac      	cmp	r4, r5
    16d6:	d1f0      	bne.n	16ba <main+0xf6>
			sendPID(PIDS[i]);
	        write_DEBUG(&STNResBuff);
	        delay_ms(1000);
        }
        //----set headers and fire----------------------------------------
        for(j=0;j<TOTAL_HEADERS;j++)
    16d8:	2200      	movs	r2, #0
    16da:	4b39      	ldr	r3, [pc, #228]	; (17c0 <main+0x1fc>)
    16dc:	601a      	str	r2, [r3, #0]
    16de:	2300      	movs	r3, #0
        {
	        printf("\n headers set is %s \n",Headers[j]);
    16e0:	4a38      	ldr	r2, [pc, #224]	; (17c4 <main+0x200>)
    16e2:	4693      	mov	fp, r2
    16e4:	4a38      	ldr	r2, [pc, #224]	; (17c8 <main+0x204>)
    16e6:	4691      	mov	r9, r2
    16e8:	00db      	lsls	r3, r3, #3
    16ea:	464a      	mov	r2, r9
    16ec:	18d1      	adds	r1, r2, r3
    16ee:	4658      	mov	r0, fp
    16f0:	4b1d      	ldr	r3, [pc, #116]	; (1768 <main+0x1a4>)
    16f2:	4798      	blx	r3
	        sendPID(Headers[j]);
    16f4:	4b32      	ldr	r3, [pc, #200]	; (17c0 <main+0x1fc>)
    16f6:	6818      	ldr	r0, [r3, #0]
    16f8:	00c0      	lsls	r0, r0, #3
    16fa:	4448      	add	r0, r9
    16fc:	4b1f      	ldr	r3, [pc, #124]	; (177c <main+0x1b8>)
    16fe:	4798      	blx	r3
    1700:	4654      	mov	r4, sl
			for(i=0;i<TOTAL_PIDS;i++)
	        
	        {
		        printf("\n sending PID %s :",PIDS[i]);
    1702:	4a32      	ldr	r2, [pc, #200]	; (17cc <main+0x208>)
    1704:	4690      	mov	r8, r2
    1706:	4f18      	ldr	r7, [pc, #96]	; (1768 <main+0x1a4>)
		        sendPID(PIDS[i]);
    1708:	4e1c      	ldr	r6, [pc, #112]	; (177c <main+0x1b8>)
	        printf("\n headers set is %s \n",Headers[j]);
	        sendPID(Headers[j]);
			for(i=0;i<TOTAL_PIDS;i++)
	        
	        {
		        printf("\n sending PID %s :",PIDS[i]);
    170a:	4640      	mov	r0, r8
    170c:	1c21      	adds	r1, r4, #0
    170e:	47b8      	blx	r7
		        sendPID(PIDS[i]);
    1710:	1c20      	adds	r0, r4, #0
    1712:	47b0      	blx	r6
				write_DEBUG(&STNResBuff);
    1714:	481a      	ldr	r0, [pc, #104]	; (1780 <main+0x1bc>)
    1716:	4b1b      	ldr	r3, [pc, #108]	; (1784 <main+0x1c0>)
    1718:	4798      	blx	r3
		        delay_ms(500);
    171a:	20fa      	movs	r0, #250	; 0xfa
    171c:	0040      	lsls	r0, r0, #1
    171e:	4b14      	ldr	r3, [pc, #80]	; (1770 <main+0x1ac>)
    1720:	4798      	blx	r3
    1722:	3405      	adds	r4, #5
        //----set headers and fire----------------------------------------
        for(j=0;j<TOTAL_HEADERS;j++)
        {
	        printf("\n headers set is %s \n",Headers[j]);
	        sendPID(Headers[j]);
			for(i=0;i<TOTAL_PIDS;i++)
    1724:	42ac      	cmp	r4, r5
    1726:	d1f0      	bne.n	170a <main+0x146>
			sendPID(PIDS[i]);
	        write_DEBUG(&STNResBuff);
	        delay_ms(1000);
        }
        //----set headers and fire----------------------------------------
        for(j=0;j<TOTAL_HEADERS;j++)
    1728:	4a25      	ldr	r2, [pc, #148]	; (17c0 <main+0x1fc>)
    172a:	6813      	ldr	r3, [r2, #0]
    172c:	3301      	adds	r3, #1
    172e:	6013      	str	r3, [r2, #0]
    1730:	2b07      	cmp	r3, #7
    1732:	ddd9      	ble.n	16e8 <main+0x124>
	//	write_DEBUG(&received_data);
		
		//delay_ms(2000); 
	
    	
}
    1734:	2000      	movs	r0, #0
    1736:	bc3c      	pop	{r2, r3, r4, r5}
    1738:	4690      	mov	r8, r2
    173a:	4699      	mov	r9, r3
    173c:	46a2      	mov	sl, r4
    173e:	46ab      	mov	fp, r5
    1740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	00001129 	.word	0x00001129
    1748:	00000b49 	.word	0x00000b49
    174c:	00001265 	.word	0x00001265
    1750:	20000008 	.word	0x20000008
    1754:	000013b1 	.word	0x000013b1
    1758:	00001585 	.word	0x00001585
    175c:	0000295c 	.word	0x0000295c
    1760:	00001a1d 	.word	0x00001a1d
    1764:	00002980 	.word	0x00002980
    1768:	00001925 	.word	0x00001925
    176c:	41004480 	.word	0x41004480
    1770:	00000b85 	.word	0x00000b85
    1774:	000029a8 	.word	0x000029a8
    1778:	000029bc 	.word	0x000029bc
    177c:	00001511 	.word	0x00001511
    1780:	200000d0 	.word	0x200000d0
    1784:	00001391 	.word	0x00001391
    1788:	000029c0 	.word	0x000029c0
    178c:	000029d4 	.word	0x000029d4
    1790:	000029dc 	.word	0x000029dc
    1794:	000029f0 	.word	0x000029f0
    1798:	000029f8 	.word	0x000029f8
    179c:	00002a0c 	.word	0x00002a0c
    17a0:	00000bb8 	.word	0x00000bb8
    17a4:	00002a14 	.word	0x00002a14
    17a8:	00002a20 	.word	0x00002a20
    17ac:	00002a3c 	.word	0x00002a3c
    17b0:	00002a40 	.word	0x00002a40
    17b4:	00002a48 	.word	0x00002a48
    17b8:	00002adc 	.word	0x00002adc
    17bc:	00002a5c 	.word	0x00002a5c
    17c0:	200000cc 	.word	0x200000cc
    17c4:	00002a70 	.word	0x00002a70
    17c8:	00002a9c 	.word	0x00002a9c
    17cc:	00002a88 	.word	0x00002a88

000017d0 <__aeabi_uidiv>:
    17d0:	2900      	cmp	r1, #0
    17d2:	d034      	beq.n	183e <.udivsi3_skip_div0_test+0x6a>

000017d4 <.udivsi3_skip_div0_test>:
    17d4:	2301      	movs	r3, #1
    17d6:	2200      	movs	r2, #0
    17d8:	b410      	push	{r4}
    17da:	4288      	cmp	r0, r1
    17dc:	d32c      	bcc.n	1838 <.udivsi3_skip_div0_test+0x64>
    17de:	2401      	movs	r4, #1
    17e0:	0724      	lsls	r4, r4, #28
    17e2:	42a1      	cmp	r1, r4
    17e4:	d204      	bcs.n	17f0 <.udivsi3_skip_div0_test+0x1c>
    17e6:	4281      	cmp	r1, r0
    17e8:	d202      	bcs.n	17f0 <.udivsi3_skip_div0_test+0x1c>
    17ea:	0109      	lsls	r1, r1, #4
    17ec:	011b      	lsls	r3, r3, #4
    17ee:	e7f8      	b.n	17e2 <.udivsi3_skip_div0_test+0xe>
    17f0:	00e4      	lsls	r4, r4, #3
    17f2:	42a1      	cmp	r1, r4
    17f4:	d204      	bcs.n	1800 <.udivsi3_skip_div0_test+0x2c>
    17f6:	4281      	cmp	r1, r0
    17f8:	d202      	bcs.n	1800 <.udivsi3_skip_div0_test+0x2c>
    17fa:	0049      	lsls	r1, r1, #1
    17fc:	005b      	lsls	r3, r3, #1
    17fe:	e7f8      	b.n	17f2 <.udivsi3_skip_div0_test+0x1e>
    1800:	4288      	cmp	r0, r1
    1802:	d301      	bcc.n	1808 <.udivsi3_skip_div0_test+0x34>
    1804:	1a40      	subs	r0, r0, r1
    1806:	431a      	orrs	r2, r3
    1808:	084c      	lsrs	r4, r1, #1
    180a:	42a0      	cmp	r0, r4
    180c:	d302      	bcc.n	1814 <.udivsi3_skip_div0_test+0x40>
    180e:	1b00      	subs	r0, r0, r4
    1810:	085c      	lsrs	r4, r3, #1
    1812:	4322      	orrs	r2, r4
    1814:	088c      	lsrs	r4, r1, #2
    1816:	42a0      	cmp	r0, r4
    1818:	d302      	bcc.n	1820 <.udivsi3_skip_div0_test+0x4c>
    181a:	1b00      	subs	r0, r0, r4
    181c:	089c      	lsrs	r4, r3, #2
    181e:	4322      	orrs	r2, r4
    1820:	08cc      	lsrs	r4, r1, #3
    1822:	42a0      	cmp	r0, r4
    1824:	d302      	bcc.n	182c <.udivsi3_skip_div0_test+0x58>
    1826:	1b00      	subs	r0, r0, r4
    1828:	08dc      	lsrs	r4, r3, #3
    182a:	4322      	orrs	r2, r4
    182c:	2800      	cmp	r0, #0
    182e:	d003      	beq.n	1838 <.udivsi3_skip_div0_test+0x64>
    1830:	091b      	lsrs	r3, r3, #4
    1832:	d001      	beq.n	1838 <.udivsi3_skip_div0_test+0x64>
    1834:	0909      	lsrs	r1, r1, #4
    1836:	e7e3      	b.n	1800 <.udivsi3_skip_div0_test+0x2c>
    1838:	1c10      	adds	r0, r2, #0
    183a:	bc10      	pop	{r4}
    183c:	4770      	bx	lr
    183e:	2800      	cmp	r0, #0
    1840:	d001      	beq.n	1846 <.udivsi3_skip_div0_test+0x72>
    1842:	2000      	movs	r0, #0
    1844:	43c0      	mvns	r0, r0
    1846:	b407      	push	{r0, r1, r2}
    1848:	4802      	ldr	r0, [pc, #8]	; (1854 <.udivsi3_skip_div0_test+0x80>)
    184a:	a102      	add	r1, pc, #8	; (adr r1, 1854 <.udivsi3_skip_div0_test+0x80>)
    184c:	1840      	adds	r0, r0, r1
    184e:	9002      	str	r0, [sp, #8]
    1850:	bd03      	pop	{r0, r1, pc}
    1852:	46c0      	nop			; (mov r8, r8)
    1854:	00000019 	.word	0x00000019

00001858 <__aeabi_uidivmod>:
    1858:	2900      	cmp	r1, #0
    185a:	d0f0      	beq.n	183e <.udivsi3_skip_div0_test+0x6a>
    185c:	b503      	push	{r0, r1, lr}
    185e:	f7ff ffb9 	bl	17d4 <.udivsi3_skip_div0_test>
    1862:	bc0e      	pop	{r1, r2, r3}
    1864:	4342      	muls	r2, r0
    1866:	1a89      	subs	r1, r1, r2
    1868:	4718      	bx	r3
    186a:	46c0      	nop			; (mov r8, r8)

0000186c <__aeabi_idiv0>:
    186c:	4770      	bx	lr
    186e:	46c0      	nop			; (mov r8, r8)

00001870 <__aeabi_lmul>:
    1870:	469c      	mov	ip, r3
    1872:	0403      	lsls	r3, r0, #16
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	0c1b      	lsrs	r3, r3, #16
    1878:	0417      	lsls	r7, r2, #16
    187a:	0c3f      	lsrs	r7, r7, #16
    187c:	0c15      	lsrs	r5, r2, #16
    187e:	1c1e      	adds	r6, r3, #0
    1880:	1c04      	adds	r4, r0, #0
    1882:	0c00      	lsrs	r0, r0, #16
    1884:	437e      	muls	r6, r7
    1886:	436b      	muls	r3, r5
    1888:	4347      	muls	r7, r0
    188a:	4345      	muls	r5, r0
    188c:	18fb      	adds	r3, r7, r3
    188e:	0c30      	lsrs	r0, r6, #16
    1890:	1818      	adds	r0, r3, r0
    1892:	4287      	cmp	r7, r0
    1894:	d902      	bls.n	189c <__aeabi_lmul+0x2c>
    1896:	2380      	movs	r3, #128	; 0x80
    1898:	025b      	lsls	r3, r3, #9
    189a:	18ed      	adds	r5, r5, r3
    189c:	0c03      	lsrs	r3, r0, #16
    189e:	18ed      	adds	r5, r5, r3
    18a0:	4663      	mov	r3, ip
    18a2:	435c      	muls	r4, r3
    18a4:	434a      	muls	r2, r1
    18a6:	0436      	lsls	r6, r6, #16
    18a8:	0c36      	lsrs	r6, r6, #16
    18aa:	18a1      	adds	r1, r4, r2
    18ac:	0400      	lsls	r0, r0, #16
    18ae:	1980      	adds	r0, r0, r6
    18b0:	1949      	adds	r1, r1, r5
    18b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018b4 <__libc_init_array>:
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	4b0e      	ldr	r3, [pc, #56]	; (18f0 <__libc_init_array+0x3c>)
    18b8:	4d0e      	ldr	r5, [pc, #56]	; (18f4 <__libc_init_array+0x40>)
    18ba:	2400      	movs	r4, #0
    18bc:	1aed      	subs	r5, r5, r3
    18be:	10ad      	asrs	r5, r5, #2
    18c0:	1c1e      	adds	r6, r3, #0
    18c2:	42ac      	cmp	r4, r5
    18c4:	d004      	beq.n	18d0 <__libc_init_array+0x1c>
    18c6:	00a3      	lsls	r3, r4, #2
    18c8:	58f3      	ldr	r3, [r6, r3]
    18ca:	4798      	blx	r3
    18cc:	3401      	adds	r4, #1
    18ce:	e7f8      	b.n	18c2 <__libc_init_array+0xe>
    18d0:	f001 f978 	bl	2bc4 <_init>
    18d4:	4b08      	ldr	r3, [pc, #32]	; (18f8 <__libc_init_array+0x44>)
    18d6:	4d09      	ldr	r5, [pc, #36]	; (18fc <__libc_init_array+0x48>)
    18d8:	2400      	movs	r4, #0
    18da:	1aed      	subs	r5, r5, r3
    18dc:	10ad      	asrs	r5, r5, #2
    18de:	1c1e      	adds	r6, r3, #0
    18e0:	42ac      	cmp	r4, r5
    18e2:	d004      	beq.n	18ee <__libc_init_array+0x3a>
    18e4:	00a3      	lsls	r3, r4, #2
    18e6:	58f3      	ldr	r3, [r6, r3]
    18e8:	4798      	blx	r3
    18ea:	3401      	adds	r4, #1
    18ec:	e7f8      	b.n	18e0 <__libc_init_array+0x2c>
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	00002bd0 	.word	0x00002bd0
    18f4:	00002bd0 	.word	0x00002bd0
    18f8:	00002bd0 	.word	0x00002bd0
    18fc:	00002bd4 	.word	0x00002bd4

00001900 <memcpy>:
    1900:	b510      	push	{r4, lr}
    1902:	2300      	movs	r3, #0
    1904:	4293      	cmp	r3, r2
    1906:	d003      	beq.n	1910 <memcpy+0x10>
    1908:	5ccc      	ldrb	r4, [r1, r3]
    190a:	54c4      	strb	r4, [r0, r3]
    190c:	3301      	adds	r3, #1
    190e:	e7f9      	b.n	1904 <memcpy+0x4>
    1910:	bd10      	pop	{r4, pc}

00001912 <memset>:
    1912:	1c03      	adds	r3, r0, #0
    1914:	1882      	adds	r2, r0, r2
    1916:	4293      	cmp	r3, r2
    1918:	d002      	beq.n	1920 <memset+0xe>
    191a:	7019      	strb	r1, [r3, #0]
    191c:	3301      	adds	r3, #1
    191e:	e7fa      	b.n	1916 <memset+0x4>
    1920:	4770      	bx	lr
	...

00001924 <iprintf>:
    1924:	b40f      	push	{r0, r1, r2, r3}
    1926:	4b0b      	ldr	r3, [pc, #44]	; (1954 <iprintf+0x30>)
    1928:	b513      	push	{r0, r1, r4, lr}
    192a:	681c      	ldr	r4, [r3, #0]
    192c:	2c00      	cmp	r4, #0
    192e:	d005      	beq.n	193c <iprintf+0x18>
    1930:	69a3      	ldr	r3, [r4, #24]
    1932:	2b00      	cmp	r3, #0
    1934:	d102      	bne.n	193c <iprintf+0x18>
    1936:	1c20      	adds	r0, r4, #0
    1938:	f000 fd9e 	bl	2478 <__sinit>
    193c:	ab05      	add	r3, sp, #20
    193e:	68a1      	ldr	r1, [r4, #8]
    1940:	1c20      	adds	r0, r4, #0
    1942:	9a04      	ldr	r2, [sp, #16]
    1944:	9301      	str	r3, [sp, #4]
    1946:	f000 f931 	bl	1bac <_vfiprintf_r>
    194a:	bc16      	pop	{r1, r2, r4}
    194c:	bc08      	pop	{r3}
    194e:	b004      	add	sp, #16
    1950:	4718      	bx	r3
    1952:	46c0      	nop			; (mov r8, r8)
    1954:	2000006c 	.word	0x2000006c

00001958 <_puts_r>:
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	1c05      	adds	r5, r0, #0
    195c:	1c0e      	adds	r6, r1, #0
    195e:	2800      	cmp	r0, #0
    1960:	d004      	beq.n	196c <_puts_r+0x14>
    1962:	6982      	ldr	r2, [r0, #24]
    1964:	2a00      	cmp	r2, #0
    1966:	d101      	bne.n	196c <_puts_r+0x14>
    1968:	f000 fd86 	bl	2478 <__sinit>
    196c:	68ac      	ldr	r4, [r5, #8]
    196e:	89a3      	ldrh	r3, [r4, #12]
    1970:	071a      	lsls	r2, r3, #28
    1972:	d502      	bpl.n	197a <_puts_r+0x22>
    1974:	6923      	ldr	r3, [r4, #16]
    1976:	2b00      	cmp	r3, #0
    1978:	d119      	bne.n	19ae <_puts_r+0x56>
    197a:	1c28      	adds	r0, r5, #0
    197c:	1c21      	adds	r1, r4, #0
    197e:	f000 fbff 	bl	2180 <__swsetup_r>
    1982:	2800      	cmp	r0, #0
    1984:	d013      	beq.n	19ae <_puts_r+0x56>
    1986:	2001      	movs	r0, #1
    1988:	4240      	negs	r0, r0
    198a:	e045      	b.n	1a18 <_puts_r+0xc0>
    198c:	7831      	ldrb	r1, [r6, #0]
    198e:	2b00      	cmp	r3, #0
    1990:	da1b      	bge.n	19ca <_puts_r+0x72>
    1992:	69a2      	ldr	r2, [r4, #24]
    1994:	4293      	cmp	r3, r2
    1996:	da11      	bge.n	19bc <_puts_r+0x64>
    1998:	1c28      	adds	r0, r5, #0
    199a:	1c22      	adds	r2, r4, #0
    199c:	f000 fb98 	bl	20d0 <__swbuf_r>
    19a0:	3001      	adds	r0, #1
    19a2:	4243      	negs	r3, r0
    19a4:	4158      	adcs	r0, r3
    19a6:	b2c0      	uxtb	r0, r0
    19a8:	2800      	cmp	r0, #0
    19aa:	d1ec      	bne.n	1986 <_puts_r+0x2e>
    19ac:	3601      	adds	r6, #1
    19ae:	68a3      	ldr	r3, [r4, #8]
    19b0:	7832      	ldrb	r2, [r6, #0]
    19b2:	3b01      	subs	r3, #1
    19b4:	60a3      	str	r3, [r4, #8]
    19b6:	2a00      	cmp	r2, #0
    19b8:	d1e8      	bne.n	198c <_puts_r+0x34>
    19ba:	e00c      	b.n	19d6 <_puts_r+0x7e>
    19bc:	6823      	ldr	r3, [r4, #0]
    19be:	7019      	strb	r1, [r3, #0]
    19c0:	6823      	ldr	r3, [r4, #0]
    19c2:	7819      	ldrb	r1, [r3, #0]
    19c4:	290a      	cmp	r1, #10
    19c6:	d103      	bne.n	19d0 <_puts_r+0x78>
    19c8:	e7e6      	b.n	1998 <_puts_r+0x40>
    19ca:	6822      	ldr	r2, [r4, #0]
    19cc:	7011      	strb	r1, [r2, #0]
    19ce:	6823      	ldr	r3, [r4, #0]
    19d0:	3301      	adds	r3, #1
    19d2:	6023      	str	r3, [r4, #0]
    19d4:	e7ea      	b.n	19ac <_puts_r+0x54>
    19d6:	2b00      	cmp	r3, #0
    19d8:	da17      	bge.n	1a0a <_puts_r+0xb2>
    19da:	69a2      	ldr	r2, [r4, #24]
    19dc:	4293      	cmp	r3, r2
    19de:	db08      	blt.n	19f2 <_puts_r+0x9a>
    19e0:	6822      	ldr	r2, [r4, #0]
    19e2:	230a      	movs	r3, #10
    19e4:	7013      	strb	r3, [r2, #0]
    19e6:	6823      	ldr	r3, [r4, #0]
    19e8:	7819      	ldrb	r1, [r3, #0]
    19ea:	290a      	cmp	r1, #10
    19ec:	d111      	bne.n	1a12 <_puts_r+0xba>
    19ee:	1c28      	adds	r0, r5, #0
    19f0:	e001      	b.n	19f6 <_puts_r+0x9e>
    19f2:	1c28      	adds	r0, r5, #0
    19f4:	210a      	movs	r1, #10
    19f6:	1c22      	adds	r2, r4, #0
    19f8:	f000 fb6a 	bl	20d0 <__swbuf_r>
    19fc:	3001      	adds	r0, #1
    19fe:	4243      	negs	r3, r0
    1a00:	4158      	adcs	r0, r3
    1a02:	b2c0      	uxtb	r0, r0
    1a04:	2800      	cmp	r0, #0
    1a06:	d006      	beq.n	1a16 <_puts_r+0xbe>
    1a08:	e7bd      	b.n	1986 <_puts_r+0x2e>
    1a0a:	6822      	ldr	r2, [r4, #0]
    1a0c:	230a      	movs	r3, #10
    1a0e:	7013      	strb	r3, [r2, #0]
    1a10:	6823      	ldr	r3, [r4, #0]
    1a12:	3301      	adds	r3, #1
    1a14:	6023      	str	r3, [r4, #0]
    1a16:	200a      	movs	r0, #10
    1a18:	bd70      	pop	{r4, r5, r6, pc}
	...

00001a1c <puts>:
    1a1c:	b508      	push	{r3, lr}
    1a1e:	4b03      	ldr	r3, [pc, #12]	; (1a2c <puts+0x10>)
    1a20:	1c01      	adds	r1, r0, #0
    1a22:	6818      	ldr	r0, [r3, #0]
    1a24:	f7ff ff98 	bl	1958 <_puts_r>
    1a28:	bd08      	pop	{r3, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	2000006c 	.word	0x2000006c

00001a30 <setbuf>:
    1a30:	b508      	push	{r3, lr}
    1a32:	424a      	negs	r2, r1
    1a34:	414a      	adcs	r2, r1
    1a36:	2380      	movs	r3, #128	; 0x80
    1a38:	0052      	lsls	r2, r2, #1
    1a3a:	00db      	lsls	r3, r3, #3
    1a3c:	f000 f802 	bl	1a44 <setvbuf>
    1a40:	bd08      	pop	{r3, pc}
	...

00001a44 <setvbuf>:
    1a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a46:	1c1e      	adds	r6, r3, #0
    1a48:	4b3c      	ldr	r3, [pc, #240]	; (1b3c <setvbuf+0xf8>)
    1a4a:	1c04      	adds	r4, r0, #0
    1a4c:	681d      	ldr	r5, [r3, #0]
    1a4e:	1c0f      	adds	r7, r1, #0
    1a50:	9201      	str	r2, [sp, #4]
    1a52:	2d00      	cmp	r5, #0
    1a54:	d005      	beq.n	1a62 <setvbuf+0x1e>
    1a56:	69aa      	ldr	r2, [r5, #24]
    1a58:	2a00      	cmp	r2, #0
    1a5a:	d102      	bne.n	1a62 <setvbuf+0x1e>
    1a5c:	1c28      	adds	r0, r5, #0
    1a5e:	f000 fd0b 	bl	2478 <__sinit>
    1a62:	4b37      	ldr	r3, [pc, #220]	; (1b40 <setvbuf+0xfc>)
    1a64:	429c      	cmp	r4, r3
    1a66:	d101      	bne.n	1a6c <setvbuf+0x28>
    1a68:	686c      	ldr	r4, [r5, #4]
    1a6a:	e008      	b.n	1a7e <setvbuf+0x3a>
    1a6c:	4b35      	ldr	r3, [pc, #212]	; (1b44 <setvbuf+0x100>)
    1a6e:	429c      	cmp	r4, r3
    1a70:	d101      	bne.n	1a76 <setvbuf+0x32>
    1a72:	68ac      	ldr	r4, [r5, #8]
    1a74:	e003      	b.n	1a7e <setvbuf+0x3a>
    1a76:	4b34      	ldr	r3, [pc, #208]	; (1b48 <setvbuf+0x104>)
    1a78:	429c      	cmp	r4, r3
    1a7a:	d100      	bne.n	1a7e <setvbuf+0x3a>
    1a7c:	68ec      	ldr	r4, [r5, #12]
    1a7e:	9b01      	ldr	r3, [sp, #4]
    1a80:	2b02      	cmp	r3, #2
    1a82:	d857      	bhi.n	1b34 <setvbuf+0xf0>
    1a84:	2e00      	cmp	r6, #0
    1a86:	db55      	blt.n	1b34 <setvbuf+0xf0>
    1a88:	1c28      	adds	r0, r5, #0
    1a8a:	1c21      	adds	r1, r4, #0
    1a8c:	f000 fc74 	bl	2378 <_fflush_r>
    1a90:	2300      	movs	r3, #0
    1a92:	6063      	str	r3, [r4, #4]
    1a94:	61a3      	str	r3, [r4, #24]
    1a96:	89a3      	ldrh	r3, [r4, #12]
    1a98:	061a      	lsls	r2, r3, #24
    1a9a:	d503      	bpl.n	1aa4 <setvbuf+0x60>
    1a9c:	1c28      	adds	r0, r5, #0
    1a9e:	6921      	ldr	r1, [r4, #16]
    1aa0:	f000 fdc0 	bl	2624 <_free_r>
    1aa4:	89a3      	ldrh	r3, [r4, #12]
    1aa6:	2283      	movs	r2, #131	; 0x83
    1aa8:	4393      	bics	r3, r2
    1aaa:	81a3      	strh	r3, [r4, #12]
    1aac:	9b01      	ldr	r3, [sp, #4]
    1aae:	2b02      	cmp	r3, #2
    1ab0:	d013      	beq.n	1ada <setvbuf+0x96>
    1ab2:	2f00      	cmp	r7, #0
    1ab4:	d125      	bne.n	1b02 <setvbuf+0xbe>
    1ab6:	2e00      	cmp	r6, #0
    1ab8:	d101      	bne.n	1abe <setvbuf+0x7a>
    1aba:	2680      	movs	r6, #128	; 0x80
    1abc:	00f6      	lsls	r6, r6, #3
    1abe:	1c30      	adds	r0, r6, #0
    1ac0:	f000 fd9a 	bl	25f8 <malloc>
    1ac4:	1e07      	subs	r7, r0, #0
    1ac6:	d118      	bne.n	1afa <setvbuf+0xb6>
    1ac8:	2080      	movs	r0, #128	; 0x80
    1aca:	00c0      	lsls	r0, r0, #3
    1acc:	f000 fd94 	bl	25f8 <malloc>
    1ad0:	1e07      	subs	r7, r0, #0
    1ad2:	d110      	bne.n	1af6 <setvbuf+0xb2>
    1ad4:	2001      	movs	r0, #1
    1ad6:	4240      	negs	r0, r0
    1ad8:	e000      	b.n	1adc <setvbuf+0x98>
    1ada:	2000      	movs	r0, #0
    1adc:	89a3      	ldrh	r3, [r4, #12]
    1ade:	2202      	movs	r2, #2
    1ae0:	4313      	orrs	r3, r2
    1ae2:	81a3      	strh	r3, [r4, #12]
    1ae4:	2300      	movs	r3, #0
    1ae6:	60a3      	str	r3, [r4, #8]
    1ae8:	1c23      	adds	r3, r4, #0
    1aea:	3347      	adds	r3, #71	; 0x47
    1aec:	6023      	str	r3, [r4, #0]
    1aee:	6123      	str	r3, [r4, #16]
    1af0:	2301      	movs	r3, #1
    1af2:	6163      	str	r3, [r4, #20]
    1af4:	e020      	b.n	1b38 <setvbuf+0xf4>
    1af6:	2680      	movs	r6, #128	; 0x80
    1af8:	00f6      	lsls	r6, r6, #3
    1afa:	89a3      	ldrh	r3, [r4, #12]
    1afc:	2280      	movs	r2, #128	; 0x80
    1afe:	4313      	orrs	r3, r2
    1b00:	81a3      	strh	r3, [r4, #12]
    1b02:	9a01      	ldr	r2, [sp, #4]
    1b04:	2a01      	cmp	r2, #1
    1b06:	d104      	bne.n	1b12 <setvbuf+0xce>
    1b08:	89a3      	ldrh	r3, [r4, #12]
    1b0a:	4313      	orrs	r3, r2
    1b0c:	81a3      	strh	r3, [r4, #12]
    1b0e:	4273      	negs	r3, r6
    1b10:	61a3      	str	r3, [r4, #24]
    1b12:	4b0e      	ldr	r3, [pc, #56]	; (1b4c <setvbuf+0x108>)
    1b14:	2000      	movs	r0, #0
    1b16:	62ab      	str	r3, [r5, #40]	; 0x28
    1b18:	89a3      	ldrh	r3, [r4, #12]
    1b1a:	6027      	str	r7, [r4, #0]
    1b1c:	6127      	str	r7, [r4, #16]
    1b1e:	6166      	str	r6, [r4, #20]
    1b20:	071a      	lsls	r2, r3, #28
    1b22:	d509      	bpl.n	1b38 <setvbuf+0xf4>
    1b24:	2203      	movs	r2, #3
    1b26:	4013      	ands	r3, r2
    1b28:	425a      	negs	r2, r3
    1b2a:	4153      	adcs	r3, r2
    1b2c:	425b      	negs	r3, r3
    1b2e:	401e      	ands	r6, r3
    1b30:	60a6      	str	r6, [r4, #8]
    1b32:	e001      	b.n	1b38 <setvbuf+0xf4>
    1b34:	2001      	movs	r0, #1
    1b36:	4240      	negs	r0, r0
    1b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	2000006c 	.word	0x2000006c
    1b40:	00002b64 	.word	0x00002b64
    1b44:	00002b84 	.word	0x00002b84
    1b48:	00002ba4 	.word	0x00002ba4
    1b4c:	000023d1 	.word	0x000023d1

00001b50 <strlen>:
    1b50:	2300      	movs	r3, #0
    1b52:	5cc2      	ldrb	r2, [r0, r3]
    1b54:	3301      	adds	r3, #1
    1b56:	2a00      	cmp	r2, #0
    1b58:	d1fb      	bne.n	1b52 <strlen+0x2>
    1b5a:	1e58      	subs	r0, r3, #1
    1b5c:	4770      	bx	lr

00001b5e <__sfputc_r>:
    1b5e:	6893      	ldr	r3, [r2, #8]
    1b60:	b510      	push	{r4, lr}
    1b62:	3b01      	subs	r3, #1
    1b64:	6093      	str	r3, [r2, #8]
    1b66:	2b00      	cmp	r3, #0
    1b68:	da05      	bge.n	1b76 <__sfputc_r+0x18>
    1b6a:	6994      	ldr	r4, [r2, #24]
    1b6c:	42a3      	cmp	r3, r4
    1b6e:	db08      	blt.n	1b82 <__sfputc_r+0x24>
    1b70:	b2cb      	uxtb	r3, r1
    1b72:	2b0a      	cmp	r3, #10
    1b74:	d005      	beq.n	1b82 <__sfputc_r+0x24>
    1b76:	6813      	ldr	r3, [r2, #0]
    1b78:	1c58      	adds	r0, r3, #1
    1b7a:	6010      	str	r0, [r2, #0]
    1b7c:	7019      	strb	r1, [r3, #0]
    1b7e:	b2c8      	uxtb	r0, r1
    1b80:	e001      	b.n	1b86 <__sfputc_r+0x28>
    1b82:	f000 faa5 	bl	20d0 <__swbuf_r>
    1b86:	bd10      	pop	{r4, pc}

00001b88 <__sfputs_r>:
    1b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1b8a:	1c06      	adds	r6, r0, #0
    1b8c:	1c0f      	adds	r7, r1, #0
    1b8e:	1c14      	adds	r4, r2, #0
    1b90:	18d5      	adds	r5, r2, r3
    1b92:	42ac      	cmp	r4, r5
    1b94:	d008      	beq.n	1ba8 <__sfputs_r+0x20>
    1b96:	7821      	ldrb	r1, [r4, #0]
    1b98:	1c30      	adds	r0, r6, #0
    1b9a:	1c3a      	adds	r2, r7, #0
    1b9c:	f7ff ffdf 	bl	1b5e <__sfputc_r>
    1ba0:	3401      	adds	r4, #1
    1ba2:	1c43      	adds	r3, r0, #1
    1ba4:	d1f5      	bne.n	1b92 <__sfputs_r+0xa>
    1ba6:	e000      	b.n	1baa <__sfputs_r+0x22>
    1ba8:	2000      	movs	r0, #0
    1baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001bac <_vfiprintf_r>:
    1bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bae:	b09f      	sub	sp, #124	; 0x7c
    1bb0:	1c06      	adds	r6, r0, #0
    1bb2:	1c0f      	adds	r7, r1, #0
    1bb4:	9203      	str	r2, [sp, #12]
    1bb6:	9305      	str	r3, [sp, #20]
    1bb8:	2800      	cmp	r0, #0
    1bba:	d004      	beq.n	1bc6 <_vfiprintf_r+0x1a>
    1bbc:	6981      	ldr	r1, [r0, #24]
    1bbe:	2900      	cmp	r1, #0
    1bc0:	d101      	bne.n	1bc6 <_vfiprintf_r+0x1a>
    1bc2:	f000 fc59 	bl	2478 <__sinit>
    1bc6:	4b75      	ldr	r3, [pc, #468]	; (1d9c <_vfiprintf_r+0x1f0>)
    1bc8:	429f      	cmp	r7, r3
    1bca:	d101      	bne.n	1bd0 <_vfiprintf_r+0x24>
    1bcc:	6877      	ldr	r7, [r6, #4]
    1bce:	e008      	b.n	1be2 <_vfiprintf_r+0x36>
    1bd0:	4b73      	ldr	r3, [pc, #460]	; (1da0 <_vfiprintf_r+0x1f4>)
    1bd2:	429f      	cmp	r7, r3
    1bd4:	d101      	bne.n	1bda <_vfiprintf_r+0x2e>
    1bd6:	68b7      	ldr	r7, [r6, #8]
    1bd8:	e003      	b.n	1be2 <_vfiprintf_r+0x36>
    1bda:	4b72      	ldr	r3, [pc, #456]	; (1da4 <_vfiprintf_r+0x1f8>)
    1bdc:	429f      	cmp	r7, r3
    1bde:	d100      	bne.n	1be2 <_vfiprintf_r+0x36>
    1be0:	68f7      	ldr	r7, [r6, #12]
    1be2:	89bb      	ldrh	r3, [r7, #12]
    1be4:	071a      	lsls	r2, r3, #28
    1be6:	d50a      	bpl.n	1bfe <_vfiprintf_r+0x52>
    1be8:	693b      	ldr	r3, [r7, #16]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d007      	beq.n	1bfe <_vfiprintf_r+0x52>
    1bee:	ad06      	add	r5, sp, #24
    1bf0:	2300      	movs	r3, #0
    1bf2:	616b      	str	r3, [r5, #20]
    1bf4:	2320      	movs	r3, #32
    1bf6:	766b      	strb	r3, [r5, #25]
    1bf8:	2330      	movs	r3, #48	; 0x30
    1bfa:	76ab      	strb	r3, [r5, #26]
    1bfc:	e03b      	b.n	1c76 <_vfiprintf_r+0xca>
    1bfe:	1c30      	adds	r0, r6, #0
    1c00:	1c39      	adds	r1, r7, #0
    1c02:	f000 fabd 	bl	2180 <__swsetup_r>
    1c06:	2800      	cmp	r0, #0
    1c08:	d0f1      	beq.n	1bee <_vfiprintf_r+0x42>
    1c0a:	2001      	movs	r0, #1
    1c0c:	4240      	negs	r0, r0
    1c0e:	e0c2      	b.n	1d96 <_vfiprintf_r+0x1ea>
    1c10:	9a05      	ldr	r2, [sp, #20]
    1c12:	1d11      	adds	r1, r2, #4
    1c14:	6812      	ldr	r2, [r2, #0]
    1c16:	9105      	str	r1, [sp, #20]
    1c18:	2a00      	cmp	r2, #0
    1c1a:	db76      	blt.n	1d0a <_vfiprintf_r+0x15e>
    1c1c:	9209      	str	r2, [sp, #36]	; 0x24
    1c1e:	3401      	adds	r4, #1
    1c20:	7823      	ldrb	r3, [r4, #0]
    1c22:	2b2e      	cmp	r3, #46	; 0x2e
    1c24:	d100      	bne.n	1c28 <_vfiprintf_r+0x7c>
    1c26:	e081      	b.n	1d2c <_vfiprintf_r+0x180>
    1c28:	7821      	ldrb	r1, [r4, #0]
    1c2a:	485f      	ldr	r0, [pc, #380]	; (1da8 <_vfiprintf_r+0x1fc>)
    1c2c:	2203      	movs	r2, #3
    1c2e:	f000 fced 	bl	260c <memchr>
    1c32:	2800      	cmp	r0, #0
    1c34:	d007      	beq.n	1c46 <_vfiprintf_r+0x9a>
    1c36:	495c      	ldr	r1, [pc, #368]	; (1da8 <_vfiprintf_r+0x1fc>)
    1c38:	682a      	ldr	r2, [r5, #0]
    1c3a:	1a43      	subs	r3, r0, r1
    1c3c:	2040      	movs	r0, #64	; 0x40
    1c3e:	4098      	lsls	r0, r3
    1c40:	4310      	orrs	r0, r2
    1c42:	6028      	str	r0, [r5, #0]
    1c44:	3401      	adds	r4, #1
    1c46:	7821      	ldrb	r1, [r4, #0]
    1c48:	1c63      	adds	r3, r4, #1
    1c4a:	4858      	ldr	r0, [pc, #352]	; (1dac <_vfiprintf_r+0x200>)
    1c4c:	2206      	movs	r2, #6
    1c4e:	9303      	str	r3, [sp, #12]
    1c50:	7629      	strb	r1, [r5, #24]
    1c52:	f000 fcdb 	bl	260c <memchr>
    1c56:	2800      	cmp	r0, #0
    1c58:	d100      	bne.n	1c5c <_vfiprintf_r+0xb0>
    1c5a:	e08a      	b.n	1d72 <_vfiprintf_r+0x1c6>
    1c5c:	4b54      	ldr	r3, [pc, #336]	; (1db0 <_vfiprintf_r+0x204>)
    1c5e:	2b00      	cmp	r3, #0
    1c60:	d17e      	bne.n	1d60 <_vfiprintf_r+0x1b4>
    1c62:	9b05      	ldr	r3, [sp, #20]
    1c64:	2207      	movs	r2, #7
    1c66:	3307      	adds	r3, #7
    1c68:	4393      	bics	r3, r2
    1c6a:	3308      	adds	r3, #8
    1c6c:	9305      	str	r3, [sp, #20]
    1c6e:	696a      	ldr	r2, [r5, #20]
    1c70:	9904      	ldr	r1, [sp, #16]
    1c72:	1853      	adds	r3, r2, r1
    1c74:	616b      	str	r3, [r5, #20]
    1c76:	9c03      	ldr	r4, [sp, #12]
    1c78:	7823      	ldrb	r3, [r4, #0]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d104      	bne.n	1c88 <_vfiprintf_r+0xdc>
    1c7e:	9903      	ldr	r1, [sp, #12]
    1c80:	1a61      	subs	r1, r4, r1
    1c82:	9102      	str	r1, [sp, #8]
    1c84:	d010      	beq.n	1ca8 <_vfiprintf_r+0xfc>
    1c86:	e003      	b.n	1c90 <_vfiprintf_r+0xe4>
    1c88:	2b25      	cmp	r3, #37	; 0x25
    1c8a:	d0f8      	beq.n	1c7e <_vfiprintf_r+0xd2>
    1c8c:	3401      	adds	r4, #1
    1c8e:	e7f3      	b.n	1c78 <_vfiprintf_r+0xcc>
    1c90:	1c30      	adds	r0, r6, #0
    1c92:	1c39      	adds	r1, r7, #0
    1c94:	9a03      	ldr	r2, [sp, #12]
    1c96:	9b02      	ldr	r3, [sp, #8]
    1c98:	f7ff ff76 	bl	1b88 <__sfputs_r>
    1c9c:	3001      	adds	r0, #1
    1c9e:	d075      	beq.n	1d8c <_vfiprintf_r+0x1e0>
    1ca0:	696a      	ldr	r2, [r5, #20]
    1ca2:	9902      	ldr	r1, [sp, #8]
    1ca4:	1853      	adds	r3, r2, r1
    1ca6:	616b      	str	r3, [r5, #20]
    1ca8:	7823      	ldrb	r3, [r4, #0]
    1caa:	2b00      	cmp	r3, #0
    1cac:	d06e      	beq.n	1d8c <_vfiprintf_r+0x1e0>
    1cae:	2201      	movs	r2, #1
    1cb0:	4252      	negs	r2, r2
    1cb2:	606a      	str	r2, [r5, #4]
    1cb4:	466a      	mov	r2, sp
    1cb6:	2300      	movs	r3, #0
    1cb8:	325b      	adds	r2, #91	; 0x5b
    1cba:	3401      	adds	r4, #1
    1cbc:	602b      	str	r3, [r5, #0]
    1cbe:	60eb      	str	r3, [r5, #12]
    1cc0:	60ab      	str	r3, [r5, #8]
    1cc2:	7013      	strb	r3, [r2, #0]
    1cc4:	65ab      	str	r3, [r5, #88]	; 0x58
    1cc6:	7821      	ldrb	r1, [r4, #0]
    1cc8:	483a      	ldr	r0, [pc, #232]	; (1db4 <_vfiprintf_r+0x208>)
    1cca:	2205      	movs	r2, #5
    1ccc:	f000 fc9e 	bl	260c <memchr>
    1cd0:	2800      	cmp	r0, #0
    1cd2:	d008      	beq.n	1ce6 <_vfiprintf_r+0x13a>
    1cd4:	4a37      	ldr	r2, [pc, #220]	; (1db4 <_vfiprintf_r+0x208>)
    1cd6:	3401      	adds	r4, #1
    1cd8:	1a83      	subs	r3, r0, r2
    1cda:	2001      	movs	r0, #1
    1cdc:	4098      	lsls	r0, r3
    1cde:	682b      	ldr	r3, [r5, #0]
    1ce0:	4318      	orrs	r0, r3
    1ce2:	6028      	str	r0, [r5, #0]
    1ce4:	e7ef      	b.n	1cc6 <_vfiprintf_r+0x11a>
    1ce6:	682b      	ldr	r3, [r5, #0]
    1ce8:	06d9      	lsls	r1, r3, #27
    1cea:	d503      	bpl.n	1cf4 <_vfiprintf_r+0x148>
    1cec:	466a      	mov	r2, sp
    1cee:	2120      	movs	r1, #32
    1cf0:	325b      	adds	r2, #91	; 0x5b
    1cf2:	7011      	strb	r1, [r2, #0]
    1cf4:	071a      	lsls	r2, r3, #28
    1cf6:	d503      	bpl.n	1d00 <_vfiprintf_r+0x154>
    1cf8:	466a      	mov	r2, sp
    1cfa:	212b      	movs	r1, #43	; 0x2b
    1cfc:	325b      	adds	r2, #91	; 0x5b
    1cfe:	7011      	strb	r1, [r2, #0]
    1d00:	7822      	ldrb	r2, [r4, #0]
    1d02:	2a2a      	cmp	r2, #42	; 0x2a
    1d04:	d084      	beq.n	1c10 <_vfiprintf_r+0x64>
    1d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d08:	e005      	b.n	1d16 <_vfiprintf_r+0x16a>
    1d0a:	4252      	negs	r2, r2
    1d0c:	60ea      	str	r2, [r5, #12]
    1d0e:	2202      	movs	r2, #2
    1d10:	4313      	orrs	r3, r2
    1d12:	602b      	str	r3, [r5, #0]
    1d14:	e783      	b.n	1c1e <_vfiprintf_r+0x72>
    1d16:	7822      	ldrb	r2, [r4, #0]
    1d18:	3a30      	subs	r2, #48	; 0x30
    1d1a:	2a09      	cmp	r2, #9
    1d1c:	d804      	bhi.n	1d28 <_vfiprintf_r+0x17c>
    1d1e:	210a      	movs	r1, #10
    1d20:	434b      	muls	r3, r1
    1d22:	3401      	adds	r4, #1
    1d24:	189b      	adds	r3, r3, r2
    1d26:	e7f6      	b.n	1d16 <_vfiprintf_r+0x16a>
    1d28:	9309      	str	r3, [sp, #36]	; 0x24
    1d2a:	e779      	b.n	1c20 <_vfiprintf_r+0x74>
    1d2c:	7863      	ldrb	r3, [r4, #1]
    1d2e:	2b2a      	cmp	r3, #42	; 0x2a
    1d30:	d109      	bne.n	1d46 <_vfiprintf_r+0x19a>
    1d32:	9b05      	ldr	r3, [sp, #20]
    1d34:	3402      	adds	r4, #2
    1d36:	1d1a      	adds	r2, r3, #4
    1d38:	681b      	ldr	r3, [r3, #0]
    1d3a:	9205      	str	r2, [sp, #20]
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	da0d      	bge.n	1d5c <_vfiprintf_r+0x1b0>
    1d40:	2301      	movs	r3, #1
    1d42:	425b      	negs	r3, r3
    1d44:	e00a      	b.n	1d5c <_vfiprintf_r+0x1b0>
    1d46:	3401      	adds	r4, #1
    1d48:	2300      	movs	r3, #0
    1d4a:	7822      	ldrb	r2, [r4, #0]
    1d4c:	3a30      	subs	r2, #48	; 0x30
    1d4e:	2a09      	cmp	r2, #9
    1d50:	d804      	bhi.n	1d5c <_vfiprintf_r+0x1b0>
    1d52:	210a      	movs	r1, #10
    1d54:	434b      	muls	r3, r1
    1d56:	3401      	adds	r4, #1
    1d58:	189b      	adds	r3, r3, r2
    1d5a:	e7f6      	b.n	1d4a <_vfiprintf_r+0x19e>
    1d5c:	9307      	str	r3, [sp, #28]
    1d5e:	e763      	b.n	1c28 <_vfiprintf_r+0x7c>
    1d60:	ab05      	add	r3, sp, #20
    1d62:	9300      	str	r3, [sp, #0]
    1d64:	1c30      	adds	r0, r6, #0
    1d66:	1c29      	adds	r1, r5, #0
    1d68:	1c3a      	adds	r2, r7, #0
    1d6a:	4b13      	ldr	r3, [pc, #76]	; (1db8 <_vfiprintf_r+0x20c>)
    1d6c:	e000      	b.n	1d70 <_vfiprintf_r+0x1c4>
    1d6e:	bf00      	nop
    1d70:	e007      	b.n	1d82 <_vfiprintf_r+0x1d6>
    1d72:	ab05      	add	r3, sp, #20
    1d74:	9300      	str	r3, [sp, #0]
    1d76:	1c30      	adds	r0, r6, #0
    1d78:	1c29      	adds	r1, r5, #0
    1d7a:	1c3a      	adds	r2, r7, #0
    1d7c:	4b0e      	ldr	r3, [pc, #56]	; (1db8 <_vfiprintf_r+0x20c>)
    1d7e:	f000 f891 	bl	1ea4 <_printf_i>
    1d82:	9004      	str	r0, [sp, #16]
    1d84:	9904      	ldr	r1, [sp, #16]
    1d86:	3101      	adds	r1, #1
    1d88:	d000      	beq.n	1d8c <_vfiprintf_r+0x1e0>
    1d8a:	e770      	b.n	1c6e <_vfiprintf_r+0xc2>
    1d8c:	89bb      	ldrh	r3, [r7, #12]
    1d8e:	065a      	lsls	r2, r3, #25
    1d90:	d500      	bpl.n	1d94 <_vfiprintf_r+0x1e8>
    1d92:	e73a      	b.n	1c0a <_vfiprintf_r+0x5e>
    1d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1d96:	b01f      	add	sp, #124	; 0x7c
    1d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	00002b64 	.word	0x00002b64
    1da0:	00002b84 	.word	0x00002b84
    1da4:	00002ba4 	.word	0x00002ba4
    1da8:	00002b36 	.word	0x00002b36
    1dac:	00002b3a 	.word	0x00002b3a
    1db0:	00000000 	.word	0x00000000
    1db4:	00002b30 	.word	0x00002b30
    1db8:	00001b89 	.word	0x00001b89

00001dbc <_printf_common>:
    1dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dbe:	1c15      	adds	r5, r2, #0
    1dc0:	9301      	str	r3, [sp, #4]
    1dc2:	690a      	ldr	r2, [r1, #16]
    1dc4:	688b      	ldr	r3, [r1, #8]
    1dc6:	1c06      	adds	r6, r0, #0
    1dc8:	1c0c      	adds	r4, r1, #0
    1dca:	4293      	cmp	r3, r2
    1dcc:	da00      	bge.n	1dd0 <_printf_common+0x14>
    1dce:	1c13      	adds	r3, r2, #0
    1dd0:	1c22      	adds	r2, r4, #0
    1dd2:	602b      	str	r3, [r5, #0]
    1dd4:	3243      	adds	r2, #67	; 0x43
    1dd6:	7812      	ldrb	r2, [r2, #0]
    1dd8:	2a00      	cmp	r2, #0
    1dda:	d001      	beq.n	1de0 <_printf_common+0x24>
    1ddc:	3301      	adds	r3, #1
    1dde:	602b      	str	r3, [r5, #0]
    1de0:	6820      	ldr	r0, [r4, #0]
    1de2:	0680      	lsls	r0, r0, #26
    1de4:	d502      	bpl.n	1dec <_printf_common+0x30>
    1de6:	682b      	ldr	r3, [r5, #0]
    1de8:	3302      	adds	r3, #2
    1dea:	602b      	str	r3, [r5, #0]
    1dec:	6821      	ldr	r1, [r4, #0]
    1dee:	2706      	movs	r7, #6
    1df0:	400f      	ands	r7, r1
    1df2:	d01f      	beq.n	1e34 <_printf_common+0x78>
    1df4:	1c23      	adds	r3, r4, #0
    1df6:	3343      	adds	r3, #67	; 0x43
    1df8:	781b      	ldrb	r3, [r3, #0]
    1dfa:	1e5a      	subs	r2, r3, #1
    1dfc:	4193      	sbcs	r3, r2
    1dfe:	6822      	ldr	r2, [r4, #0]
    1e00:	0692      	lsls	r2, r2, #26
    1e02:	d51f      	bpl.n	1e44 <_printf_common+0x88>
    1e04:	18e1      	adds	r1, r4, r3
    1e06:	3140      	adds	r1, #64	; 0x40
    1e08:	2030      	movs	r0, #48	; 0x30
    1e0a:	70c8      	strb	r0, [r1, #3]
    1e0c:	1c21      	adds	r1, r4, #0
    1e0e:	1c5a      	adds	r2, r3, #1
    1e10:	3145      	adds	r1, #69	; 0x45
    1e12:	7809      	ldrb	r1, [r1, #0]
    1e14:	18a2      	adds	r2, r4, r2
    1e16:	3240      	adds	r2, #64	; 0x40
    1e18:	3302      	adds	r3, #2
    1e1a:	70d1      	strb	r1, [r2, #3]
    1e1c:	e012      	b.n	1e44 <_printf_common+0x88>
    1e1e:	1c22      	adds	r2, r4, #0
    1e20:	1c30      	adds	r0, r6, #0
    1e22:	9901      	ldr	r1, [sp, #4]
    1e24:	3219      	adds	r2, #25
    1e26:	2301      	movs	r3, #1
    1e28:	9f08      	ldr	r7, [sp, #32]
    1e2a:	47b8      	blx	r7
    1e2c:	3001      	adds	r0, #1
    1e2e:	d011      	beq.n	1e54 <_printf_common+0x98>
    1e30:	9f00      	ldr	r7, [sp, #0]
    1e32:	3701      	adds	r7, #1
    1e34:	9700      	str	r7, [sp, #0]
    1e36:	68e0      	ldr	r0, [r4, #12]
    1e38:	6829      	ldr	r1, [r5, #0]
    1e3a:	9f00      	ldr	r7, [sp, #0]
    1e3c:	1a43      	subs	r3, r0, r1
    1e3e:	429f      	cmp	r7, r3
    1e40:	dbed      	blt.n	1e1e <_printf_common+0x62>
    1e42:	e7d7      	b.n	1df4 <_printf_common+0x38>
    1e44:	1c22      	adds	r2, r4, #0
    1e46:	1c30      	adds	r0, r6, #0
    1e48:	9901      	ldr	r1, [sp, #4]
    1e4a:	3243      	adds	r2, #67	; 0x43
    1e4c:	9f08      	ldr	r7, [sp, #32]
    1e4e:	47b8      	blx	r7
    1e50:	3001      	adds	r0, #1
    1e52:	d102      	bne.n	1e5a <_printf_common+0x9e>
    1e54:	2001      	movs	r0, #1
    1e56:	4240      	negs	r0, r0
    1e58:	e023      	b.n	1ea2 <_printf_common+0xe6>
    1e5a:	6820      	ldr	r0, [r4, #0]
    1e5c:	2106      	movs	r1, #6
    1e5e:	682b      	ldr	r3, [r5, #0]
    1e60:	68e2      	ldr	r2, [r4, #12]
    1e62:	4001      	ands	r1, r0
    1e64:	2500      	movs	r5, #0
    1e66:	2904      	cmp	r1, #4
    1e68:	d103      	bne.n	1e72 <_printf_common+0xb6>
    1e6a:	1ad5      	subs	r5, r2, r3
    1e6c:	43eb      	mvns	r3, r5
    1e6e:	17db      	asrs	r3, r3, #31
    1e70:	401d      	ands	r5, r3
    1e72:	68a2      	ldr	r2, [r4, #8]
    1e74:	6923      	ldr	r3, [r4, #16]
    1e76:	429a      	cmp	r2, r3
    1e78:	dd01      	ble.n	1e7e <_printf_common+0xc2>
    1e7a:	1ad3      	subs	r3, r2, r3
    1e7c:	18ed      	adds	r5, r5, r3
    1e7e:	2700      	movs	r7, #0
    1e80:	9700      	str	r7, [sp, #0]
    1e82:	9f00      	ldr	r7, [sp, #0]
    1e84:	42af      	cmp	r7, r5
    1e86:	da0b      	bge.n	1ea0 <_printf_common+0xe4>
    1e88:	1c22      	adds	r2, r4, #0
    1e8a:	1c30      	adds	r0, r6, #0
    1e8c:	9901      	ldr	r1, [sp, #4]
    1e8e:	321a      	adds	r2, #26
    1e90:	2301      	movs	r3, #1
    1e92:	9f08      	ldr	r7, [sp, #32]
    1e94:	47b8      	blx	r7
    1e96:	3001      	adds	r0, #1
    1e98:	d0dc      	beq.n	1e54 <_printf_common+0x98>
    1e9a:	9f00      	ldr	r7, [sp, #0]
    1e9c:	3701      	adds	r7, #1
    1e9e:	e7ef      	b.n	1e80 <_printf_common+0xc4>
    1ea0:	2000      	movs	r0, #0
    1ea2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00001ea4 <_printf_i>:
    1ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ea6:	1c0d      	adds	r5, r1, #0
    1ea8:	b08b      	sub	sp, #44	; 0x2c
    1eaa:	3543      	adds	r5, #67	; 0x43
    1eac:	9206      	str	r2, [sp, #24]
    1eae:	9005      	str	r0, [sp, #20]
    1eb0:	9307      	str	r3, [sp, #28]
    1eb2:	9504      	str	r5, [sp, #16]
    1eb4:	7e0b      	ldrb	r3, [r1, #24]
    1eb6:	1c0c      	adds	r4, r1, #0
    1eb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1eba:	2b6e      	cmp	r3, #110	; 0x6e
    1ebc:	d100      	bne.n	1ec0 <_printf_i+0x1c>
    1ebe:	e0a7      	b.n	2010 <STACK_SIZE+0x10>
    1ec0:	d811      	bhi.n	1ee6 <_printf_i+0x42>
    1ec2:	2b63      	cmp	r3, #99	; 0x63
    1ec4:	d022      	beq.n	1f0c <_printf_i+0x68>
    1ec6:	d809      	bhi.n	1edc <_printf_i+0x38>
    1ec8:	2b00      	cmp	r3, #0
    1eca:	d100      	bne.n	1ece <_printf_i+0x2a>
    1ecc:	e0b0      	b.n	2030 <STACK_SIZE+0x30>
    1ece:	2b58      	cmp	r3, #88	; 0x58
    1ed0:	d000      	beq.n	1ed4 <_printf_i+0x30>
    1ed2:	e0c0      	b.n	2056 <STACK_SIZE+0x56>
    1ed4:	3145      	adds	r1, #69	; 0x45
    1ed6:	700b      	strb	r3, [r1, #0]
    1ed8:	4d7b      	ldr	r5, [pc, #492]	; (20c8 <STACK_SIZE+0xc8>)
    1eda:	e04e      	b.n	1f7a <_printf_i+0xd6>
    1edc:	2b64      	cmp	r3, #100	; 0x64
    1ede:	d01c      	beq.n	1f1a <_printf_i+0x76>
    1ee0:	2b69      	cmp	r3, #105	; 0x69
    1ee2:	d01a      	beq.n	1f1a <_printf_i+0x76>
    1ee4:	e0b7      	b.n	2056 <STACK_SIZE+0x56>
    1ee6:	2b73      	cmp	r3, #115	; 0x73
    1ee8:	d100      	bne.n	1eec <_printf_i+0x48>
    1eea:	e0a5      	b.n	2038 <STACK_SIZE+0x38>
    1eec:	d809      	bhi.n	1f02 <_printf_i+0x5e>
    1eee:	2b6f      	cmp	r3, #111	; 0x6f
    1ef0:	d029      	beq.n	1f46 <_printf_i+0xa2>
    1ef2:	2b70      	cmp	r3, #112	; 0x70
    1ef4:	d000      	beq.n	1ef8 <_printf_i+0x54>
    1ef6:	e0ae      	b.n	2056 <STACK_SIZE+0x56>
    1ef8:	680e      	ldr	r6, [r1, #0]
    1efa:	2320      	movs	r3, #32
    1efc:	4333      	orrs	r3, r6
    1efe:	600b      	str	r3, [r1, #0]
    1f00:	e036      	b.n	1f70 <_printf_i+0xcc>
    1f02:	2b75      	cmp	r3, #117	; 0x75
    1f04:	d01f      	beq.n	1f46 <_printf_i+0xa2>
    1f06:	2b78      	cmp	r3, #120	; 0x78
    1f08:	d032      	beq.n	1f70 <_printf_i+0xcc>
    1f0a:	e0a4      	b.n	2056 <STACK_SIZE+0x56>
    1f0c:	6813      	ldr	r3, [r2, #0]
    1f0e:	1c0d      	adds	r5, r1, #0
    1f10:	1d19      	adds	r1, r3, #4
    1f12:	3542      	adds	r5, #66	; 0x42
    1f14:	6011      	str	r1, [r2, #0]
    1f16:	681b      	ldr	r3, [r3, #0]
    1f18:	e09f      	b.n	205a <STACK_SIZE+0x5a>
    1f1a:	6821      	ldr	r1, [r4, #0]
    1f1c:	6813      	ldr	r3, [r2, #0]
    1f1e:	060e      	lsls	r6, r1, #24
    1f20:	d503      	bpl.n	1f2a <_printf_i+0x86>
    1f22:	1d19      	adds	r1, r3, #4
    1f24:	6011      	str	r1, [r2, #0]
    1f26:	681e      	ldr	r6, [r3, #0]
    1f28:	e005      	b.n	1f36 <_printf_i+0x92>
    1f2a:	0648      	lsls	r0, r1, #25
    1f2c:	d5f9      	bpl.n	1f22 <_printf_i+0x7e>
    1f2e:	1d19      	adds	r1, r3, #4
    1f30:	6011      	str	r1, [r2, #0]
    1f32:	2100      	movs	r1, #0
    1f34:	5e5e      	ldrsh	r6, [r3, r1]
    1f36:	4b64      	ldr	r3, [pc, #400]	; (20c8 <STACK_SIZE+0xc8>)
    1f38:	2e00      	cmp	r6, #0
    1f3a:	da3b      	bge.n	1fb4 <_printf_i+0x110>
    1f3c:	9d04      	ldr	r5, [sp, #16]
    1f3e:	222d      	movs	r2, #45	; 0x2d
    1f40:	4276      	negs	r6, r6
    1f42:	702a      	strb	r2, [r5, #0]
    1f44:	e036      	b.n	1fb4 <_printf_i+0x110>
    1f46:	6821      	ldr	r1, [r4, #0]
    1f48:	6813      	ldr	r3, [r2, #0]
    1f4a:	060e      	lsls	r6, r1, #24
    1f4c:	d503      	bpl.n	1f56 <_printf_i+0xb2>
    1f4e:	1d19      	adds	r1, r3, #4
    1f50:	6011      	str	r1, [r2, #0]
    1f52:	681e      	ldr	r6, [r3, #0]
    1f54:	e004      	b.n	1f60 <_printf_i+0xbc>
    1f56:	0648      	lsls	r0, r1, #25
    1f58:	d5f9      	bpl.n	1f4e <_printf_i+0xaa>
    1f5a:	1d19      	adds	r1, r3, #4
    1f5c:	881e      	ldrh	r6, [r3, #0]
    1f5e:	6011      	str	r1, [r2, #0]
    1f60:	4b59      	ldr	r3, [pc, #356]	; (20c8 <STACK_SIZE+0xc8>)
    1f62:	7e22      	ldrb	r2, [r4, #24]
    1f64:	9303      	str	r3, [sp, #12]
    1f66:	2708      	movs	r7, #8
    1f68:	2a6f      	cmp	r2, #111	; 0x6f
    1f6a:	d01e      	beq.n	1faa <_printf_i+0x106>
    1f6c:	270a      	movs	r7, #10
    1f6e:	e01c      	b.n	1faa <_printf_i+0x106>
    1f70:	1c23      	adds	r3, r4, #0
    1f72:	2178      	movs	r1, #120	; 0x78
    1f74:	3345      	adds	r3, #69	; 0x45
    1f76:	4d55      	ldr	r5, [pc, #340]	; (20cc <STACK_SIZE+0xcc>)
    1f78:	7019      	strb	r1, [r3, #0]
    1f7a:	6811      	ldr	r1, [r2, #0]
    1f7c:	6823      	ldr	r3, [r4, #0]
    1f7e:	1d08      	adds	r0, r1, #4
    1f80:	9503      	str	r5, [sp, #12]
    1f82:	6010      	str	r0, [r2, #0]
    1f84:	061e      	lsls	r6, r3, #24
    1f86:	d501      	bpl.n	1f8c <_printf_i+0xe8>
    1f88:	680e      	ldr	r6, [r1, #0]
    1f8a:	e002      	b.n	1f92 <_printf_i+0xee>
    1f8c:	0658      	lsls	r0, r3, #25
    1f8e:	d5fb      	bpl.n	1f88 <_printf_i+0xe4>
    1f90:	880e      	ldrh	r6, [r1, #0]
    1f92:	07d9      	lsls	r1, r3, #31
    1f94:	d502      	bpl.n	1f9c <_printf_i+0xf8>
    1f96:	2220      	movs	r2, #32
    1f98:	4313      	orrs	r3, r2
    1f9a:	6023      	str	r3, [r4, #0]
    1f9c:	2710      	movs	r7, #16
    1f9e:	2e00      	cmp	r6, #0
    1fa0:	d103      	bne.n	1faa <_printf_i+0x106>
    1fa2:	6822      	ldr	r2, [r4, #0]
    1fa4:	2320      	movs	r3, #32
    1fa6:	439a      	bics	r2, r3
    1fa8:	6022      	str	r2, [r4, #0]
    1faa:	1c23      	adds	r3, r4, #0
    1fac:	2200      	movs	r2, #0
    1fae:	3343      	adds	r3, #67	; 0x43
    1fb0:	701a      	strb	r2, [r3, #0]
    1fb2:	e001      	b.n	1fb8 <_printf_i+0x114>
    1fb4:	9303      	str	r3, [sp, #12]
    1fb6:	270a      	movs	r7, #10
    1fb8:	6863      	ldr	r3, [r4, #4]
    1fba:	60a3      	str	r3, [r4, #8]
    1fbc:	2b00      	cmp	r3, #0
    1fbe:	db03      	blt.n	1fc8 <_printf_i+0x124>
    1fc0:	6825      	ldr	r5, [r4, #0]
    1fc2:	2204      	movs	r2, #4
    1fc4:	4395      	bics	r5, r2
    1fc6:	6025      	str	r5, [r4, #0]
    1fc8:	2e00      	cmp	r6, #0
    1fca:	d102      	bne.n	1fd2 <_printf_i+0x12e>
    1fcc:	9d04      	ldr	r5, [sp, #16]
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d00e      	beq.n	1ff0 <_printf_i+0x14c>
    1fd2:	9d04      	ldr	r5, [sp, #16]
    1fd4:	1c30      	adds	r0, r6, #0
    1fd6:	1c39      	adds	r1, r7, #0
    1fd8:	f7ff fc3e 	bl	1858 <__aeabi_uidivmod>
    1fdc:	9803      	ldr	r0, [sp, #12]
    1fde:	3d01      	subs	r5, #1
    1fe0:	5c43      	ldrb	r3, [r0, r1]
    1fe2:	1c30      	adds	r0, r6, #0
    1fe4:	702b      	strb	r3, [r5, #0]
    1fe6:	1c39      	adds	r1, r7, #0
    1fe8:	f7ff fbf2 	bl	17d0 <__aeabi_uidiv>
    1fec:	1e06      	subs	r6, r0, #0
    1fee:	d1f1      	bne.n	1fd4 <_printf_i+0x130>
    1ff0:	2f08      	cmp	r7, #8
    1ff2:	d109      	bne.n	2008 <STACK_SIZE+0x8>
    1ff4:	6821      	ldr	r1, [r4, #0]
    1ff6:	07c9      	lsls	r1, r1, #31
    1ff8:	d506      	bpl.n	2008 <STACK_SIZE+0x8>
    1ffa:	6862      	ldr	r2, [r4, #4]
    1ffc:	6923      	ldr	r3, [r4, #16]
    1ffe:	429a      	cmp	r2, r3
    2000:	dc02      	bgt.n	2008 <STACK_SIZE+0x8>
    2002:	3d01      	subs	r5, #1
    2004:	2330      	movs	r3, #48	; 0x30
    2006:	702b      	strb	r3, [r5, #0]
    2008:	9e04      	ldr	r6, [sp, #16]
    200a:	1b73      	subs	r3, r6, r5
    200c:	6123      	str	r3, [r4, #16]
    200e:	e02a      	b.n	2066 <STACK_SIZE+0x66>
    2010:	6808      	ldr	r0, [r1, #0]
    2012:	6813      	ldr	r3, [r2, #0]
    2014:	6949      	ldr	r1, [r1, #20]
    2016:	0605      	lsls	r5, r0, #24
    2018:	d504      	bpl.n	2024 <STACK_SIZE+0x24>
    201a:	1d18      	adds	r0, r3, #4
    201c:	6010      	str	r0, [r2, #0]
    201e:	681b      	ldr	r3, [r3, #0]
    2020:	6019      	str	r1, [r3, #0]
    2022:	e005      	b.n	2030 <STACK_SIZE+0x30>
    2024:	0646      	lsls	r6, r0, #25
    2026:	d5f8      	bpl.n	201a <STACK_SIZE+0x1a>
    2028:	1d18      	adds	r0, r3, #4
    202a:	6010      	str	r0, [r2, #0]
    202c:	681b      	ldr	r3, [r3, #0]
    202e:	8019      	strh	r1, [r3, #0]
    2030:	2300      	movs	r3, #0
    2032:	6123      	str	r3, [r4, #16]
    2034:	9d04      	ldr	r5, [sp, #16]
    2036:	e016      	b.n	2066 <STACK_SIZE+0x66>
    2038:	6813      	ldr	r3, [r2, #0]
    203a:	1d19      	adds	r1, r3, #4
    203c:	6011      	str	r1, [r2, #0]
    203e:	681d      	ldr	r5, [r3, #0]
    2040:	1c28      	adds	r0, r5, #0
    2042:	f7ff fd85 	bl	1b50 <strlen>
    2046:	6863      	ldr	r3, [r4, #4]
    2048:	6120      	str	r0, [r4, #16]
    204a:	4298      	cmp	r0, r3
    204c:	d900      	bls.n	2050 <STACK_SIZE+0x50>
    204e:	6123      	str	r3, [r4, #16]
    2050:	6920      	ldr	r0, [r4, #16]
    2052:	6060      	str	r0, [r4, #4]
    2054:	e004      	b.n	2060 <STACK_SIZE+0x60>
    2056:	1c25      	adds	r5, r4, #0
    2058:	3542      	adds	r5, #66	; 0x42
    205a:	702b      	strb	r3, [r5, #0]
    205c:	2301      	movs	r3, #1
    205e:	6123      	str	r3, [r4, #16]
    2060:	9e04      	ldr	r6, [sp, #16]
    2062:	2300      	movs	r3, #0
    2064:	7033      	strb	r3, [r6, #0]
    2066:	9e07      	ldr	r6, [sp, #28]
    2068:	9805      	ldr	r0, [sp, #20]
    206a:	9600      	str	r6, [sp, #0]
    206c:	1c21      	adds	r1, r4, #0
    206e:	aa09      	add	r2, sp, #36	; 0x24
    2070:	9b06      	ldr	r3, [sp, #24]
    2072:	f7ff fea3 	bl	1dbc <_printf_common>
    2076:	3001      	adds	r0, #1
    2078:	d102      	bne.n	2080 <STACK_SIZE+0x80>
    207a:	2001      	movs	r0, #1
    207c:	4240      	negs	r0, r0
    207e:	e021      	b.n	20c4 <STACK_SIZE+0xc4>
    2080:	1c2a      	adds	r2, r5, #0
    2082:	9805      	ldr	r0, [sp, #20]
    2084:	9906      	ldr	r1, [sp, #24]
    2086:	6923      	ldr	r3, [r4, #16]
    2088:	9d07      	ldr	r5, [sp, #28]
    208a:	47a8      	blx	r5
    208c:	3001      	adds	r0, #1
    208e:	d0f4      	beq.n	207a <STACK_SIZE+0x7a>
    2090:	6826      	ldr	r6, [r4, #0]
    2092:	07b6      	lsls	r6, r6, #30
    2094:	d405      	bmi.n	20a2 <STACK_SIZE+0xa2>
    2096:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2098:	68e0      	ldr	r0, [r4, #12]
    209a:	4298      	cmp	r0, r3
    209c:	da12      	bge.n	20c4 <STACK_SIZE+0xc4>
    209e:	1c18      	adds	r0, r3, #0
    20a0:	e010      	b.n	20c4 <STACK_SIZE+0xc4>
    20a2:	2500      	movs	r5, #0
    20a4:	68e0      	ldr	r0, [r4, #12]
    20a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    20a8:	1a43      	subs	r3, r0, r1
    20aa:	429d      	cmp	r5, r3
    20ac:	daf3      	bge.n	2096 <STACK_SIZE+0x96>
    20ae:	1c22      	adds	r2, r4, #0
    20b0:	9805      	ldr	r0, [sp, #20]
    20b2:	9906      	ldr	r1, [sp, #24]
    20b4:	3219      	adds	r2, #25
    20b6:	2301      	movs	r3, #1
    20b8:	9e07      	ldr	r6, [sp, #28]
    20ba:	47b0      	blx	r6
    20bc:	3001      	adds	r0, #1
    20be:	d0dc      	beq.n	207a <STACK_SIZE+0x7a>
    20c0:	3501      	adds	r5, #1
    20c2:	e7ef      	b.n	20a4 <STACK_SIZE+0xa4>
    20c4:	b00b      	add	sp, #44	; 0x2c
    20c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c8:	00002b41 	.word	0x00002b41
    20cc:	00002b52 	.word	0x00002b52

000020d0 <__swbuf_r>:
    20d0:	b570      	push	{r4, r5, r6, lr}
    20d2:	1c05      	adds	r5, r0, #0
    20d4:	1c0e      	adds	r6, r1, #0
    20d6:	1c14      	adds	r4, r2, #0
    20d8:	2800      	cmp	r0, #0
    20da:	d004      	beq.n	20e6 <__swbuf_r+0x16>
    20dc:	6982      	ldr	r2, [r0, #24]
    20de:	2a00      	cmp	r2, #0
    20e0:	d101      	bne.n	20e6 <__swbuf_r+0x16>
    20e2:	f000 f9c9 	bl	2478 <__sinit>
    20e6:	4b23      	ldr	r3, [pc, #140]	; (2174 <__swbuf_r+0xa4>)
    20e8:	429c      	cmp	r4, r3
    20ea:	d101      	bne.n	20f0 <__swbuf_r+0x20>
    20ec:	686c      	ldr	r4, [r5, #4]
    20ee:	e008      	b.n	2102 <__swbuf_r+0x32>
    20f0:	4b21      	ldr	r3, [pc, #132]	; (2178 <__swbuf_r+0xa8>)
    20f2:	429c      	cmp	r4, r3
    20f4:	d101      	bne.n	20fa <__swbuf_r+0x2a>
    20f6:	68ac      	ldr	r4, [r5, #8]
    20f8:	e003      	b.n	2102 <__swbuf_r+0x32>
    20fa:	4b20      	ldr	r3, [pc, #128]	; (217c <__swbuf_r+0xac>)
    20fc:	429c      	cmp	r4, r3
    20fe:	d100      	bne.n	2102 <__swbuf_r+0x32>
    2100:	68ec      	ldr	r4, [r5, #12]
    2102:	69a3      	ldr	r3, [r4, #24]
    2104:	60a3      	str	r3, [r4, #8]
    2106:	89a3      	ldrh	r3, [r4, #12]
    2108:	071a      	lsls	r2, r3, #28
    210a:	d50a      	bpl.n	2122 <__swbuf_r+0x52>
    210c:	6923      	ldr	r3, [r4, #16]
    210e:	2b00      	cmp	r3, #0
    2110:	d007      	beq.n	2122 <__swbuf_r+0x52>
    2112:	6822      	ldr	r2, [r4, #0]
    2114:	6923      	ldr	r3, [r4, #16]
    2116:	b2f6      	uxtb	r6, r6
    2118:	1ad0      	subs	r0, r2, r3
    211a:	6962      	ldr	r2, [r4, #20]
    211c:	4290      	cmp	r0, r2
    211e:	db0f      	blt.n	2140 <__swbuf_r+0x70>
    2120:	e008      	b.n	2134 <__swbuf_r+0x64>
    2122:	1c28      	adds	r0, r5, #0
    2124:	1c21      	adds	r1, r4, #0
    2126:	f000 f82b 	bl	2180 <__swsetup_r>
    212a:	2800      	cmp	r0, #0
    212c:	d0f1      	beq.n	2112 <__swbuf_r+0x42>
    212e:	2001      	movs	r0, #1
    2130:	4240      	negs	r0, r0
    2132:	e01d      	b.n	2170 <__swbuf_r+0xa0>
    2134:	1c28      	adds	r0, r5, #0
    2136:	1c21      	adds	r1, r4, #0
    2138:	f000 f91e 	bl	2378 <_fflush_r>
    213c:	2800      	cmp	r0, #0
    213e:	d1f6      	bne.n	212e <__swbuf_r+0x5e>
    2140:	68a3      	ldr	r3, [r4, #8]
    2142:	3001      	adds	r0, #1
    2144:	3b01      	subs	r3, #1
    2146:	60a3      	str	r3, [r4, #8]
    2148:	6823      	ldr	r3, [r4, #0]
    214a:	1c5a      	adds	r2, r3, #1
    214c:	6022      	str	r2, [r4, #0]
    214e:	701e      	strb	r6, [r3, #0]
    2150:	6963      	ldr	r3, [r4, #20]
    2152:	4298      	cmp	r0, r3
    2154:	d005      	beq.n	2162 <__swbuf_r+0x92>
    2156:	89a3      	ldrh	r3, [r4, #12]
    2158:	1c30      	adds	r0, r6, #0
    215a:	07da      	lsls	r2, r3, #31
    215c:	d508      	bpl.n	2170 <__swbuf_r+0xa0>
    215e:	2e0a      	cmp	r6, #10
    2160:	d106      	bne.n	2170 <__swbuf_r+0xa0>
    2162:	1c28      	adds	r0, r5, #0
    2164:	1c21      	adds	r1, r4, #0
    2166:	f000 f907 	bl	2378 <_fflush_r>
    216a:	2800      	cmp	r0, #0
    216c:	d1df      	bne.n	212e <__swbuf_r+0x5e>
    216e:	1c30      	adds	r0, r6, #0
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	00002b64 	.word	0x00002b64
    2178:	00002b84 	.word	0x00002b84
    217c:	00002ba4 	.word	0x00002ba4

00002180 <__swsetup_r>:
    2180:	4b34      	ldr	r3, [pc, #208]	; (2254 <__swsetup_r+0xd4>)
    2182:	b570      	push	{r4, r5, r6, lr}
    2184:	681d      	ldr	r5, [r3, #0]
    2186:	1c06      	adds	r6, r0, #0
    2188:	1c0c      	adds	r4, r1, #0
    218a:	2d00      	cmp	r5, #0
    218c:	d005      	beq.n	219a <__swsetup_r+0x1a>
    218e:	69a9      	ldr	r1, [r5, #24]
    2190:	2900      	cmp	r1, #0
    2192:	d102      	bne.n	219a <__swsetup_r+0x1a>
    2194:	1c28      	adds	r0, r5, #0
    2196:	f000 f96f 	bl	2478 <__sinit>
    219a:	4b2f      	ldr	r3, [pc, #188]	; (2258 <__swsetup_r+0xd8>)
    219c:	429c      	cmp	r4, r3
    219e:	d101      	bne.n	21a4 <__swsetup_r+0x24>
    21a0:	686c      	ldr	r4, [r5, #4]
    21a2:	e008      	b.n	21b6 <__swsetup_r+0x36>
    21a4:	4b2d      	ldr	r3, [pc, #180]	; (225c <__swsetup_r+0xdc>)
    21a6:	429c      	cmp	r4, r3
    21a8:	d101      	bne.n	21ae <__swsetup_r+0x2e>
    21aa:	68ac      	ldr	r4, [r5, #8]
    21ac:	e003      	b.n	21b6 <__swsetup_r+0x36>
    21ae:	4b2c      	ldr	r3, [pc, #176]	; (2260 <__swsetup_r+0xe0>)
    21b0:	429c      	cmp	r4, r3
    21b2:	d100      	bne.n	21b6 <__swsetup_r+0x36>
    21b4:	68ec      	ldr	r4, [r5, #12]
    21b6:	89a2      	ldrh	r2, [r4, #12]
    21b8:	b293      	uxth	r3, r2
    21ba:	0719      	lsls	r1, r3, #28
    21bc:	d421      	bmi.n	2202 <__swsetup_r+0x82>
    21be:	06d9      	lsls	r1, r3, #27
    21c0:	d405      	bmi.n	21ce <__swsetup_r+0x4e>
    21c2:	2309      	movs	r3, #9
    21c4:	6033      	str	r3, [r6, #0]
    21c6:	2340      	movs	r3, #64	; 0x40
    21c8:	431a      	orrs	r2, r3
    21ca:	81a2      	strh	r2, [r4, #12]
    21cc:	e03f      	b.n	224e <__swsetup_r+0xce>
    21ce:	075a      	lsls	r2, r3, #29
    21d0:	d513      	bpl.n	21fa <__swsetup_r+0x7a>
    21d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21d4:	2900      	cmp	r1, #0
    21d6:	d008      	beq.n	21ea <__swsetup_r+0x6a>
    21d8:	1c23      	adds	r3, r4, #0
    21da:	3344      	adds	r3, #68	; 0x44
    21dc:	4299      	cmp	r1, r3
    21de:	d002      	beq.n	21e6 <__swsetup_r+0x66>
    21e0:	1c30      	adds	r0, r6, #0
    21e2:	f000 fa1f 	bl	2624 <_free_r>
    21e6:	2300      	movs	r3, #0
    21e8:	6363      	str	r3, [r4, #52]	; 0x34
    21ea:	89a3      	ldrh	r3, [r4, #12]
    21ec:	2224      	movs	r2, #36	; 0x24
    21ee:	4393      	bics	r3, r2
    21f0:	81a3      	strh	r3, [r4, #12]
    21f2:	2300      	movs	r3, #0
    21f4:	6063      	str	r3, [r4, #4]
    21f6:	6923      	ldr	r3, [r4, #16]
    21f8:	6023      	str	r3, [r4, #0]
    21fa:	89a3      	ldrh	r3, [r4, #12]
    21fc:	2208      	movs	r2, #8
    21fe:	4313      	orrs	r3, r2
    2200:	81a3      	strh	r3, [r4, #12]
    2202:	6921      	ldr	r1, [r4, #16]
    2204:	2900      	cmp	r1, #0
    2206:	d10b      	bne.n	2220 <__swsetup_r+0xa0>
    2208:	89a3      	ldrh	r3, [r4, #12]
    220a:	22a0      	movs	r2, #160	; 0xa0
    220c:	0092      	lsls	r2, r2, #2
    220e:	401a      	ands	r2, r3
    2210:	2380      	movs	r3, #128	; 0x80
    2212:	009b      	lsls	r3, r3, #2
    2214:	429a      	cmp	r2, r3
    2216:	d003      	beq.n	2220 <__swsetup_r+0xa0>
    2218:	1c30      	adds	r0, r6, #0
    221a:	1c21      	adds	r1, r4, #0
    221c:	f000 f99c 	bl	2558 <__smakebuf_r>
    2220:	89a3      	ldrh	r3, [r4, #12]
    2222:	2201      	movs	r2, #1
    2224:	401a      	ands	r2, r3
    2226:	d005      	beq.n	2234 <__swsetup_r+0xb4>
    2228:	6961      	ldr	r1, [r4, #20]
    222a:	2200      	movs	r2, #0
    222c:	60a2      	str	r2, [r4, #8]
    222e:	424a      	negs	r2, r1
    2230:	61a2      	str	r2, [r4, #24]
    2232:	e003      	b.n	223c <__swsetup_r+0xbc>
    2234:	0799      	lsls	r1, r3, #30
    2236:	d400      	bmi.n	223a <__swsetup_r+0xba>
    2238:	6962      	ldr	r2, [r4, #20]
    223a:	60a2      	str	r2, [r4, #8]
    223c:	6922      	ldr	r2, [r4, #16]
    223e:	2000      	movs	r0, #0
    2240:	4282      	cmp	r2, r0
    2242:	d106      	bne.n	2252 <__swsetup_r+0xd2>
    2244:	0619      	lsls	r1, r3, #24
    2246:	d504      	bpl.n	2252 <__swsetup_r+0xd2>
    2248:	2240      	movs	r2, #64	; 0x40
    224a:	4313      	orrs	r3, r2
    224c:	81a3      	strh	r3, [r4, #12]
    224e:	2001      	movs	r0, #1
    2250:	4240      	negs	r0, r0
    2252:	bd70      	pop	{r4, r5, r6, pc}
    2254:	2000006c 	.word	0x2000006c
    2258:	00002b64 	.word	0x00002b64
    225c:	00002b84 	.word	0x00002b84
    2260:	00002ba4 	.word	0x00002ba4

00002264 <__sflush_r>:
    2264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2266:	898b      	ldrh	r3, [r1, #12]
    2268:	1c05      	adds	r5, r0, #0
    226a:	1c0c      	adds	r4, r1, #0
    226c:	0719      	lsls	r1, r3, #28
    226e:	d45e      	bmi.n	232e <__sflush_r+0xca>
    2270:	6862      	ldr	r2, [r4, #4]
    2272:	2a00      	cmp	r2, #0
    2274:	dc02      	bgt.n	227c <__sflush_r+0x18>
    2276:	6c27      	ldr	r7, [r4, #64]	; 0x40
    2278:	2f00      	cmp	r7, #0
    227a:	dd1a      	ble.n	22b2 <__sflush_r+0x4e>
    227c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    227e:	2f00      	cmp	r7, #0
    2280:	d017      	beq.n	22b2 <__sflush_r+0x4e>
    2282:	2200      	movs	r2, #0
    2284:	682e      	ldr	r6, [r5, #0]
    2286:	602a      	str	r2, [r5, #0]
    2288:	2280      	movs	r2, #128	; 0x80
    228a:	0152      	lsls	r2, r2, #5
    228c:	401a      	ands	r2, r3
    228e:	d001      	beq.n	2294 <__sflush_r+0x30>
    2290:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2292:	e015      	b.n	22c0 <__sflush_r+0x5c>
    2294:	1c28      	adds	r0, r5, #0
    2296:	6a21      	ldr	r1, [r4, #32]
    2298:	2301      	movs	r3, #1
    229a:	47b8      	blx	r7
    229c:	1c02      	adds	r2, r0, #0
    229e:	1c41      	adds	r1, r0, #1
    22a0:	d10e      	bne.n	22c0 <__sflush_r+0x5c>
    22a2:	682b      	ldr	r3, [r5, #0]
    22a4:	2b00      	cmp	r3, #0
    22a6:	d00b      	beq.n	22c0 <__sflush_r+0x5c>
    22a8:	2b1d      	cmp	r3, #29
    22aa:	d001      	beq.n	22b0 <__sflush_r+0x4c>
    22ac:	2b16      	cmp	r3, #22
    22ae:	d102      	bne.n	22b6 <__sflush_r+0x52>
    22b0:	602e      	str	r6, [r5, #0]
    22b2:	2000      	movs	r0, #0
    22b4:	e05e      	b.n	2374 <__sflush_r+0x110>
    22b6:	89a3      	ldrh	r3, [r4, #12]
    22b8:	2140      	movs	r1, #64	; 0x40
    22ba:	430b      	orrs	r3, r1
    22bc:	81a3      	strh	r3, [r4, #12]
    22be:	e059      	b.n	2374 <__sflush_r+0x110>
    22c0:	89a3      	ldrh	r3, [r4, #12]
    22c2:	075f      	lsls	r7, r3, #29
    22c4:	d506      	bpl.n	22d4 <__sflush_r+0x70>
    22c6:	6861      	ldr	r1, [r4, #4]
    22c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    22ca:	1a52      	subs	r2, r2, r1
    22cc:	2b00      	cmp	r3, #0
    22ce:	d001      	beq.n	22d4 <__sflush_r+0x70>
    22d0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    22d2:	1bd2      	subs	r2, r2, r7
    22d4:	1c28      	adds	r0, r5, #0
    22d6:	6a21      	ldr	r1, [r4, #32]
    22d8:	2300      	movs	r3, #0
    22da:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    22dc:	47b8      	blx	r7
    22de:	89a2      	ldrh	r2, [r4, #12]
    22e0:	1c41      	adds	r1, r0, #1
    22e2:	d106      	bne.n	22f2 <__sflush_r+0x8e>
    22e4:	682b      	ldr	r3, [r5, #0]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d003      	beq.n	22f2 <__sflush_r+0x8e>
    22ea:	2b1d      	cmp	r3, #29
    22ec:	d001      	beq.n	22f2 <__sflush_r+0x8e>
    22ee:	2b16      	cmp	r3, #22
    22f0:	d119      	bne.n	2326 <__sflush_r+0xc2>
    22f2:	2300      	movs	r3, #0
    22f4:	6063      	str	r3, [r4, #4]
    22f6:	6923      	ldr	r3, [r4, #16]
    22f8:	6023      	str	r3, [r4, #0]
    22fa:	04d7      	lsls	r7, r2, #19
    22fc:	d505      	bpl.n	230a <__sflush_r+0xa6>
    22fe:	1c41      	adds	r1, r0, #1
    2300:	d102      	bne.n	2308 <__sflush_r+0xa4>
    2302:	682a      	ldr	r2, [r5, #0]
    2304:	2a00      	cmp	r2, #0
    2306:	d100      	bne.n	230a <__sflush_r+0xa6>
    2308:	6560      	str	r0, [r4, #84]	; 0x54
    230a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    230c:	602e      	str	r6, [r5, #0]
    230e:	2900      	cmp	r1, #0
    2310:	d0cf      	beq.n	22b2 <__sflush_r+0x4e>
    2312:	1c23      	adds	r3, r4, #0
    2314:	3344      	adds	r3, #68	; 0x44
    2316:	4299      	cmp	r1, r3
    2318:	d002      	beq.n	2320 <__sflush_r+0xbc>
    231a:	1c28      	adds	r0, r5, #0
    231c:	f000 f982 	bl	2624 <_free_r>
    2320:	2000      	movs	r0, #0
    2322:	6360      	str	r0, [r4, #52]	; 0x34
    2324:	e026      	b.n	2374 <__sflush_r+0x110>
    2326:	2340      	movs	r3, #64	; 0x40
    2328:	431a      	orrs	r2, r3
    232a:	81a2      	strh	r2, [r4, #12]
    232c:	e022      	b.n	2374 <__sflush_r+0x110>
    232e:	6926      	ldr	r6, [r4, #16]
    2330:	2e00      	cmp	r6, #0
    2332:	d0be      	beq.n	22b2 <__sflush_r+0x4e>
    2334:	6827      	ldr	r7, [r4, #0]
    2336:	2200      	movs	r2, #0
    2338:	1bbf      	subs	r7, r7, r6
    233a:	9701      	str	r7, [sp, #4]
    233c:	6026      	str	r6, [r4, #0]
    233e:	0799      	lsls	r1, r3, #30
    2340:	d100      	bne.n	2344 <__sflush_r+0xe0>
    2342:	6962      	ldr	r2, [r4, #20]
    2344:	60a2      	str	r2, [r4, #8]
    2346:	9f01      	ldr	r7, [sp, #4]
    2348:	2f00      	cmp	r7, #0
    234a:	ddb2      	ble.n	22b2 <__sflush_r+0x4e>
    234c:	1c28      	adds	r0, r5, #0
    234e:	6a21      	ldr	r1, [r4, #32]
    2350:	1c32      	adds	r2, r6, #0
    2352:	9b01      	ldr	r3, [sp, #4]
    2354:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    2356:	47b8      	blx	r7
    2358:	2800      	cmp	r0, #0
    235a:	dc06      	bgt.n	236a <__sflush_r+0x106>
    235c:	89a3      	ldrh	r3, [r4, #12]
    235e:	2240      	movs	r2, #64	; 0x40
    2360:	4313      	orrs	r3, r2
    2362:	2001      	movs	r0, #1
    2364:	81a3      	strh	r3, [r4, #12]
    2366:	4240      	negs	r0, r0
    2368:	e004      	b.n	2374 <__sflush_r+0x110>
    236a:	9f01      	ldr	r7, [sp, #4]
    236c:	1836      	adds	r6, r6, r0
    236e:	1a3f      	subs	r7, r7, r0
    2370:	9701      	str	r7, [sp, #4]
    2372:	e7e8      	b.n	2346 <__sflush_r+0xe2>
    2374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00002378 <_fflush_r>:
    2378:	690a      	ldr	r2, [r1, #16]
    237a:	b538      	push	{r3, r4, r5, lr}
    237c:	1c05      	adds	r5, r0, #0
    237e:	1c0c      	adds	r4, r1, #0
    2380:	2a00      	cmp	r2, #0
    2382:	d101      	bne.n	2388 <_fflush_r+0x10>
    2384:	2000      	movs	r0, #0
    2386:	e01c      	b.n	23c2 <_fflush_r+0x4a>
    2388:	2800      	cmp	r0, #0
    238a:	d004      	beq.n	2396 <_fflush_r+0x1e>
    238c:	6983      	ldr	r3, [r0, #24]
    238e:	2b00      	cmp	r3, #0
    2390:	d101      	bne.n	2396 <_fflush_r+0x1e>
    2392:	f000 f871 	bl	2478 <__sinit>
    2396:	4b0b      	ldr	r3, [pc, #44]	; (23c4 <_fflush_r+0x4c>)
    2398:	429c      	cmp	r4, r3
    239a:	d101      	bne.n	23a0 <_fflush_r+0x28>
    239c:	686c      	ldr	r4, [r5, #4]
    239e:	e008      	b.n	23b2 <_fflush_r+0x3a>
    23a0:	4b09      	ldr	r3, [pc, #36]	; (23c8 <_fflush_r+0x50>)
    23a2:	429c      	cmp	r4, r3
    23a4:	d101      	bne.n	23aa <_fflush_r+0x32>
    23a6:	68ac      	ldr	r4, [r5, #8]
    23a8:	e003      	b.n	23b2 <_fflush_r+0x3a>
    23aa:	4b08      	ldr	r3, [pc, #32]	; (23cc <_fflush_r+0x54>)
    23ac:	429c      	cmp	r4, r3
    23ae:	d100      	bne.n	23b2 <_fflush_r+0x3a>
    23b0:	68ec      	ldr	r4, [r5, #12]
    23b2:	220c      	movs	r2, #12
    23b4:	5ea3      	ldrsh	r3, [r4, r2]
    23b6:	2b00      	cmp	r3, #0
    23b8:	d0e4      	beq.n	2384 <_fflush_r+0xc>
    23ba:	1c28      	adds	r0, r5, #0
    23bc:	1c21      	adds	r1, r4, #0
    23be:	f7ff ff51 	bl	2264 <__sflush_r>
    23c2:	bd38      	pop	{r3, r4, r5, pc}
    23c4:	00002b64 	.word	0x00002b64
    23c8:	00002b84 	.word	0x00002b84
    23cc:	00002ba4 	.word	0x00002ba4

000023d0 <_cleanup_r>:
    23d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23d2:	1c04      	adds	r4, r0, #0
    23d4:	1c07      	adds	r7, r0, #0
    23d6:	3448      	adds	r4, #72	; 0x48
    23d8:	2c00      	cmp	r4, #0
    23da:	d012      	beq.n	2402 <_cleanup_r+0x32>
    23dc:	68a5      	ldr	r5, [r4, #8]
    23de:	6866      	ldr	r6, [r4, #4]
    23e0:	3e01      	subs	r6, #1
    23e2:	d40c      	bmi.n	23fe <_cleanup_r+0x2e>
    23e4:	89ab      	ldrh	r3, [r5, #12]
    23e6:	2b01      	cmp	r3, #1
    23e8:	d907      	bls.n	23fa <_cleanup_r+0x2a>
    23ea:	220e      	movs	r2, #14
    23ec:	5eab      	ldrsh	r3, [r5, r2]
    23ee:	3301      	adds	r3, #1
    23f0:	d003      	beq.n	23fa <_cleanup_r+0x2a>
    23f2:	1c38      	adds	r0, r7, #0
    23f4:	1c29      	adds	r1, r5, #0
    23f6:	f7ff ffbf 	bl	2378 <_fflush_r>
    23fa:	3568      	adds	r5, #104	; 0x68
    23fc:	e7f0      	b.n	23e0 <_cleanup_r+0x10>
    23fe:	6824      	ldr	r4, [r4, #0]
    2400:	e7ea      	b.n	23d8 <_cleanup_r+0x8>
    2402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002404 <std.isra.0>:
    2404:	2300      	movs	r3, #0
    2406:	b510      	push	{r4, lr}
    2408:	1c04      	adds	r4, r0, #0
    240a:	6003      	str	r3, [r0, #0]
    240c:	6043      	str	r3, [r0, #4]
    240e:	6083      	str	r3, [r0, #8]
    2410:	8181      	strh	r1, [r0, #12]
    2412:	6643      	str	r3, [r0, #100]	; 0x64
    2414:	81c2      	strh	r2, [r0, #14]
    2416:	6103      	str	r3, [r0, #16]
    2418:	6143      	str	r3, [r0, #20]
    241a:	6183      	str	r3, [r0, #24]
    241c:	1c19      	adds	r1, r3, #0
    241e:	2208      	movs	r2, #8
    2420:	305c      	adds	r0, #92	; 0x5c
    2422:	f7ff fa76 	bl	1912 <memset>
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <std.isra.0+0x38>)
    2428:	6224      	str	r4, [r4, #32]
    242a:	6263      	str	r3, [r4, #36]	; 0x24
    242c:	4b04      	ldr	r3, [pc, #16]	; (2440 <std.isra.0+0x3c>)
    242e:	62a3      	str	r3, [r4, #40]	; 0x28
    2430:	4b04      	ldr	r3, [pc, #16]	; (2444 <std.isra.0+0x40>)
    2432:	62e3      	str	r3, [r4, #44]	; 0x2c
    2434:	4b04      	ldr	r3, [pc, #16]	; (2448 <std.isra.0+0x44>)
    2436:	6323      	str	r3, [r4, #48]	; 0x30
    2438:	bd10      	pop	{r4, pc}
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	00002781 	.word	0x00002781
    2440:	000027a9 	.word	0x000027a9
    2444:	000027e1 	.word	0x000027e1
    2448:	0000280d 	.word	0x0000280d

0000244c <__sfmoreglue>:
    244c:	b570      	push	{r4, r5, r6, lr}
    244e:	1e4b      	subs	r3, r1, #1
    2450:	2568      	movs	r5, #104	; 0x68
    2452:	435d      	muls	r5, r3
    2454:	1c0e      	adds	r6, r1, #0
    2456:	1c29      	adds	r1, r5, #0
    2458:	3174      	adds	r1, #116	; 0x74
    245a:	f000 f92b 	bl	26b4 <_malloc_r>
    245e:	1e04      	subs	r4, r0, #0
    2460:	d008      	beq.n	2474 <__sfmoreglue+0x28>
    2462:	2100      	movs	r1, #0
    2464:	6001      	str	r1, [r0, #0]
    2466:	6046      	str	r6, [r0, #4]
    2468:	1c2a      	adds	r2, r5, #0
    246a:	300c      	adds	r0, #12
    246c:	60a0      	str	r0, [r4, #8]
    246e:	3268      	adds	r2, #104	; 0x68
    2470:	f7ff fa4f 	bl	1912 <memset>
    2474:	1c20      	adds	r0, r4, #0
    2476:	bd70      	pop	{r4, r5, r6, pc}

00002478 <__sinit>:
    2478:	6983      	ldr	r3, [r0, #24]
    247a:	b513      	push	{r0, r1, r4, lr}
    247c:	1c04      	adds	r4, r0, #0
    247e:	2b00      	cmp	r3, #0
    2480:	d127      	bne.n	24d2 <__sinit+0x5a>
    2482:	6483      	str	r3, [r0, #72]	; 0x48
    2484:	64c3      	str	r3, [r0, #76]	; 0x4c
    2486:	6503      	str	r3, [r0, #80]	; 0x50
    2488:	4b12      	ldr	r3, [pc, #72]	; (24d4 <__sinit+0x5c>)
    248a:	4a13      	ldr	r2, [pc, #76]	; (24d8 <__sinit+0x60>)
    248c:	681b      	ldr	r3, [r3, #0]
    248e:	6282      	str	r2, [r0, #40]	; 0x28
    2490:	4298      	cmp	r0, r3
    2492:	d101      	bne.n	2498 <__sinit+0x20>
    2494:	2301      	movs	r3, #1
    2496:	6183      	str	r3, [r0, #24]
    2498:	1c20      	adds	r0, r4, #0
    249a:	f000 f81f 	bl	24dc <__sfp>
    249e:	6060      	str	r0, [r4, #4]
    24a0:	1c20      	adds	r0, r4, #0
    24a2:	f000 f81b 	bl	24dc <__sfp>
    24a6:	60a0      	str	r0, [r4, #8]
    24a8:	1c20      	adds	r0, r4, #0
    24aa:	f000 f817 	bl	24dc <__sfp>
    24ae:	2104      	movs	r1, #4
    24b0:	60e0      	str	r0, [r4, #12]
    24b2:	2200      	movs	r2, #0
    24b4:	6860      	ldr	r0, [r4, #4]
    24b6:	f7ff ffa5 	bl	2404 <std.isra.0>
    24ba:	68a0      	ldr	r0, [r4, #8]
    24bc:	2109      	movs	r1, #9
    24be:	2201      	movs	r2, #1
    24c0:	f7ff ffa0 	bl	2404 <std.isra.0>
    24c4:	68e0      	ldr	r0, [r4, #12]
    24c6:	2112      	movs	r1, #18
    24c8:	2202      	movs	r2, #2
    24ca:	f7ff ff9b 	bl	2404 <std.isra.0>
    24ce:	2301      	movs	r3, #1
    24d0:	61a3      	str	r3, [r4, #24]
    24d2:	bd13      	pop	{r0, r1, r4, pc}
    24d4:	00002b2c 	.word	0x00002b2c
    24d8:	000023d1 	.word	0x000023d1

000024dc <__sfp>:
    24dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24de:	4b1d      	ldr	r3, [pc, #116]	; (2554 <__sfp+0x78>)
    24e0:	1c07      	adds	r7, r0, #0
    24e2:	681e      	ldr	r6, [r3, #0]
    24e4:	69b2      	ldr	r2, [r6, #24]
    24e6:	2a00      	cmp	r2, #0
    24e8:	d102      	bne.n	24f0 <__sfp+0x14>
    24ea:	1c30      	adds	r0, r6, #0
    24ec:	f7ff ffc4 	bl	2478 <__sinit>
    24f0:	3648      	adds	r6, #72	; 0x48
    24f2:	68b4      	ldr	r4, [r6, #8]
    24f4:	6873      	ldr	r3, [r6, #4]
    24f6:	3b01      	subs	r3, #1
    24f8:	d405      	bmi.n	2506 <__sfp+0x2a>
    24fa:	220c      	movs	r2, #12
    24fc:	5ea5      	ldrsh	r5, [r4, r2]
    24fe:	2d00      	cmp	r5, #0
    2500:	d010      	beq.n	2524 <__sfp+0x48>
    2502:	3468      	adds	r4, #104	; 0x68
    2504:	e7f7      	b.n	24f6 <__sfp+0x1a>
    2506:	6833      	ldr	r3, [r6, #0]
    2508:	2b00      	cmp	r3, #0
    250a:	d106      	bne.n	251a <__sfp+0x3e>
    250c:	1c38      	adds	r0, r7, #0
    250e:	2104      	movs	r1, #4
    2510:	f7ff ff9c 	bl	244c <__sfmoreglue>
    2514:	6030      	str	r0, [r6, #0]
    2516:	2800      	cmp	r0, #0
    2518:	d001      	beq.n	251e <__sfp+0x42>
    251a:	6836      	ldr	r6, [r6, #0]
    251c:	e7e9      	b.n	24f2 <__sfp+0x16>
    251e:	230c      	movs	r3, #12
    2520:	603b      	str	r3, [r7, #0]
    2522:	e016      	b.n	2552 <__sfp+0x76>
    2524:	2301      	movs	r3, #1
    2526:	425b      	negs	r3, r3
    2528:	81e3      	strh	r3, [r4, #14]
    252a:	1c20      	adds	r0, r4, #0
    252c:	2301      	movs	r3, #1
    252e:	81a3      	strh	r3, [r4, #12]
    2530:	6665      	str	r5, [r4, #100]	; 0x64
    2532:	6025      	str	r5, [r4, #0]
    2534:	60a5      	str	r5, [r4, #8]
    2536:	6065      	str	r5, [r4, #4]
    2538:	6125      	str	r5, [r4, #16]
    253a:	6165      	str	r5, [r4, #20]
    253c:	61a5      	str	r5, [r4, #24]
    253e:	305c      	adds	r0, #92	; 0x5c
    2540:	1c29      	adds	r1, r5, #0
    2542:	2208      	movs	r2, #8
    2544:	f7ff f9e5 	bl	1912 <memset>
    2548:	6365      	str	r5, [r4, #52]	; 0x34
    254a:	63a5      	str	r5, [r4, #56]	; 0x38
    254c:	64a5      	str	r5, [r4, #72]	; 0x48
    254e:	64e5      	str	r5, [r4, #76]	; 0x4c
    2550:	1c20      	adds	r0, r4, #0
    2552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2554:	00002b2c 	.word	0x00002b2c

00002558 <__smakebuf_r>:
    2558:	b5f0      	push	{r4, r5, r6, r7, lr}
    255a:	898b      	ldrh	r3, [r1, #12]
    255c:	b091      	sub	sp, #68	; 0x44
    255e:	1c05      	adds	r5, r0, #0
    2560:	1c0c      	adds	r4, r1, #0
    2562:	079a      	lsls	r2, r3, #30
    2564:	d425      	bmi.n	25b2 <__smakebuf_r+0x5a>
    2566:	230e      	movs	r3, #14
    2568:	5ec9      	ldrsh	r1, [r1, r3]
    256a:	2900      	cmp	r1, #0
    256c:	da06      	bge.n	257c <__smakebuf_r+0x24>
    256e:	89a7      	ldrh	r7, [r4, #12]
    2570:	2380      	movs	r3, #128	; 0x80
    2572:	401f      	ands	r7, r3
    2574:	d00f      	beq.n	2596 <__smakebuf_r+0x3e>
    2576:	2700      	movs	r7, #0
    2578:	2640      	movs	r6, #64	; 0x40
    257a:	e00e      	b.n	259a <__smakebuf_r+0x42>
    257c:	aa01      	add	r2, sp, #4
    257e:	f000 f971 	bl	2864 <_fstat_r>
    2582:	2800      	cmp	r0, #0
    2584:	dbf3      	blt.n	256e <__smakebuf_r+0x16>
    2586:	9b02      	ldr	r3, [sp, #8]
    2588:	27f0      	movs	r7, #240	; 0xf0
    258a:	023f      	lsls	r7, r7, #8
    258c:	4a18      	ldr	r2, [pc, #96]	; (25f0 <__smakebuf_r+0x98>)
    258e:	401f      	ands	r7, r3
    2590:	18bf      	adds	r7, r7, r2
    2592:	427b      	negs	r3, r7
    2594:	415f      	adcs	r7, r3
    2596:	2680      	movs	r6, #128	; 0x80
    2598:	00f6      	lsls	r6, r6, #3
    259a:	1c28      	adds	r0, r5, #0
    259c:	1c31      	adds	r1, r6, #0
    259e:	f000 f889 	bl	26b4 <_malloc_r>
    25a2:	2800      	cmp	r0, #0
    25a4:	d10c      	bne.n	25c0 <__smakebuf_r+0x68>
    25a6:	89a3      	ldrh	r3, [r4, #12]
    25a8:	059a      	lsls	r2, r3, #22
    25aa:	d41f      	bmi.n	25ec <__smakebuf_r+0x94>
    25ac:	2202      	movs	r2, #2
    25ae:	4313      	orrs	r3, r2
    25b0:	81a3      	strh	r3, [r4, #12]
    25b2:	1c23      	adds	r3, r4, #0
    25b4:	3347      	adds	r3, #71	; 0x47
    25b6:	6023      	str	r3, [r4, #0]
    25b8:	6123      	str	r3, [r4, #16]
    25ba:	2301      	movs	r3, #1
    25bc:	6163      	str	r3, [r4, #20]
    25be:	e015      	b.n	25ec <__smakebuf_r+0x94>
    25c0:	4b0c      	ldr	r3, [pc, #48]	; (25f4 <__smakebuf_r+0x9c>)
    25c2:	2280      	movs	r2, #128	; 0x80
    25c4:	62ab      	str	r3, [r5, #40]	; 0x28
    25c6:	89a3      	ldrh	r3, [r4, #12]
    25c8:	6020      	str	r0, [r4, #0]
    25ca:	4313      	orrs	r3, r2
    25cc:	81a3      	strh	r3, [r4, #12]
    25ce:	6120      	str	r0, [r4, #16]
    25d0:	6166      	str	r6, [r4, #20]
    25d2:	2f00      	cmp	r7, #0
    25d4:	d00a      	beq.n	25ec <__smakebuf_r+0x94>
    25d6:	230e      	movs	r3, #14
    25d8:	5ee1      	ldrsh	r1, [r4, r3]
    25da:	1c28      	adds	r0, r5, #0
    25dc:	f000 f954 	bl	2888 <_isatty_r>
    25e0:	2800      	cmp	r0, #0
    25e2:	d003      	beq.n	25ec <__smakebuf_r+0x94>
    25e4:	89a3      	ldrh	r3, [r4, #12]
    25e6:	2201      	movs	r2, #1
    25e8:	4313      	orrs	r3, r2
    25ea:	81a3      	strh	r3, [r4, #12]
    25ec:	b011      	add	sp, #68	; 0x44
    25ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25f0:	ffffe000 	.word	0xffffe000
    25f4:	000023d1 	.word	0x000023d1

000025f8 <malloc>:
    25f8:	b508      	push	{r3, lr}
    25fa:	4b03      	ldr	r3, [pc, #12]	; (2608 <malloc+0x10>)
    25fc:	1c01      	adds	r1, r0, #0
    25fe:	6818      	ldr	r0, [r3, #0]
    2600:	f000 f858 	bl	26b4 <_malloc_r>
    2604:	bd08      	pop	{r3, pc}
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	2000006c 	.word	0x2000006c

0000260c <memchr>:
    260c:	b2c9      	uxtb	r1, r1
    260e:	1882      	adds	r2, r0, r2
    2610:	4290      	cmp	r0, r2
    2612:	d004      	beq.n	261e <memchr+0x12>
    2614:	7803      	ldrb	r3, [r0, #0]
    2616:	428b      	cmp	r3, r1
    2618:	d002      	beq.n	2620 <memchr+0x14>
    261a:	3001      	adds	r0, #1
    261c:	e7f8      	b.n	2610 <memchr+0x4>
    261e:	2000      	movs	r0, #0
    2620:	4770      	bx	lr
	...

00002624 <_free_r>:
    2624:	b530      	push	{r4, r5, lr}
    2626:	2900      	cmp	r1, #0
    2628:	d040      	beq.n	26ac <_free_r+0x88>
    262a:	3904      	subs	r1, #4
    262c:	680b      	ldr	r3, [r1, #0]
    262e:	2b00      	cmp	r3, #0
    2630:	da00      	bge.n	2634 <_free_r+0x10>
    2632:	18c9      	adds	r1, r1, r3
    2634:	4a1e      	ldr	r2, [pc, #120]	; (26b0 <_free_r+0x8c>)
    2636:	6813      	ldr	r3, [r2, #0]
    2638:	1c14      	adds	r4, r2, #0
    263a:	2b00      	cmp	r3, #0
    263c:	d102      	bne.n	2644 <_free_r+0x20>
    263e:	604b      	str	r3, [r1, #4]
    2640:	6011      	str	r1, [r2, #0]
    2642:	e033      	b.n	26ac <_free_r+0x88>
    2644:	4299      	cmp	r1, r3
    2646:	d20f      	bcs.n	2668 <_free_r+0x44>
    2648:	6808      	ldr	r0, [r1, #0]
    264a:	180a      	adds	r2, r1, r0
    264c:	429a      	cmp	r2, r3
    264e:	d105      	bne.n	265c <_free_r+0x38>
    2650:	6813      	ldr	r3, [r2, #0]
    2652:	6852      	ldr	r2, [r2, #4]
    2654:	18c0      	adds	r0, r0, r3
    2656:	6008      	str	r0, [r1, #0]
    2658:	604a      	str	r2, [r1, #4]
    265a:	e000      	b.n	265e <_free_r+0x3a>
    265c:	604b      	str	r3, [r1, #4]
    265e:	6021      	str	r1, [r4, #0]
    2660:	e024      	b.n	26ac <_free_r+0x88>
    2662:	428a      	cmp	r2, r1
    2664:	d803      	bhi.n	266e <_free_r+0x4a>
    2666:	1c13      	adds	r3, r2, #0
    2668:	685a      	ldr	r2, [r3, #4]
    266a:	2a00      	cmp	r2, #0
    266c:	d1f9      	bne.n	2662 <_free_r+0x3e>
    266e:	681d      	ldr	r5, [r3, #0]
    2670:	195c      	adds	r4, r3, r5
    2672:	428c      	cmp	r4, r1
    2674:	d10b      	bne.n	268e <_free_r+0x6a>
    2676:	6809      	ldr	r1, [r1, #0]
    2678:	1869      	adds	r1, r5, r1
    267a:	1858      	adds	r0, r3, r1
    267c:	6019      	str	r1, [r3, #0]
    267e:	4290      	cmp	r0, r2
    2680:	d114      	bne.n	26ac <_free_r+0x88>
    2682:	6814      	ldr	r4, [r2, #0]
    2684:	6852      	ldr	r2, [r2, #4]
    2686:	1909      	adds	r1, r1, r4
    2688:	6019      	str	r1, [r3, #0]
    268a:	605a      	str	r2, [r3, #4]
    268c:	e00e      	b.n	26ac <_free_r+0x88>
    268e:	428c      	cmp	r4, r1
    2690:	d902      	bls.n	2698 <_free_r+0x74>
    2692:	230c      	movs	r3, #12
    2694:	6003      	str	r3, [r0, #0]
    2696:	e009      	b.n	26ac <_free_r+0x88>
    2698:	6808      	ldr	r0, [r1, #0]
    269a:	180c      	adds	r4, r1, r0
    269c:	4294      	cmp	r4, r2
    269e:	d103      	bne.n	26a8 <_free_r+0x84>
    26a0:	6814      	ldr	r4, [r2, #0]
    26a2:	6852      	ldr	r2, [r2, #4]
    26a4:	1900      	adds	r0, r0, r4
    26a6:	6008      	str	r0, [r1, #0]
    26a8:	604a      	str	r2, [r1, #4]
    26aa:	6059      	str	r1, [r3, #4]
    26ac:	bd30      	pop	{r4, r5, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	200001a0 	.word	0x200001a0

000026b4 <_malloc_r>:
    26b4:	b570      	push	{r4, r5, r6, lr}
    26b6:	2303      	movs	r3, #3
    26b8:	1ccd      	adds	r5, r1, #3
    26ba:	439d      	bics	r5, r3
    26bc:	3508      	adds	r5, #8
    26be:	1c06      	adds	r6, r0, #0
    26c0:	2d0c      	cmp	r5, #12
    26c2:	d201      	bcs.n	26c8 <_malloc_r+0x14>
    26c4:	250c      	movs	r5, #12
    26c6:	e001      	b.n	26cc <_malloc_r+0x18>
    26c8:	2d00      	cmp	r5, #0
    26ca:	db3f      	blt.n	274c <_malloc_r+0x98>
    26cc:	428d      	cmp	r5, r1
    26ce:	d33d      	bcc.n	274c <_malloc_r+0x98>
    26d0:	4b20      	ldr	r3, [pc, #128]	; (2754 <_malloc_r+0xa0>)
    26d2:	681c      	ldr	r4, [r3, #0]
    26d4:	1c1a      	adds	r2, r3, #0
    26d6:	1c21      	adds	r1, r4, #0
    26d8:	2900      	cmp	r1, #0
    26da:	d013      	beq.n	2704 <_malloc_r+0x50>
    26dc:	6808      	ldr	r0, [r1, #0]
    26de:	1b43      	subs	r3, r0, r5
    26e0:	d40d      	bmi.n	26fe <_malloc_r+0x4a>
    26e2:	2b0b      	cmp	r3, #11
    26e4:	d902      	bls.n	26ec <_malloc_r+0x38>
    26e6:	600b      	str	r3, [r1, #0]
    26e8:	18cc      	adds	r4, r1, r3
    26ea:	e01e      	b.n	272a <_malloc_r+0x76>
    26ec:	428c      	cmp	r4, r1
    26ee:	d102      	bne.n	26f6 <_malloc_r+0x42>
    26f0:	6863      	ldr	r3, [r4, #4]
    26f2:	6013      	str	r3, [r2, #0]
    26f4:	e01a      	b.n	272c <_malloc_r+0x78>
    26f6:	6848      	ldr	r0, [r1, #4]
    26f8:	6060      	str	r0, [r4, #4]
    26fa:	1c0c      	adds	r4, r1, #0
    26fc:	e016      	b.n	272c <_malloc_r+0x78>
    26fe:	1c0c      	adds	r4, r1, #0
    2700:	6849      	ldr	r1, [r1, #4]
    2702:	e7e9      	b.n	26d8 <_malloc_r+0x24>
    2704:	4c14      	ldr	r4, [pc, #80]	; (2758 <_malloc_r+0xa4>)
    2706:	6820      	ldr	r0, [r4, #0]
    2708:	2800      	cmp	r0, #0
    270a:	d103      	bne.n	2714 <_malloc_r+0x60>
    270c:	1c30      	adds	r0, r6, #0
    270e:	f000 f825 	bl	275c <_sbrk_r>
    2712:	6020      	str	r0, [r4, #0]
    2714:	1c30      	adds	r0, r6, #0
    2716:	1c29      	adds	r1, r5, #0
    2718:	f000 f820 	bl	275c <_sbrk_r>
    271c:	1c43      	adds	r3, r0, #1
    271e:	d015      	beq.n	274c <_malloc_r+0x98>
    2720:	1cc4      	adds	r4, r0, #3
    2722:	2303      	movs	r3, #3
    2724:	439c      	bics	r4, r3
    2726:	4284      	cmp	r4, r0
    2728:	d10a      	bne.n	2740 <_malloc_r+0x8c>
    272a:	6025      	str	r5, [r4, #0]
    272c:	1c20      	adds	r0, r4, #0
    272e:	300b      	adds	r0, #11
    2730:	2207      	movs	r2, #7
    2732:	1d23      	adds	r3, r4, #4
    2734:	4390      	bics	r0, r2
    2736:	1ac3      	subs	r3, r0, r3
    2738:	d00b      	beq.n	2752 <_malloc_r+0x9e>
    273a:	425a      	negs	r2, r3
    273c:	50e2      	str	r2, [r4, r3]
    273e:	e008      	b.n	2752 <_malloc_r+0x9e>
    2740:	1a21      	subs	r1, r4, r0
    2742:	1c30      	adds	r0, r6, #0
    2744:	f000 f80a 	bl	275c <_sbrk_r>
    2748:	3001      	adds	r0, #1
    274a:	d1ee      	bne.n	272a <_malloc_r+0x76>
    274c:	230c      	movs	r3, #12
    274e:	6033      	str	r3, [r6, #0]
    2750:	2000      	movs	r0, #0
    2752:	bd70      	pop	{r4, r5, r6, pc}
    2754:	200001a0 	.word	0x200001a0
    2758:	2000019c 	.word	0x2000019c

0000275c <_sbrk_r>:
    275c:	b538      	push	{r3, r4, r5, lr}
    275e:	4c07      	ldr	r4, [pc, #28]	; (277c <_sbrk_r+0x20>)
    2760:	2300      	movs	r3, #0
    2762:	1c05      	adds	r5, r0, #0
    2764:	1c08      	adds	r0, r1, #0
    2766:	6023      	str	r3, [r4, #0]
    2768:	f7fe fd3a 	bl	11e0 <_sbrk>
    276c:	1c43      	adds	r3, r0, #1
    276e:	d103      	bne.n	2778 <_sbrk_r+0x1c>
    2770:	6823      	ldr	r3, [r4, #0]
    2772:	2b00      	cmp	r3, #0
    2774:	d000      	beq.n	2778 <_sbrk_r+0x1c>
    2776:	602b      	str	r3, [r5, #0]
    2778:	bd38      	pop	{r3, r4, r5, pc}
    277a:	46c0      	nop			; (mov r8, r8)
    277c:	20000210 	.word	0x20000210

00002780 <__sread>:
    2780:	b538      	push	{r3, r4, r5, lr}
    2782:	1c0c      	adds	r4, r1, #0
    2784:	250e      	movs	r5, #14
    2786:	5f49      	ldrsh	r1, [r1, r5]
    2788:	f000 f8a4 	bl	28d4 <_read_r>
    278c:	2800      	cmp	r0, #0
    278e:	db03      	blt.n	2798 <__sread+0x18>
    2790:	6d62      	ldr	r2, [r4, #84]	; 0x54
    2792:	1813      	adds	r3, r2, r0
    2794:	6563      	str	r3, [r4, #84]	; 0x54
    2796:	e003      	b.n	27a0 <__sread+0x20>
    2798:	89a2      	ldrh	r2, [r4, #12]
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <__sread+0x24>)
    279c:	4013      	ands	r3, r2
    279e:	81a3      	strh	r3, [r4, #12]
    27a0:	bd38      	pop	{r3, r4, r5, pc}
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	ffffefff 	.word	0xffffefff

000027a8 <__swrite>:
    27a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27aa:	1c1e      	adds	r6, r3, #0
    27ac:	898b      	ldrh	r3, [r1, #12]
    27ae:	1c05      	adds	r5, r0, #0
    27b0:	1c0c      	adds	r4, r1, #0
    27b2:	1c17      	adds	r7, r2, #0
    27b4:	05da      	lsls	r2, r3, #23
    27b6:	d505      	bpl.n	27c4 <__swrite+0x1c>
    27b8:	230e      	movs	r3, #14
    27ba:	5ec9      	ldrsh	r1, [r1, r3]
    27bc:	2200      	movs	r2, #0
    27be:	2302      	movs	r3, #2
    27c0:	f000 f874 	bl	28ac <_lseek_r>
    27c4:	89a2      	ldrh	r2, [r4, #12]
    27c6:	4b05      	ldr	r3, [pc, #20]	; (27dc <__swrite+0x34>)
    27c8:	1c28      	adds	r0, r5, #0
    27ca:	4013      	ands	r3, r2
    27cc:	81a3      	strh	r3, [r4, #12]
    27ce:	220e      	movs	r2, #14
    27d0:	5ea1      	ldrsh	r1, [r4, r2]
    27d2:	1c33      	adds	r3, r6, #0
    27d4:	1c3a      	adds	r2, r7, #0
    27d6:	f000 f81f 	bl	2818 <_write_r>
    27da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27dc:	ffffefff 	.word	0xffffefff

000027e0 <__sseek>:
    27e0:	b538      	push	{r3, r4, r5, lr}
    27e2:	1c0c      	adds	r4, r1, #0
    27e4:	250e      	movs	r5, #14
    27e6:	5f49      	ldrsh	r1, [r1, r5]
    27e8:	f000 f860 	bl	28ac <_lseek_r>
    27ec:	89a3      	ldrh	r3, [r4, #12]
    27ee:	1c42      	adds	r2, r0, #1
    27f0:	d103      	bne.n	27fa <__sseek+0x1a>
    27f2:	4a05      	ldr	r2, [pc, #20]	; (2808 <__sseek+0x28>)
    27f4:	4013      	ands	r3, r2
    27f6:	81a3      	strh	r3, [r4, #12]
    27f8:	e004      	b.n	2804 <__sseek+0x24>
    27fa:	2280      	movs	r2, #128	; 0x80
    27fc:	0152      	lsls	r2, r2, #5
    27fe:	4313      	orrs	r3, r2
    2800:	81a3      	strh	r3, [r4, #12]
    2802:	6560      	str	r0, [r4, #84]	; 0x54
    2804:	bd38      	pop	{r3, r4, r5, pc}
    2806:	46c0      	nop			; (mov r8, r8)
    2808:	ffffefff 	.word	0xffffefff

0000280c <__sclose>:
    280c:	b508      	push	{r3, lr}
    280e:	230e      	movs	r3, #14
    2810:	5ec9      	ldrsh	r1, [r1, r3]
    2812:	f000 f815 	bl	2840 <_close_r>
    2816:	bd08      	pop	{r3, pc}

00002818 <_write_r>:
    2818:	b538      	push	{r3, r4, r5, lr}
    281a:	4c08      	ldr	r4, [pc, #32]	; (283c <_write_r+0x24>)
    281c:	1c05      	adds	r5, r0, #0
    281e:	2000      	movs	r0, #0
    2820:	6020      	str	r0, [r4, #0]
    2822:	1c08      	adds	r0, r1, #0
    2824:	1c11      	adds	r1, r2, #0
    2826:	1c1a      	adds	r2, r3, #0
    2828:	f7fd fe96 	bl	558 <_write>
    282c:	1c43      	adds	r3, r0, #1
    282e:	d103      	bne.n	2838 <_write_r+0x20>
    2830:	6823      	ldr	r3, [r4, #0]
    2832:	2b00      	cmp	r3, #0
    2834:	d000      	beq.n	2838 <_write_r+0x20>
    2836:	602b      	str	r3, [r5, #0]
    2838:	bd38      	pop	{r3, r4, r5, pc}
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	20000210 	.word	0x20000210

00002840 <_close_r>:
    2840:	b538      	push	{r3, r4, r5, lr}
    2842:	4c07      	ldr	r4, [pc, #28]	; (2860 <_close_r+0x20>)
    2844:	2300      	movs	r3, #0
    2846:	1c05      	adds	r5, r0, #0
    2848:	1c08      	adds	r0, r1, #0
    284a:	6023      	str	r3, [r4, #0]
    284c:	f7fe fcda 	bl	1204 <_close>
    2850:	1c43      	adds	r3, r0, #1
    2852:	d103      	bne.n	285c <_close_r+0x1c>
    2854:	6823      	ldr	r3, [r4, #0]
    2856:	2b00      	cmp	r3, #0
    2858:	d000      	beq.n	285c <_close_r+0x1c>
    285a:	602b      	str	r3, [r5, #0]
    285c:	bd38      	pop	{r3, r4, r5, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	20000210 	.word	0x20000210

00002864 <_fstat_r>:
    2864:	b538      	push	{r3, r4, r5, lr}
    2866:	4c07      	ldr	r4, [pc, #28]	; (2884 <_fstat_r+0x20>)
    2868:	2300      	movs	r3, #0
    286a:	1c05      	adds	r5, r0, #0
    286c:	1c08      	adds	r0, r1, #0
    286e:	1c11      	adds	r1, r2, #0
    2870:	6023      	str	r3, [r4, #0]
    2872:	f7fe fccb 	bl	120c <_fstat>
    2876:	1c43      	adds	r3, r0, #1
    2878:	d103      	bne.n	2882 <_fstat_r+0x1e>
    287a:	6823      	ldr	r3, [r4, #0]
    287c:	2b00      	cmp	r3, #0
    287e:	d000      	beq.n	2882 <_fstat_r+0x1e>
    2880:	602b      	str	r3, [r5, #0]
    2882:	bd38      	pop	{r3, r4, r5, pc}
    2884:	20000210 	.word	0x20000210

00002888 <_isatty_r>:
    2888:	b538      	push	{r3, r4, r5, lr}
    288a:	4c07      	ldr	r4, [pc, #28]	; (28a8 <_isatty_r+0x20>)
    288c:	2300      	movs	r3, #0
    288e:	1c05      	adds	r5, r0, #0
    2890:	1c08      	adds	r0, r1, #0
    2892:	6023      	str	r3, [r4, #0]
    2894:	f7fe fcc0 	bl	1218 <_isatty>
    2898:	1c43      	adds	r3, r0, #1
    289a:	d103      	bne.n	28a4 <_isatty_r+0x1c>
    289c:	6823      	ldr	r3, [r4, #0]
    289e:	2b00      	cmp	r3, #0
    28a0:	d000      	beq.n	28a4 <_isatty_r+0x1c>
    28a2:	602b      	str	r3, [r5, #0]
    28a4:	bd38      	pop	{r3, r4, r5, pc}
    28a6:	46c0      	nop			; (mov r8, r8)
    28a8:	20000210 	.word	0x20000210

000028ac <_lseek_r>:
    28ac:	b538      	push	{r3, r4, r5, lr}
    28ae:	4c08      	ldr	r4, [pc, #32]	; (28d0 <_lseek_r+0x24>)
    28b0:	1c05      	adds	r5, r0, #0
    28b2:	2000      	movs	r0, #0
    28b4:	6020      	str	r0, [r4, #0]
    28b6:	1c08      	adds	r0, r1, #0
    28b8:	1c11      	adds	r1, r2, #0
    28ba:	1c1a      	adds	r2, r3, #0
    28bc:	f7fe fcae 	bl	121c <_lseek>
    28c0:	1c43      	adds	r3, r0, #1
    28c2:	d103      	bne.n	28cc <_lseek_r+0x20>
    28c4:	6823      	ldr	r3, [r4, #0]
    28c6:	2b00      	cmp	r3, #0
    28c8:	d000      	beq.n	28cc <_lseek_r+0x20>
    28ca:	602b      	str	r3, [r5, #0]
    28cc:	bd38      	pop	{r3, r4, r5, pc}
    28ce:	46c0      	nop			; (mov r8, r8)
    28d0:	20000210 	.word	0x20000210

000028d4 <_read_r>:
    28d4:	b538      	push	{r3, r4, r5, lr}
    28d6:	4c08      	ldr	r4, [pc, #32]	; (28f8 <_read_r+0x24>)
    28d8:	1c05      	adds	r5, r0, #0
    28da:	2000      	movs	r0, #0
    28dc:	6020      	str	r0, [r4, #0]
    28de:	1c08      	adds	r0, r1, #0
    28e0:	1c11      	adds	r1, r2, #0
    28e2:	1c1a      	adds	r2, r3, #0
    28e4:	f7fd fe16 	bl	514 <_read>
    28e8:	1c43      	adds	r3, r0, #1
    28ea:	d103      	bne.n	28f4 <_read_r+0x20>
    28ec:	6823      	ldr	r3, [r4, #0]
    28ee:	2b00      	cmp	r3, #0
    28f0:	d000      	beq.n	28f4 <_read_r+0x20>
    28f2:	602b      	str	r3, [r5, #0]
    28f4:	bd38      	pop	{r3, r4, r5, pc}
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	20000210 	.word	0x20000210
    28fc:	42000800 	.word	0x42000800
    2900:	42000c00 	.word	0x42000c00
    2904:	42001000 	.word	0x42001000
    2908:	42001400 	.word	0x42001400
    290c:	42001800 	.word	0x42001800
    2910:	42001c00 	.word	0x42001c00
    2914:	0a090807 	.word	0x0a090807
    2918:	00000c0b 	.word	0x00000c0b
    291c:	00000c38 	.word	0x00000c38
    2920:	00000c82 	.word	0x00000c82
    2924:	00000c82 	.word	0x00000c82
    2928:	00000c32 	.word	0x00000c32
    292c:	00000c32 	.word	0x00000c32
    2930:	00000c4e 	.word	0x00000c4e
    2934:	00000c3e 	.word	0x00000c3e
    2938:	00000c54 	.word	0x00000c54
    293c:	00000d0c 	.word	0x00000d0c
    2940:	00000d5c 	.word	0x00000d5c
    2944:	00000d5c 	.word	0x00000d5c
    2948:	00000cec 	.word	0x00000cec
    294c:	00000cfe 	.word	0x00000cfe
    2950:	00000d1a 	.word	0x00000d1a
    2954:	00000cf0 	.word	0x00000cf0
    2958:	00000d28 	.word	0x00000d28
    295c:	77200a0d 	.word	0x77200a0d
    2960:	6f636c65 	.word	0x6f636c65
    2964:	7420656d 	.word	0x7420656d
    2968:	4143206f 	.word	0x4143206f
    296c:	21514952 	.word	0x21514952
    2970:	21212121 	.word	0x21212121
    2974:	21212121 	.word	0x21212121
    2978:	21212121 	.word	0x21212121
    297c:	0000000d 	.word	0x0000000d
    2980:	6f64200a 	.word	0x6f64200a
    2984:	7720656e 	.word	0x7720656e
    2988:	20687469 	.word	0x20687469
    298c:	206c6c61 	.word	0x206c6c61
    2990:	74696e69 	.word	0x74696e69
    2994:	696c6169 	.word	0x696c6169
    2998:	6974617a 	.word	0x6974617a
    299c:	21736e6f 	.word	0x21736e6f
    29a0:	0a202121 	.word	0x0a202121
    29a4:	00000020 	.word	0x00000020
    29a8:	6573200a 	.word	0x6573200a
    29ac:	6e69646e 	.word	0x6e69646e
    29b0:	49502067 	.word	0x49502067
    29b4:	54412044 	.word	0x54412044
    29b8:	00003a5a 	.word	0x00003a5a
    29bc:	005a5441 	.word	0x005a5441
    29c0:	6573200a 	.word	0x6573200a
    29c4:	6e69646e 	.word	0x6e69646e
    29c8:	49502067 	.word	0x49502067
    29cc:	54412044 	.word	0x54412044
    29d0:	003a5652 	.word	0x003a5652
    29d4:	56525441 	.word	0x56525441
    29d8:	00000000 	.word	0x00000000
    29dc:	6573200a 	.word	0x6573200a
    29e0:	6e69646e 	.word	0x6e69646e
    29e4:	49502067 	.word	0x49502067
    29e8:	31302044 	.word	0x31302044
    29ec:	003a4330 	.word	0x003a4330
    29f0:	43303130 	.word	0x43303130
    29f4:	00000000 	.word	0x00000000
    29f8:	6573200a 	.word	0x6573200a
    29fc:	6e69646e 	.word	0x6e69646e
    2a00:	49502067 	.word	0x49502067
    2a04:	54412044 	.word	0x54412044
    2a08:	003a5044 	.word	0x003a5044
    2a0c:	50445441 	.word	0x50445441
    2a10:	00000000 	.word	0x00000000
    2a14:	6153200a 	.word	0x6153200a
    2a18:	7265656d 	.word	0x7265656d
    2a1c:	00212121 	.word	0x00212121
    2a20:	6e49200a 	.word	0x6e49200a
    2a24:	61697469 	.word	0x61697469
    2a28:	697a696c 	.word	0x697a696c
    2a2c:	4320676e 	.word	0x4320676e
    2a30:	535f5241 	.word	0x535f5241
    2a34:	2e4e4143 	.word	0x2e4e4143
    2a38:	00092e2e 	.word	0x00092e2e
    2a3c:	002e2e2e 	.word	0x002e2e2e
    2a40:	2e2e2e2e 	.word	0x2e2e2e2e
    2a44:	00000020 	.word	0x00000020
    2a48:	6544200a 	.word	0x6544200a
    2a4c:	6c756166 	.word	0x6c756166
    2a50:	65682074 	.word	0x65682074
    2a54:	72656461 	.word	0x72656461
    2a58:	00000000 	.word	0x00000000
    2a5c:	6573200a 	.word	0x6573200a
    2a60:	6e69646e 	.word	0x6e69646e
    2a64:	49502067 	.word	0x49502067
    2a68:	73252044 	.word	0x73252044
    2a6c:	0000203a 	.word	0x0000203a
    2a70:	6568200a 	.word	0x6568200a
    2a74:	72656461 	.word	0x72656461
    2a78:	65732073 	.word	0x65732073
    2a7c:	73692074 	.word	0x73692074
    2a80:	20732520 	.word	0x20732520
    2a84:	0000000a 	.word	0x0000000a
    2a88:	6573200a 	.word	0x6573200a
    2a8c:	6e69646e 	.word	0x6e69646e
    2a90:	49502067 	.word	0x49502067
    2a94:	73252044 	.word	0x73252044
    2a98:	00003a20 	.word	0x00003a20

00002a9c <Headers>:
    2a9c:	48535441 00304537 48535441 00314537     ATSH7E0.ATSH7E1.
    2aac:	48535441 00324537 48535441 00334537     ATSH7E2.ATSH7E3.
    2abc:	48535441 00344537 48535441 00354537     ATSH7E4.ATSH7E5.
    2acc:	48535441 00364537 48535441 00374537     ATSH7E6.ATSH7E7.

00002adc <PIDS>:
    2adc:	30303130 30313000 31300031 30003230     0100.0101.0102.0
    2aec:	00333031 34303130 30313000 31300035     103.0104.0105.01
    2afc:	30003630 00373031 38303130 30313000     06.0107.0108.010
    2b0c:	31300039 30006130 00623031 63303130     9.010a.010b.010c
    2b1c:	30313000 31300064 00006530 00000043     .010d.010e..C...

00002b2c <_global_impure_ptr>:
    2b2c:	2000000c 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    2b3c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    2b4c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    2b5c:	64636261 00006665                       abcdef..

00002b64 <__sf_fake_stdin>:
	...

00002b84 <__sf_fake_stdout>:
	...

00002ba4 <__sf_fake_stderr>:
	...

00002bc4 <_init>:
    2bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bca:	bc08      	pop	{r3}
    2bcc:	469e      	mov	lr, r3
    2bce:	4770      	bx	lr

00002bd0 <__init_array_start>:
    2bd0:	000000cd 	.word	0x000000cd

00002bd4 <_fini>:
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bda:	bc08      	pop	{r3}
    2bdc:	469e      	mov	lr, r3
    2bde:	4770      	bx	lr

00002be0 <__fini_array_start>:
    2be0:	000000a5 	.word	0x000000a5
