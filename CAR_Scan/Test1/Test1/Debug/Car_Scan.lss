
Car_Scan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011d4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000570  20070000  000811d4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000120  20070570  00081744  00010570  2**2
                  ALLOC
  3 .stack        00002000  20070690  00081864  00010570  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010570  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010599  2**0
                  CONTENTS, READONLY
  6 .debug_info   00008ad5  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001982  00000000  00000000  000190c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000008e0  00000000  00000000  0001aa4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000830  00000000  00000000  0001b32b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000146ed  00000000  00000000  0001bb5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a7a1  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0005b62e  00000000  00000000  0003a9e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000013b0  00000000  00000000  00096018  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003ecb  00000000  00000000  000973c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072690 	.word	0x20072690
   80004:	00080671 	.word	0x00080671
   80008:	0008066d 	.word	0x0008066d
   8000c:	0008066d 	.word	0x0008066d
   80010:	0008066d 	.word	0x0008066d
   80014:	0008066d 	.word	0x0008066d
   80018:	0008066d 	.word	0x0008066d
	...
   8002c:	00080881 	.word	0x00080881
   80030:	0008066d 	.word	0x0008066d
   80034:	00000000 	.word	0x00000000
   80038:	000808b9 	.word	0x000808b9
   8003c:	000808f5 	.word	0x000808f5
   80040:	0008066d 	.word	0x0008066d
   80044:	0008066d 	.word	0x0008066d
   80048:	0008066d 	.word	0x0008066d
   8004c:	0008066d 	.word	0x0008066d
   80050:	0008066d 	.word	0x0008066d
   80054:	0008066d 	.word	0x0008066d
   80058:	0008066d 	.word	0x0008066d
   8005c:	0008066d 	.word	0x0008066d
   80060:	0008066d 	.word	0x0008066d
	...
   8006c:	0008037d 	.word	0x0008037d
   80070:	00080391 	.word	0x00080391
	...
   80084:	00080d61 	.word	0x00080d61
   80088:	0008066d 	.word	0x0008066d
   8008c:	0008066d 	.word	0x0008066d
   80090:	00000000 	.word	0x00000000
   80094:	0008066d 	.word	0x0008066d
   80098:	0008066d 	.word	0x0008066d
   8009c:	0008066d 	.word	0x0008066d
   800a0:	0008066d 	.word	0x0008066d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008066d 	.word	0x0008066d
   800ac:	0008066d 	.word	0x0008066d
   800b0:	0008066d 	.word	0x0008066d
   800b4:	0008066d 	.word	0x0008066d
   800b8:	0008066d 	.word	0x0008066d
   800bc:	0008066d 	.word	0x0008066d
   800c0:	0008066d 	.word	0x0008066d
	...
   800d0:	0008066d 	.word	0x0008066d
   800d4:	0008066d 	.word	0x0008066d
   800d8:	0008066d 	.word	0x0008066d
   800dc:	0008066d 	.word	0x0008066d
   800e0:	0008066d 	.word	0x0008066d
   800e4:	0008066d 	.word	0x0008066d
   800e8:	0008066d 	.word	0x0008066d
   800ec:	0008066d 	.word	0x0008066d
   800f0:	0008066d 	.word	0x0008066d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070570 	.word	0x20070570
   80110:	00000000 	.word	0x00000000
   80114:	000811d4 	.word	0x000811d4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000811d4 	.word	0x000811d4
   8013c:	20070574 	.word	0x20070574
   80140:	000811d4 	.word	0x000811d4
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
		break;

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b0e      	ldr	r3, [pc, #56]	; (8018c <sysclk_init+0x44>)
   80154:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80156:	4c0e      	ldr	r4, [pc, #56]	; (80190 <sysclk_init+0x48>)
   80158:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015a:	2800      	cmp	r0, #0
   8015c:	d0fc      	beq.n	80158 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8015e:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x4c>)
   80160:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80162:	4a0d      	ldr	r2, [pc, #52]	; (80198 <sysclk_init+0x50>)
   80164:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80166:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80168:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016a:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016c:	2800      	cmp	r0, #0
   8016e:	d0fc      	beq.n	8016a <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80170:	2000      	movs	r0, #0
   80172:	4b0c      	ldr	r3, [pc, #48]	; (801a4 <sysclk_init+0x5c>)
   80174:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80176:	4b0c      	ldr	r3, [pc, #48]	; (801a8 <sysclk_init+0x60>)
   80178:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017a:	4802      	ldr	r0, [pc, #8]	; (80184 <sysclk_init+0x3c>)
   8017c:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   8017e:	4798      	blx	r3
   80180:	bd10      	pop	{r4, pc}
   80182:	bf00      	nop
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700b1 	.word	0x200700b1
   8018c:	00080409 	.word	0x00080409
   80190:	00080455 	.word	0x00080455
   80194:	00080465 	.word	0x00080465
   80198:	20063f01 	.word	0x20063f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	00080475 	.word	0x00080475
   801a4:	000803a5 	.word	0x000803a5
   801a8:	00080721 	.word	0x00080721

000801ac <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   801ac:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   801ae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   801b2:	d016      	beq.n	801e2 <pio_set_peripheral+0x36>
   801b4:	d804      	bhi.n	801c0 <pio_set_peripheral+0x14>
   801b6:	b1c1      	cbz	r1, 801ea <pio_set_peripheral+0x3e>
   801b8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   801bc:	d00a      	beq.n	801d4 <pio_set_peripheral+0x28>
   801be:	e013      	b.n	801e8 <pio_set_peripheral+0x3c>
   801c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   801c4:	d011      	beq.n	801ea <pio_set_peripheral+0x3e>
   801c6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   801ca:	d00e      	beq.n	801ea <pio_set_peripheral+0x3e>
   801cc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   801d0:	d10a      	bne.n	801e8 <pio_set_peripheral+0x3c>
   801d2:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   801d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   801d6:	6f01      	ldr	r1, [r0, #112]	; 0x70
   801d8:	400b      	ands	r3, r1
   801da:	ea23 0302 	bic.w	r3, r3, r2
   801de:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   801e0:	e002      	b.n	801e8 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   801e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   801e4:	4313      	orrs	r3, r2
   801e6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   801e8:	6042      	str	r2, [r0, #4]
   801ea:	4770      	bx	lr

000801ec <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   801ec:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   801ee:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   801f2:	bf14      	ite	ne
   801f4:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   801f6:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   801f8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   801fc:	bf14      	ite	ne
   801fe:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80200:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80202:	f012 0f02 	tst.w	r2, #2
   80206:	d002      	beq.n	8020e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80208:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8020c:	e004      	b.n	80218 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8020e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80212:	bf18      	it	ne
   80214:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80218:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8021a:	6001      	str	r1, [r0, #0]
   8021c:	4770      	bx	lr
   8021e:	bf00      	nop

00080220 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80220:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80222:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80224:	9c01      	ldr	r4, [sp, #4]
   80226:	b10c      	cbz	r4, 8022c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80228:	6641      	str	r1, [r0, #100]	; 0x64
   8022a:	e000      	b.n	8022e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8022c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8022e:	b10b      	cbz	r3, 80234 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80230:	6501      	str	r1, [r0, #80]	; 0x50
   80232:	e000      	b.n	80236 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80234:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80236:	b10a      	cbz	r2, 8023c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80238:	6301      	str	r1, [r0, #48]	; 0x30
   8023a:	e000      	b.n	8023e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8023c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8023e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80240:	6001      	str	r1, [r0, #0]
}
   80242:	f85d 4b04 	ldr.w	r4, [sp], #4
   80246:	4770      	bx	lr

00080248 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80248:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8024a:	4770      	bx	lr

0008024c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8024c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8024e:	4770      	bx	lr

00080250 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80250:	b570      	push	{r4, r5, r6, lr}
   80252:	b082      	sub	sp, #8
   80254:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80256:	0944      	lsrs	r4, r0, #5
   80258:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   8025c:	f204 7407 	addw	r4, r4, #1799	; 0x707
   80260:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80262:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80266:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8026a:	d030      	beq.n	802ce <pio_configure_pin+0x7e>
   8026c:	d806      	bhi.n	8027c <pio_configure_pin+0x2c>
   8026e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   80272:	d00a      	beq.n	8028a <pio_configure_pin+0x3a>
   80274:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80278:	d018      	beq.n	802ac <pio_configure_pin+0x5c>
   8027a:	e049      	b.n	80310 <pio_configure_pin+0xc0>
   8027c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80280:	d030      	beq.n	802e4 <pio_configure_pin+0x94>
   80282:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80286:	d02d      	beq.n	802e4 <pio_configure_pin+0x94>
   80288:	e042      	b.n	80310 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8028a:	f000 001f 	and.w	r0, r0, #31
   8028e:	2401      	movs	r4, #1
   80290:	4084      	lsls	r4, r0
   80292:	4630      	mov	r0, r6
   80294:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80298:	4622      	mov	r2, r4
   8029a:	4b1f      	ldr	r3, [pc, #124]	; (80318 <pio_configure_pin+0xc8>)
   8029c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8029e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802a2:	bf14      	ite	ne
   802a4:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802a6:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802a8:	2001      	movs	r0, #1
   802aa:	e032      	b.n	80312 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   802ac:	f000 001f 	and.w	r0, r0, #31
   802b0:	2401      	movs	r4, #1
   802b2:	4084      	lsls	r4, r0
   802b4:	4630      	mov	r0, r6
   802b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802ba:	4622      	mov	r2, r4
   802bc:	4b16      	ldr	r3, [pc, #88]	; (80318 <pio_configure_pin+0xc8>)
   802be:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802c0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   802c4:	bf14      	ite	ne
   802c6:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802c8:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   802ca:	2001      	movs	r0, #1
   802cc:	e021      	b.n	80312 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   802ce:	f000 011f 	and.w	r1, r0, #31
   802d2:	2401      	movs	r4, #1
   802d4:	4630      	mov	r0, r6
   802d6:	fa04 f101 	lsl.w	r1, r4, r1
   802da:	462a      	mov	r2, r5
   802dc:	4b0f      	ldr	r3, [pc, #60]	; (8031c <pio_configure_pin+0xcc>)
   802de:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   802e0:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   802e2:	e016      	b.n	80312 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   802e4:	f000 011f 	and.w	r1, r0, #31
   802e8:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   802ea:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   802ee:	ea05 0304 	and.w	r3, r5, r4
   802f2:	9300      	str	r3, [sp, #0]
   802f4:	4630      	mov	r0, r6
   802f6:	fa04 f101 	lsl.w	r1, r4, r1
   802fa:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   802fe:	bf14      	ite	ne
   80300:	2200      	movne	r2, #0
   80302:	2201      	moveq	r2, #1
   80304:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80308:	4d05      	ldr	r5, [pc, #20]	; (80320 <pio_configure_pin+0xd0>)
   8030a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8030c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8030e:	e000      	b.n	80312 <pio_configure_pin+0xc2>

	default:
		return 0;
   80310:	2000      	movs	r0, #0
	}

	return 1;
}
   80312:	b002      	add	sp, #8
   80314:	bd70      	pop	{r4, r5, r6, pc}
   80316:	bf00      	nop
   80318:	000801ad 	.word	0x000801ad
   8031c:	000801ed 	.word	0x000801ed
   80320:	00080221 	.word	0x00080221

00080324 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80328:	4604      	mov	r4, r0
   8032a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8032c:	4b10      	ldr	r3, [pc, #64]	; (80370 <pio_handler_process+0x4c>)
   8032e:	4798      	blx	r3
   80330:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80332:	4620      	mov	r0, r4
   80334:	4b0f      	ldr	r3, [pc, #60]	; (80374 <pio_handler_process+0x50>)
   80336:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80338:	4005      	ands	r5, r0
   8033a:	d017      	beq.n	8036c <pio_handler_process+0x48>
   8033c:	4f0e      	ldr	r7, [pc, #56]	; (80378 <pio_handler_process+0x54>)
   8033e:	f107 040c 	add.w	r4, r7, #12
   80342:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80344:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80348:	42b3      	cmp	r3, r6
   8034a:	d10a      	bne.n	80362 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8034c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80350:	4229      	tst	r1, r5
   80352:	d006      	beq.n	80362 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80354:	6823      	ldr	r3, [r4, #0]
   80356:	4630      	mov	r0, r6
   80358:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8035a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8035e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80362:	42bc      	cmp	r4, r7
   80364:	d002      	beq.n	8036c <pio_handler_process+0x48>
   80366:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80368:	2d00      	cmp	r5, #0
   8036a:	d1eb      	bne.n	80344 <pio_handler_process+0x20>
   8036c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80370:	00080249 	.word	0x00080249
   80374:	0008024d 	.word	0x0008024d
   80378:	2007058c 	.word	0x2007058c

0008037c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8037c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8037e:	4802      	ldr	r0, [pc, #8]	; (80388 <PIOA_Handler+0xc>)
   80380:	210b      	movs	r1, #11
   80382:	4b02      	ldr	r3, [pc, #8]	; (8038c <PIOA_Handler+0x10>)
   80384:	4798      	blx	r3
   80386:	bd08      	pop	{r3, pc}
   80388:	400e0e00 	.word	0x400e0e00
   8038c:	00080325 	.word	0x00080325

00080390 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80390:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80392:	4802      	ldr	r0, [pc, #8]	; (8039c <PIOB_Handler+0xc>)
   80394:	210c      	movs	r1, #12
   80396:	4b02      	ldr	r3, [pc, #8]	; (803a0 <PIOB_Handler+0x10>)
   80398:	4798      	blx	r3
   8039a:	bd08      	pop	{r3, pc}
   8039c:	400e1000 	.word	0x400e1000
   803a0:	00080325 	.word	0x00080325

000803a4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   803a4:	4b17      	ldr	r3, [pc, #92]	; (80404 <pmc_switch_mck_to_pllack+0x60>)
   803a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   803a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   803ac:	4310      	orrs	r0, r2
   803ae:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   803b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   803b2:	f013 0f08 	tst.w	r3, #8
   803b6:	d109      	bne.n	803cc <pmc_switch_mck_to_pllack+0x28>
   803b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803bc:	4911      	ldr	r1, [pc, #68]	; (80404 <pmc_switch_mck_to_pllack+0x60>)
   803be:	e001      	b.n	803c4 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   803c0:	3b01      	subs	r3, #1
   803c2:	d019      	beq.n	803f8 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   803c4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   803c6:	f012 0f08 	tst.w	r2, #8
   803ca:	d0f9      	beq.n	803c0 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   803cc:	4b0d      	ldr	r3, [pc, #52]	; (80404 <pmc_switch_mck_to_pllack+0x60>)
   803ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   803d0:	f022 0203 	bic.w	r2, r2, #3
   803d4:	f042 0202 	orr.w	r2, r2, #2
   803d8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   803da:	6e98      	ldr	r0, [r3, #104]	; 0x68
   803dc:	f010 0008 	ands.w	r0, r0, #8
   803e0:	d10c      	bne.n	803fc <pmc_switch_mck_to_pllack+0x58>
   803e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   803e6:	4907      	ldr	r1, [pc, #28]	; (80404 <pmc_switch_mck_to_pllack+0x60>)
   803e8:	e001      	b.n	803ee <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   803ea:	3b01      	subs	r3, #1
   803ec:	d008      	beq.n	80400 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   803ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   803f0:	f012 0f08 	tst.w	r2, #8
   803f4:	d0f9      	beq.n	803ea <pmc_switch_mck_to_pllack+0x46>
   803f6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   803f8:	2001      	movs	r0, #1
   803fa:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   803fc:	2000      	movs	r0, #0
   803fe:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80400:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80402:	4770      	bx	lr
   80404:	400e0600 	.word	0x400e0600

00080408 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   80408:	4911      	ldr	r1, [pc, #68]	; (80450 <pmc_switch_mainck_to_fastrc+0x48>)
   8040a:	6a0a      	ldr	r2, [r1, #32]
   8040c:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
   80410:	f042 0208 	orr.w	r2, r2, #8
   80414:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80416:	460a      	mov	r2, r1
   80418:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8041a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   8041e:	d0fb      	beq.n	80418 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80420:	4a0b      	ldr	r2, [pc, #44]	; (80450 <pmc_switch_mainck_to_fastrc+0x48>)
   80422:	6a13      	ldr	r3, [r2, #32]
   80424:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   8042c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80430:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80432:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80434:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80436:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   8043a:	d0fb      	beq.n	80434 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   8043c:	4a04      	ldr	r2, [pc, #16]	; (80450 <pmc_switch_mainck_to_fastrc+0x48>)
   8043e:	6a13      	ldr	r3, [r2, #32]
   80440:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80448:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8044c:	6213      	str	r3, [r2, #32]
   8044e:	4770      	bx	lr
   80450:	400e0600 	.word	0x400e0600

00080454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80454:	4b02      	ldr	r3, [pc, #8]	; (80460 <pmc_osc_is_ready_mainck+0xc>)
   80456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8045c:	4770      	bx	lr
   8045e:	bf00      	nop
   80460:	400e0600 	.word	0x400e0600

00080464 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80468:	4b01      	ldr	r3, [pc, #4]	; (80470 <pmc_disable_pllack+0xc>)
   8046a:	629a      	str	r2, [r3, #40]	; 0x28
   8046c:	4770      	bx	lr
   8046e:	bf00      	nop
   80470:	400e0600 	.word	0x400e0600

00080474 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80474:	4b02      	ldr	r3, [pc, #8]	; (80480 <pmc_is_locked_pllack+0xc>)
   80476:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80478:	f000 0002 	and.w	r0, r0, #2
   8047c:	4770      	bx	lr
   8047e:	bf00      	nop
   80480:	400e0600 	.word	0x400e0600

00080484 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80484:	282c      	cmp	r0, #44	; 0x2c
   80486:	d820      	bhi.n	804ca <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80488:	281f      	cmp	r0, #31
   8048a:	d80d      	bhi.n	804a8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8048c:	4b12      	ldr	r3, [pc, #72]	; (804d8 <pmc_enable_periph_clk+0x54>)
   8048e:	699a      	ldr	r2, [r3, #24]
   80490:	2301      	movs	r3, #1
   80492:	4083      	lsls	r3, r0
   80494:	401a      	ands	r2, r3
   80496:	4293      	cmp	r3, r2
   80498:	d019      	beq.n	804ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8049a:	2301      	movs	r3, #1
   8049c:	fa03 f000 	lsl.w	r0, r3, r0
   804a0:	4b0d      	ldr	r3, [pc, #52]	; (804d8 <pmc_enable_periph_clk+0x54>)
   804a2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   804a4:	2000      	movs	r0, #0
   804a6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   804a8:	4b0b      	ldr	r3, [pc, #44]	; (804d8 <pmc_enable_periph_clk+0x54>)
   804aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   804ae:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   804b0:	2301      	movs	r3, #1
   804b2:	4083      	lsls	r3, r0
   804b4:	401a      	ands	r2, r3
   804b6:	4293      	cmp	r3, r2
   804b8:	d00b      	beq.n	804d2 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   804ba:	2301      	movs	r3, #1
   804bc:	fa03 f000 	lsl.w	r0, r3, r0
   804c0:	4b05      	ldr	r3, [pc, #20]	; (804d8 <pmc_enable_periph_clk+0x54>)
   804c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   804c6:	2000      	movs	r0, #0
   804c8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   804ca:	2001      	movs	r0, #1
   804cc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   804ce:	2000      	movs	r0, #0
   804d0:	4770      	bx	lr
   804d2:	2000      	movs	r0, #0
}
   804d4:	4770      	bx	lr
   804d6:	bf00      	nop
   804d8:	400e0600 	.word	0x400e0600

000804dc <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
   804dc:	b510      	push	{r4, lr}
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
	WDT->WDT_MR = WDT_MR_WDDIS;
   804de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804e2:	4b0a      	ldr	r3, [pc, #40]	; (8050c <board_init+0x30>)
   804e4:	605a      	str	r2, [r3, #4]
	
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   804e6:	200a      	movs	r0, #10
   804e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804ec:	4c08      	ldr	r4, [pc, #32]	; (80510 <board_init+0x34>)
   804ee:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   804f0:	200b      	movs	r0, #11
   804f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804f6:	47a0      	blx	r4
	
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   804f8:	200c      	movs	r0, #12
   804fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804fe:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   80500:	200d      	movs	r0, #13
   80502:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80506:	47a0      	blx	r4
   80508:	bd10      	pop	{r4, pc}
   8050a:	bf00      	nop
   8050c:	400e1a50 	.word	0x400e1a50
   80510:	00080251 	.word	0x00080251

00080514 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   80514:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   80516:	010b      	lsls	r3, r1, #4
   80518:	4293      	cmp	r3, r2
   8051a:	d90d      	bls.n	80538 <usart_set_async_baudrate+0x24>
   8051c:	e01a      	b.n	80554 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8051e:	6841      	ldr	r1, [r0, #4]
   80520:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   80524:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   80526:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8052a:	6203      	str	r3, [r0, #32]

	return 0;
   8052c:	2000      	movs	r0, #0
   8052e:	e020      	b.n	80572 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   80530:	2001      	movs	r0, #1
   80532:	e01e      	b.n	80572 <usart_set_async_baudrate+0x5e>
   80534:	2001      	movs	r0, #1
   80536:	e01c      	b.n	80572 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80538:	00d2      	lsls	r2, r2, #3
   8053a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   8053e:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   80542:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80544:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80548:	1e54      	subs	r4, r2, #1
   8054a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8054e:	428c      	cmp	r4, r1
   80550:	d9e9      	bls.n	80526 <usart_set_async_baudrate+0x12>
   80552:	e7ed      	b.n	80530 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80554:	00c9      	lsls	r1, r1, #3
   80556:	00d3      	lsls	r3, r2, #3
   80558:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   8055c:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   80560:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   80562:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80566:	1e54      	subs	r4, r2, #1
   80568:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8056c:	428c      	cmp	r4, r1
   8056e:	d9d6      	bls.n	8051e <usart_set_async_baudrate+0xa>
   80570:	e7e0      	b.n	80534 <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   80572:	f85d 4b04 	ldr.w	r4, [sp], #4
   80576:	4770      	bx	lr

00080578 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80578:	4b08      	ldr	r3, [pc, #32]	; (8059c <usart_reset+0x24>)
   8057a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8057e:	2300      	movs	r3, #0
   80580:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80582:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80584:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80586:	2388      	movs	r3, #136	; 0x88
   80588:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8058a:	2324      	movs	r3, #36	; 0x24
   8058c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   8058e:	f44f 7380 	mov.w	r3, #256	; 0x100
   80592:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   80594:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80598:	6003      	str	r3, [r0, #0]
   8059a:	4770      	bx	lr
   8059c:	55534100 	.word	0x55534100

000805a0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   805a0:	b570      	push	{r4, r5, r6, lr}
   805a2:	4605      	mov	r5, r0
   805a4:	460c      	mov	r4, r1
   805a6:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   805a8:	4b0f      	ldr	r3, [pc, #60]	; (805e8 <usart_init_rs232+0x48>)
   805aa:	4798      	blx	r3

	ul_reg_val = 0;
   805ac:	2100      	movs	r1, #0
   805ae:	4b0f      	ldr	r3, [pc, #60]	; (805ec <usart_init_rs232+0x4c>)
   805b0:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   805b2:	b19c      	cbz	r4, 805dc <usart_init_rs232+0x3c>
   805b4:	4628      	mov	r0, r5
   805b6:	6821      	ldr	r1, [r4, #0]
   805b8:	4632      	mov	r2, r6
   805ba:	4b0d      	ldr	r3, [pc, #52]	; (805f0 <usart_init_rs232+0x50>)
   805bc:	4798      	blx	r3
   805be:	4603      	mov	r3, r0
   805c0:	b970      	cbnz	r0, 805e0 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   805c2:	68a1      	ldr	r1, [r4, #8]
   805c4:	6862      	ldr	r2, [r4, #4]
   805c6:	430a      	orrs	r2, r1
   805c8:	6921      	ldr	r1, [r4, #16]
   805ca:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   805cc:	68e0      	ldr	r0, [r4, #12]
   805ce:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   805d0:	4906      	ldr	r1, [pc, #24]	; (805ec <usart_init_rs232+0x4c>)
   805d2:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   805d4:	6869      	ldr	r1, [r5, #4]
   805d6:	430a      	orrs	r2, r1
   805d8:	606a      	str	r2, [r5, #4]

	return 0;
   805da:	e002      	b.n	805e2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   805dc:	2301      	movs	r3, #1
   805de:	e000      	b.n	805e2 <usart_init_rs232+0x42>
   805e0:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   805e2:	4618      	mov	r0, r3
   805e4:	bd70      	pop	{r4, r5, r6, pc}
   805e6:	bf00      	nop
   805e8:	00080579 	.word	0x00080579
   805ec:	200705fc 	.word	0x200705fc
   805f0:	00080515 	.word	0x00080515

000805f4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   805f4:	2340      	movs	r3, #64	; 0x40
   805f6:	6003      	str	r3, [r0, #0]
   805f8:	4770      	bx	lr
   805fa:	bf00      	nop

000805fc <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   805fc:	2310      	movs	r3, #16
   805fe:	6003      	str	r3, [r0, #0]
   80600:	4770      	bx	lr
   80602:	bf00      	nop

00080604 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
   80604:	6081      	str	r1, [r0, #8]
   80606:	4770      	bx	lr

00080608 <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
   80608:	6940      	ldr	r0, [r0, #20]
}
   8060a:	4770      	bx	lr

0008060c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8060c:	6943      	ldr	r3, [r0, #20]
   8060e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80612:	bf1d      	ittte	ne
   80614:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80618:	61c1      	strne	r1, [r0, #28]
	return 0;
   8061a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8061c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8061e:	4770      	bx	lr

00080620 <usart_putchar>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80620:	6943      	ldr	r3, [r0, #20]
   80622:	f013 0f02 	tst.w	r3, #2
   80626:	d0fb      	beq.n	80620 <usart_putchar>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80628:	f3c1 0108 	ubfx	r1, r1, #0, #9
   8062c:	61c1      	str	r1, [r0, #28]

	return 0;
}
   8062e:	2000      	movs	r0, #0
   80630:	4770      	bx	lr
   80632:	bf00      	nop

00080634 <usart_write_line>:
 *
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
   80634:	b570      	push	{r4, r5, r6, lr}
   80636:	4605      	mov	r5, r0
   80638:	460c      	mov	r4, r1
	while (*string != '\0') {
   8063a:	7809      	ldrb	r1, [r1, #0]
   8063c:	b131      	cbz	r1, 8064c <usart_write_line+0x18>
		usart_putchar(p_usart, *string++);
   8063e:	4e04      	ldr	r6, [pc, #16]	; (80650 <usart_write_line+0x1c>)
   80640:	4628      	mov	r0, r5
   80642:	47b0      	blx	r6
 * \param p_usart Pointer to a USART instance.
 * \param string Pointer to one-line string to be sent.
 */
void usart_write_line(Usart *p_usart, const char *string)
{
	while (*string != '\0') {
   80644:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   80648:	2900      	cmp	r1, #0
   8064a:	d1f9      	bne.n	80640 <usart_write_line+0xc>
   8064c:	bd70      	pop	{r4, r5, r6, pc}
   8064e:	bf00      	nop
   80650:	00080621 	.word	0x00080621

00080654 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80654:	6943      	ldr	r3, [r0, #20]
   80656:	f013 0f01 	tst.w	r3, #1
   8065a:	d005      	beq.n	80668 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8065c:	6983      	ldr	r3, [r0, #24]
   8065e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80662:	600b      	str	r3, [r1, #0]

	return 0;
   80664:	2000      	movs	r0, #0
   80666:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80668:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   8066a:	4770      	bx	lr

0008066c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8066c:	e7fe      	b.n	8066c <Dummy_Handler>
   8066e:	bf00      	nop

00080670 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80670:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80672:	4b1e      	ldr	r3, [pc, #120]	; (806ec <Reset_Handler+0x7c>)
   80674:	4a1e      	ldr	r2, [pc, #120]	; (806f0 <Reset_Handler+0x80>)
   80676:	429a      	cmp	r2, r3
   80678:	d003      	beq.n	80682 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8067a:	4b1e      	ldr	r3, [pc, #120]	; (806f4 <Reset_Handler+0x84>)
   8067c:	4a1b      	ldr	r2, [pc, #108]	; (806ec <Reset_Handler+0x7c>)
   8067e:	429a      	cmp	r2, r3
   80680:	d304      	bcc.n	8068c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80682:	4b1d      	ldr	r3, [pc, #116]	; (806f8 <Reset_Handler+0x88>)
   80684:	4a1d      	ldr	r2, [pc, #116]	; (806fc <Reset_Handler+0x8c>)
   80686:	429a      	cmp	r2, r3
   80688:	d30f      	bcc.n	806aa <Reset_Handler+0x3a>
   8068a:	e01a      	b.n	806c2 <Reset_Handler+0x52>
   8068c:	4b1c      	ldr	r3, [pc, #112]	; (80700 <Reset_Handler+0x90>)
   8068e:	4c1d      	ldr	r4, [pc, #116]	; (80704 <Reset_Handler+0x94>)
   80690:	1ae4      	subs	r4, r4, r3
   80692:	f024 0403 	bic.w	r4, r4, #3
   80696:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80698:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8069a:	4814      	ldr	r0, [pc, #80]	; (806ec <Reset_Handler+0x7c>)
   8069c:	4914      	ldr	r1, [pc, #80]	; (806f0 <Reset_Handler+0x80>)
   8069e:	585a      	ldr	r2, [r3, r1]
   806a0:	501a      	str	r2, [r3, r0]
   806a2:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   806a4:	42a3      	cmp	r3, r4
   806a6:	d1fa      	bne.n	8069e <Reset_Handler+0x2e>
   806a8:	e7eb      	b.n	80682 <Reset_Handler+0x12>
   806aa:	4b17      	ldr	r3, [pc, #92]	; (80708 <Reset_Handler+0x98>)
   806ac:	4917      	ldr	r1, [pc, #92]	; (8070c <Reset_Handler+0x9c>)
   806ae:	1ac9      	subs	r1, r1, r3
   806b0:	f021 0103 	bic.w	r1, r1, #3
   806b4:	1d1a      	adds	r2, r3, #4
   806b6:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   806b8:	2200      	movs	r2, #0
   806ba:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   806be:	428b      	cmp	r3, r1
   806c0:	d1fb      	bne.n	806ba <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   806c2:	4a13      	ldr	r2, [pc, #76]	; (80710 <Reset_Handler+0xa0>)
   806c4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   806c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   806cc:	4911      	ldr	r1, [pc, #68]	; (80714 <Reset_Handler+0xa4>)
   806ce:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   806d0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   806d4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   806d8:	d203      	bcs.n	806e2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   806da:	688a      	ldr	r2, [r1, #8]
   806dc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   806e0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   806e2:	4b0d      	ldr	r3, [pc, #52]	; (80718 <Reset_Handler+0xa8>)
   806e4:	4798      	blx	r3

	/* Branch to main function */
	main();
   806e6:	4b0d      	ldr	r3, [pc, #52]	; (8071c <Reset_Handler+0xac>)
   806e8:	4798      	blx	r3
   806ea:	e7fe      	b.n	806ea <Reset_Handler+0x7a>
   806ec:	20070000 	.word	0x20070000
   806f0:	000811d4 	.word	0x000811d4
   806f4:	20070570 	.word	0x20070570
   806f8:	20070690 	.word	0x20070690
   806fc:	20070570 	.word	0x20070570
   80700:	20070004 	.word	0x20070004
   80704:	20070573 	.word	0x20070573
   80708:	2007056c 	.word	0x2007056c
   8070c:	2007068b 	.word	0x2007068b
   80710:	00080000 	.word	0x00080000
   80714:	e000ed00 	.word	0xe000ed00
   80718:	00080dd5 	.word	0x00080dd5
   8071c:	00080b29 	.word	0x00080b29

00080720 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80720:	4b3e      	ldr	r3, [pc, #248]	; (8081c <SystemCoreClockUpdate+0xfc>)
   80722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80724:	f003 0303 	and.w	r3, r3, #3
   80728:	2b03      	cmp	r3, #3
   8072a:	d85f      	bhi.n	807ec <SystemCoreClockUpdate+0xcc>
   8072c:	e8df f003 	tbb	[pc, r3]
   80730:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80734:	4b3a      	ldr	r3, [pc, #232]	; (80820 <SystemCoreClockUpdate+0x100>)
   80736:	695b      	ldr	r3, [r3, #20]
   80738:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8073c:	bf14      	ite	ne
   8073e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80742:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80746:	4b37      	ldr	r3, [pc, #220]	; (80824 <SystemCoreClockUpdate+0x104>)
   80748:	601a      	str	r2, [r3, #0]
   8074a:	e04f      	b.n	807ec <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8074c:	4b33      	ldr	r3, [pc, #204]	; (8081c <SystemCoreClockUpdate+0xfc>)
   8074e:	6a1b      	ldr	r3, [r3, #32]
   80750:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80754:	d003      	beq.n	8075e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80756:	4a34      	ldr	r2, [pc, #208]	; (80828 <SystemCoreClockUpdate+0x108>)
   80758:	4b32      	ldr	r3, [pc, #200]	; (80824 <SystemCoreClockUpdate+0x104>)
   8075a:	601a      	str	r2, [r3, #0]
   8075c:	e046      	b.n	807ec <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8075e:	4a33      	ldr	r2, [pc, #204]	; (8082c <SystemCoreClockUpdate+0x10c>)
   80760:	4b30      	ldr	r3, [pc, #192]	; (80824 <SystemCoreClockUpdate+0x104>)
   80762:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80764:	4b2d      	ldr	r3, [pc, #180]	; (8081c <SystemCoreClockUpdate+0xfc>)
   80766:	6a1b      	ldr	r3, [r3, #32]
   80768:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8076c:	2b10      	cmp	r3, #16
   8076e:	d002      	beq.n	80776 <SystemCoreClockUpdate+0x56>
   80770:	2b20      	cmp	r3, #32
   80772:	d004      	beq.n	8077e <SystemCoreClockUpdate+0x5e>
   80774:	e03a      	b.n	807ec <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80776:	4a2e      	ldr	r2, [pc, #184]	; (80830 <SystemCoreClockUpdate+0x110>)
   80778:	4b2a      	ldr	r3, [pc, #168]	; (80824 <SystemCoreClockUpdate+0x104>)
   8077a:	601a      	str	r2, [r3, #0]
				break;
   8077c:	e036      	b.n	807ec <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8077e:	4a2a      	ldr	r2, [pc, #168]	; (80828 <SystemCoreClockUpdate+0x108>)
   80780:	4b28      	ldr	r3, [pc, #160]	; (80824 <SystemCoreClockUpdate+0x104>)
   80782:	601a      	str	r2, [r3, #0]
				break;
   80784:	e032      	b.n	807ec <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80786:	4b25      	ldr	r3, [pc, #148]	; (8081c <SystemCoreClockUpdate+0xfc>)
   80788:	6a1b      	ldr	r3, [r3, #32]
   8078a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8078e:	d003      	beq.n	80798 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80790:	4a25      	ldr	r2, [pc, #148]	; (80828 <SystemCoreClockUpdate+0x108>)
   80792:	4b24      	ldr	r3, [pc, #144]	; (80824 <SystemCoreClockUpdate+0x104>)
   80794:	601a      	str	r2, [r3, #0]
   80796:	e012      	b.n	807be <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80798:	4a24      	ldr	r2, [pc, #144]	; (8082c <SystemCoreClockUpdate+0x10c>)
   8079a:	4b22      	ldr	r3, [pc, #136]	; (80824 <SystemCoreClockUpdate+0x104>)
   8079c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8079e:	4b1f      	ldr	r3, [pc, #124]	; (8081c <SystemCoreClockUpdate+0xfc>)
   807a0:	6a1b      	ldr	r3, [r3, #32]
   807a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807a6:	2b10      	cmp	r3, #16
   807a8:	d002      	beq.n	807b0 <SystemCoreClockUpdate+0x90>
   807aa:	2b20      	cmp	r3, #32
   807ac:	d004      	beq.n	807b8 <SystemCoreClockUpdate+0x98>
   807ae:	e006      	b.n	807be <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   807b0:	4a1f      	ldr	r2, [pc, #124]	; (80830 <SystemCoreClockUpdate+0x110>)
   807b2:	4b1c      	ldr	r3, [pc, #112]	; (80824 <SystemCoreClockUpdate+0x104>)
   807b4:	601a      	str	r2, [r3, #0]
				break;
   807b6:	e002      	b.n	807be <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   807b8:	4a1b      	ldr	r2, [pc, #108]	; (80828 <SystemCoreClockUpdate+0x108>)
   807ba:	4b1a      	ldr	r3, [pc, #104]	; (80824 <SystemCoreClockUpdate+0x104>)
   807bc:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   807be:	4b17      	ldr	r3, [pc, #92]	; (8081c <SystemCoreClockUpdate+0xfc>)
   807c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807c2:	f003 0303 	and.w	r3, r3, #3
   807c6:	2b02      	cmp	r3, #2
   807c8:	d10d      	bne.n	807e6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807ca:	4b14      	ldr	r3, [pc, #80]	; (8081c <SystemCoreClockUpdate+0xfc>)
   807cc:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
   807d0:	4b14      	ldr	r3, [pc, #80]	; (80824 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807d2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   807d6:	681a      	ldr	r2, [r3, #0]
   807d8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807dc:	b2c9      	uxtb	r1, r1
   807de:	fbb2 f2f1 	udiv	r2, r2, r1
   807e2:	601a      	str	r2, [r3, #0]
   807e4:	e002      	b.n	807ec <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   807e6:	4a13      	ldr	r2, [pc, #76]	; (80834 <SystemCoreClockUpdate+0x114>)
   807e8:	4b0e      	ldr	r3, [pc, #56]	; (80824 <SystemCoreClockUpdate+0x104>)
   807ea:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   807ec:	4b0b      	ldr	r3, [pc, #44]	; (8081c <SystemCoreClockUpdate+0xfc>)
   807ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807f4:	2b70      	cmp	r3, #112	; 0x70
   807f6:	d107      	bne.n	80808 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   807f8:	4b0a      	ldr	r3, [pc, #40]	; (80824 <SystemCoreClockUpdate+0x104>)
   807fa:	681a      	ldr	r2, [r3, #0]
   807fc:	490e      	ldr	r1, [pc, #56]	; (80838 <SystemCoreClockUpdate+0x118>)
   807fe:	fba1 0202 	umull	r0, r2, r1, r2
   80802:	0852      	lsrs	r2, r2, #1
   80804:	601a      	str	r2, [r3, #0]
   80806:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80808:	4b04      	ldr	r3, [pc, #16]	; (8081c <SystemCoreClockUpdate+0xfc>)
   8080a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   8080c:	4b05      	ldr	r3, [pc, #20]	; (80824 <SystemCoreClockUpdate+0x104>)
   8080e:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80812:	681a      	ldr	r2, [r3, #0]
   80814:	40ca      	lsrs	r2, r1
   80816:	601a      	str	r2, [r3, #0]
   80818:	4770      	bx	lr
   8081a:	bf00      	nop
   8081c:	400e0600 	.word	0x400e0600
   80820:	400e1a10 	.word	0x400e1a10
   80824:	20070138 	.word	0x20070138
   80828:	00b71b00 	.word	0x00b71b00
   8082c:	003d0900 	.word	0x003d0900
   80830:	007a1200 	.word	0x007a1200
   80834:	0e4e1c00 	.word	0x0e4e1c00
   80838:	aaaaaaab 	.word	0xaaaaaaab

0008083c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   8083c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8083e:	685a      	ldr	r2, [r3, #4]
   80840:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80842:	6842      	ldr	r2, [r0, #4]
   80844:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80846:	685a      	ldr	r2, [r3, #4]
   80848:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8084a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   8084c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8084e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80850:	6803      	ldr	r3, [r0, #0]
   80852:	3301      	adds	r3, #1
   80854:	6003      	str	r3, [r0, #0]
   80856:	4770      	bx	lr

00080858 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80858:	6843      	ldr	r3, [r0, #4]
   8085a:	6882      	ldr	r2, [r0, #8]
   8085c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8085e:	6883      	ldr	r3, [r0, #8]
   80860:	6842      	ldr	r2, [r0, #4]
   80862:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80864:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80866:	685a      	ldr	r2, [r3, #4]
   80868:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8086a:	bf04      	itt	eq
   8086c:	6882      	ldreq	r2, [r0, #8]
   8086e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80870:	2200      	movs	r2, #0
   80872:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80874:	681a      	ldr	r2, [r3, #0]
   80876:	3a01      	subs	r2, #1
   80878:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8087a:	6818      	ldr	r0, [r3, #0]
}
   8087c:	4770      	bx	lr
   8087e:	bf00      	nop

00080880 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80880:	4b06      	ldr	r3, [pc, #24]	; (8089c <pxCurrentTCBConst2>)
   80882:	6819      	ldr	r1, [r3, #0]
   80884:	6808      	ldr	r0, [r1, #0]
   80886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8088a:	f380 8809 	msr	PSP, r0
   8088e:	f04f 0000 	mov.w	r0, #0
   80892:	f380 8811 	msr	BASEPRI, r0
   80896:	f04e 0e0d 	orr.w	lr, lr, #13
   8089a:	4770      	bx	lr

0008089c <pxCurrentTCBConst2>:
   8089c:	20070674 	.word	0x20070674

000808a0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   808a0:	f3ef 8011 	mrs	r0, BASEPRI
   808a4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   808a8:	f381 8811 	msr	BASEPRI, r1
   808ac:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   808ae:	2000      	movs	r0, #0

000808b0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   808b0:	f380 8811 	msr	BASEPRI, r0
   808b4:	4770      	bx	lr
   808b6:	bf00      	nop

000808b8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   808b8:	f3ef 8009 	mrs	r0, PSP
   808bc:	4b0c      	ldr	r3, [pc, #48]	; (808f0 <pxCurrentTCBConst>)
   808be:	681a      	ldr	r2, [r3, #0]
   808c0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808c4:	6010      	str	r0, [r2, #0]
   808c6:	e92d 4008 	stmdb	sp!, {r3, lr}
   808ca:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   808ce:	f380 8811 	msr	BASEPRI, r0
   808d2:	f000 f8b5 	bl	80a40 <vTaskSwitchContext>
   808d6:	f04f 0000 	mov.w	r0, #0
   808da:	f380 8811 	msr	BASEPRI, r0
   808de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   808e2:	6819      	ldr	r1, [r3, #0]
   808e4:	6808      	ldr	r0, [r1, #0]
   808e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808ea:	f380 8809 	msr	PSP, r0
   808ee:	4770      	bx	lr

000808f0 <pxCurrentTCBConst>:
   808f0:	20070674 	.word	0x20070674

000808f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   808f4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   808f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808fa:	4b05      	ldr	r3, [pc, #20]	; (80910 <SysTick_Handler+0x1c>)
   808fc:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   808fe:	4b05      	ldr	r3, [pc, #20]	; (80914 <SysTick_Handler+0x20>)
   80900:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80902:	4b05      	ldr	r3, [pc, #20]	; (80918 <SysTick_Handler+0x24>)
   80904:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80906:	2000      	movs	r0, #0
   80908:	4b04      	ldr	r3, [pc, #16]	; (8091c <SysTick_Handler+0x28>)
   8090a:	4798      	blx	r3
   8090c:	bd08      	pop	{r3, pc}
   8090e:	bf00      	nop
   80910:	e000ed04 	.word	0xe000ed04
   80914:	000808a1 	.word	0x000808a1
   80918:	00080921 	.word	0x00080921
   8091c:	000808b1 	.word	0x000808b1

00080920 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   80920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80924:	4b3a      	ldr	r3, [pc, #232]	; (80a10 <vTaskIncrementTick+0xf0>)
   80926:	681b      	ldr	r3, [r3, #0]
   80928:	2b00      	cmp	r3, #0
   8092a:	d16b      	bne.n	80a04 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   8092c:	4b39      	ldr	r3, [pc, #228]	; (80a14 <vTaskIncrementTick+0xf4>)
   8092e:	681a      	ldr	r2, [r3, #0]
   80930:	3201      	adds	r2, #1
   80932:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80934:	681b      	ldr	r3, [r3, #0]
   80936:	bb03      	cbnz	r3, 8097a <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80938:	4b37      	ldr	r3, [pc, #220]	; (80a18 <vTaskIncrementTick+0xf8>)
   8093a:	681b      	ldr	r3, [r3, #0]
   8093c:	681b      	ldr	r3, [r3, #0]
   8093e:	b11b      	cbz	r3, 80948 <vTaskIncrementTick+0x28>
   80940:	4b36      	ldr	r3, [pc, #216]	; (80a1c <vTaskIncrementTick+0xfc>)
   80942:	4798      	blx	r3
   80944:	bf00      	nop
   80946:	e7fd      	b.n	80944 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   80948:	4b33      	ldr	r3, [pc, #204]	; (80a18 <vTaskIncrementTick+0xf8>)
   8094a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8094c:	4a34      	ldr	r2, [pc, #208]	; (80a20 <vTaskIncrementTick+0x100>)
   8094e:	6810      	ldr	r0, [r2, #0]
   80950:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80952:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80954:	4a33      	ldr	r2, [pc, #204]	; (80a24 <vTaskIncrementTick+0x104>)
   80956:	6811      	ldr	r1, [r2, #0]
   80958:	3101      	adds	r1, #1
   8095a:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8095c:	681b      	ldr	r3, [r3, #0]
   8095e:	681b      	ldr	r3, [r3, #0]
   80960:	b923      	cbnz	r3, 8096c <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80962:	f04f 32ff 	mov.w	r2, #4294967295
   80966:	4b30      	ldr	r3, [pc, #192]	; (80a28 <vTaskIncrementTick+0x108>)
   80968:	601a      	str	r2, [r3, #0]
   8096a:	e006      	b.n	8097a <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8096c:	4b2a      	ldr	r3, [pc, #168]	; (80a18 <vTaskIncrementTick+0xf8>)
   8096e:	681b      	ldr	r3, [r3, #0]
   80970:	68db      	ldr	r3, [r3, #12]
   80972:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80974:	685a      	ldr	r2, [r3, #4]
   80976:	4b2c      	ldr	r3, [pc, #176]	; (80a28 <vTaskIncrementTick+0x108>)
   80978:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8097a:	4b26      	ldr	r3, [pc, #152]	; (80a14 <vTaskIncrementTick+0xf4>)
   8097c:	681a      	ldr	r2, [r3, #0]
   8097e:	4b2a      	ldr	r3, [pc, #168]	; (80a28 <vTaskIncrementTick+0x108>)
   80980:	681b      	ldr	r3, [r3, #0]
   80982:	429a      	cmp	r2, r3
   80984:	d342      	bcc.n	80a0c <vTaskIncrementTick+0xec>
   80986:	4b24      	ldr	r3, [pc, #144]	; (80a18 <vTaskIncrementTick+0xf8>)
   80988:	681b      	ldr	r3, [r3, #0]
   8098a:	681b      	ldr	r3, [r3, #0]
   8098c:	b14b      	cbz	r3, 809a2 <vTaskIncrementTick+0x82>
   8098e:	4b22      	ldr	r3, [pc, #136]	; (80a18 <vTaskIncrementTick+0xf8>)
   80990:	681b      	ldr	r3, [r3, #0]
   80992:	68db      	ldr	r3, [r3, #12]
   80994:	68dc      	ldr	r4, [r3, #12]
   80996:	6863      	ldr	r3, [r4, #4]
   80998:	4a1e      	ldr	r2, [pc, #120]	; (80a14 <vTaskIncrementTick+0xf4>)
   8099a:	6812      	ldr	r2, [r2, #0]
   8099c:	4293      	cmp	r3, r2
   8099e:	d913      	bls.n	809c8 <vTaskIncrementTick+0xa8>
   809a0:	e00e      	b.n	809c0 <vTaskIncrementTick+0xa0>
   809a2:	f04f 32ff 	mov.w	r2, #4294967295
   809a6:	4b20      	ldr	r3, [pc, #128]	; (80a28 <vTaskIncrementTick+0x108>)
   809a8:	601a      	str	r2, [r3, #0]
   809aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809ae:	4b1a      	ldr	r3, [pc, #104]	; (80a18 <vTaskIncrementTick+0xf8>)
   809b0:	681b      	ldr	r3, [r3, #0]
   809b2:	68db      	ldr	r3, [r3, #12]
   809b4:	68dc      	ldr	r4, [r3, #12]
   809b6:	6863      	ldr	r3, [r4, #4]
   809b8:	4a16      	ldr	r2, [pc, #88]	; (80a14 <vTaskIncrementTick+0xf4>)
   809ba:	6812      	ldr	r2, [r2, #0]
   809bc:	4293      	cmp	r3, r2
   809be:	d907      	bls.n	809d0 <vTaskIncrementTick+0xb0>
   809c0:	4a19      	ldr	r2, [pc, #100]	; (80a28 <vTaskIncrementTick+0x108>)
   809c2:	6013      	str	r3, [r2, #0]
   809c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809c8:	4e18      	ldr	r6, [pc, #96]	; (80a2c <vTaskIncrementTick+0x10c>)
   809ca:	4f19      	ldr	r7, [pc, #100]	; (80a30 <vTaskIncrementTick+0x110>)
   809cc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a3c <vTaskIncrementTick+0x11c>
   809d0:	1d25      	adds	r5, r4, #4
   809d2:	4628      	mov	r0, r5
   809d4:	47b0      	blx	r6
   809d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   809d8:	b113      	cbz	r3, 809e0 <vTaskIncrementTick+0xc0>
   809da:	f104 0018 	add.w	r0, r4, #24
   809de:	47b0      	blx	r6
   809e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   809e2:	683a      	ldr	r2, [r7, #0]
   809e4:	4293      	cmp	r3, r2
   809e6:	bf88      	it	hi
   809e8:	603b      	strhi	r3, [r7, #0]
   809ea:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   809ee:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   809f2:	4629      	mov	r1, r5
   809f4:	4b0f      	ldr	r3, [pc, #60]	; (80a34 <vTaskIncrementTick+0x114>)
   809f6:	4798      	blx	r3
   809f8:	4b07      	ldr	r3, [pc, #28]	; (80a18 <vTaskIncrementTick+0xf8>)
   809fa:	681b      	ldr	r3, [r3, #0]
   809fc:	681b      	ldr	r3, [r3, #0]
   809fe:	2b00      	cmp	r3, #0
   80a00:	d1d5      	bne.n	809ae <vTaskIncrementTick+0x8e>
   80a02:	e7ce      	b.n	809a2 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   80a04:	4b0c      	ldr	r3, [pc, #48]	; (80a38 <vTaskIncrementTick+0x118>)
   80a06:	681a      	ldr	r2, [r3, #0]
   80a08:	3201      	adds	r2, #1
   80a0a:	601a      	str	r2, [r3, #0]
   80a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80a10:	20070670 	.word	0x20070670
   80a14:	20070678 	.word	0x20070678
   80a18:	20070604 	.word	0x20070604
   80a1c:	000808a1 	.word	0x000808a1
   80a20:	2007067c 	.word	0x2007067c
   80a24:	20070608 	.word	0x20070608
   80a28:	2007013c 	.word	0x2007013c
   80a2c:	00080859 	.word	0x00080859
   80a30:	20070680 	.word	0x20070680
   80a34:	0008083d 	.word	0x0008083d
   80a38:	20070600 	.word	0x20070600
   80a3c:	2007060c 	.word	0x2007060c

00080a40 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   80a40:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80a42:	4b1d      	ldr	r3, [pc, #116]	; (80ab8 <vTaskSwitchContext+0x78>)
   80a44:	681b      	ldr	r3, [r3, #0]
   80a46:	b95b      	cbnz	r3, 80a60 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80a48:	4b1c      	ldr	r3, [pc, #112]	; (80abc <vTaskSwitchContext+0x7c>)
   80a4a:	681b      	ldr	r3, [r3, #0]
   80a4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80a50:	009b      	lsls	r3, r3, #2
   80a52:	4a1b      	ldr	r2, [pc, #108]	; (80ac0 <vTaskSwitchContext+0x80>)
   80a54:	58d3      	ldr	r3, [r2, r3]
   80a56:	b9cb      	cbnz	r3, 80a8c <vTaskSwitchContext+0x4c>
   80a58:	4b18      	ldr	r3, [pc, #96]	; (80abc <vTaskSwitchContext+0x7c>)
   80a5a:	681b      	ldr	r3, [r3, #0]
   80a5c:	b953      	cbnz	r3, 80a74 <vTaskSwitchContext+0x34>
   80a5e:	e005      	b.n	80a6c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   80a60:	2201      	movs	r2, #1
   80a62:	4b18      	ldr	r3, [pc, #96]	; (80ac4 <vTaskSwitchContext+0x84>)
   80a64:	601a      	str	r2, [r3, #0]
   80a66:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80a68:	681a      	ldr	r2, [r3, #0]
   80a6a:	b92a      	cbnz	r2, 80a78 <vTaskSwitchContext+0x38>
   80a6c:	4b16      	ldr	r3, [pc, #88]	; (80ac8 <vTaskSwitchContext+0x88>)
   80a6e:	4798      	blx	r3
   80a70:	bf00      	nop
   80a72:	e7fd      	b.n	80a70 <vTaskSwitchContext+0x30>
   80a74:	4b11      	ldr	r3, [pc, #68]	; (80abc <vTaskSwitchContext+0x7c>)
   80a76:	4912      	ldr	r1, [pc, #72]	; (80ac0 <vTaskSwitchContext+0x80>)
   80a78:	681a      	ldr	r2, [r3, #0]
   80a7a:	3a01      	subs	r2, #1
   80a7c:	601a      	str	r2, [r3, #0]
   80a7e:	681a      	ldr	r2, [r3, #0]
   80a80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80a88:	2a00      	cmp	r2, #0
   80a8a:	d0ed      	beq.n	80a68 <vTaskSwitchContext+0x28>
   80a8c:	4b0b      	ldr	r3, [pc, #44]	; (80abc <vTaskSwitchContext+0x7c>)
   80a8e:	681b      	ldr	r3, [r3, #0]
   80a90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80a94:	4a0a      	ldr	r2, [pc, #40]	; (80ac0 <vTaskSwitchContext+0x80>)
   80a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a9a:	685a      	ldr	r2, [r3, #4]
   80a9c:	6852      	ldr	r2, [r2, #4]
   80a9e:	605a      	str	r2, [r3, #4]
   80aa0:	f103 0108 	add.w	r1, r3, #8
   80aa4:	428a      	cmp	r2, r1
   80aa6:	bf04      	itt	eq
   80aa8:	6852      	ldreq	r2, [r2, #4]
   80aaa:	605a      	streq	r2, [r3, #4]
   80aac:	685b      	ldr	r3, [r3, #4]
   80aae:	68da      	ldr	r2, [r3, #12]
   80ab0:	4b06      	ldr	r3, [pc, #24]	; (80acc <vTaskSwitchContext+0x8c>)
   80ab2:	601a      	str	r2, [r3, #0]
   80ab4:	bd08      	pop	{r3, pc}
   80ab6:	bf00      	nop
   80ab8:	20070670 	.word	0x20070670
   80abc:	20070680 	.word	0x20070680
   80ac0:	2007060c 	.word	0x2007060c
   80ac4:	20070684 	.word	0x20070684
   80ac8:	000808a1 	.word	0x000808a1
   80acc:	20070674 	.word	0x20070674

00080ad0 <Send_cmd>:
uint8_t delim_flag=0;
uint32_t received_byte_t=0;

//------------------------------------FUNCTION TO SEND COMMAND--------------------------------------------------------------
void Send_cmd(const char* command)
{
   80ad0:	b570      	push	{r4, r5, r6, lr}
   80ad2:	4606      	mov	r6, r0
	
	usart_write_line(USART1,"SENDING PID :");
   80ad4:	4d0c      	ldr	r5, [pc, #48]	; (80b08 <Send_cmd+0x38>)
   80ad6:	4628      	mov	r0, r5
   80ad8:	490c      	ldr	r1, [pc, #48]	; (80b0c <Send_cmd+0x3c>)
   80ada:	4c0d      	ldr	r4, [pc, #52]	; (80b10 <Send_cmd+0x40>)
   80adc:	47a0      	blx	r4
	usart_write_line(USART1,command);
   80ade:	4628      	mov	r0, r5
   80ae0:	4631      	mov	r1, r6
   80ae2:	47a0      	blx	r4
	usart_write_line(USART1,"-- ");
   80ae4:	4628      	mov	r0, r5
   80ae6:	490b      	ldr	r1, [pc, #44]	; (80b14 <Send_cmd+0x44>)
   80ae8:	47a0      	blx	r4
	
	usart_write_line(USART0,command);
   80aea:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   80aee:	4628      	mov	r0, r5
   80af0:	4631      	mov	r1, r6
   80af2:	47a0      	blx	r4
	usart_putchar(USART0,enter);
   80af4:	4628      	mov	r0, r5
   80af6:	4b08      	ldr	r3, [pc, #32]	; (80b18 <Send_cmd+0x48>)
   80af8:	7819      	ldrb	r1, [r3, #0]
   80afa:	4b08      	ldr	r3, [pc, #32]	; (80b1c <Send_cmd+0x4c>)
   80afc:	4798      	blx	r3
	delay_ms(50);
   80afe:	4808      	ldr	r0, [pc, #32]	; (80b20 <Send_cmd+0x50>)
   80b00:	4b08      	ldr	r3, [pc, #32]	; (80b24 <Send_cmd+0x54>)
   80b02:	4798      	blx	r3
   80b04:	bd70      	pop	{r4, r5, r6, pc}
   80b06:	bf00      	nop
   80b08:	4009c000 	.word	0x4009c000
   80b0c:	00081094 	.word	0x00081094
   80b10:	00080635 	.word	0x00080635
   80b14:	000810a4 	.word	0x000810a4
   80b18:	20070140 	.word	0x20070140
   80b1c:	00080621 	.word	0x00080621
   80b20:	000493e0 	.word	0x000493e0
   80b24:	20070001 	.word	0x20070001

00080b28 <main>:
//--------------------------------------------------------------------------------------------------------------------------------------



int main (void)
{
   80b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b2c:	b0b7      	sub	sp, #220	; 0xdc
	
//----------------------------------------------fire PIDS USING DEFAULT HEADER-------------------------------------------------

for(i=0;i<TOTAL_PIDS;i++)
{
	if(delim_flag=1)
   80b2e:	4d6e      	ldr	r5, [pc, #440]	; (80ce8 <main+0x1c0>)
	while(1)
	{
		
	
	
	sysclk_init();
   80b30:	4b6e      	ldr	r3, [pc, #440]	; (80cec <main+0x1c4>)
   80b32:	4798      	blx	r3
	board_init();
   80b34:	4b6e      	ldr	r3, [pc, #440]	; (80cf0 <main+0x1c8>)
   80b36:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80b38:	200b      	movs	r0, #11
   80b3a:	4c6e      	ldr	r4, [pc, #440]	; (80cf4 <main+0x1cc>)
   80b3c:	47a0      	blx	r4
   80b3e:	200c      	movs	r0, #12
   80b40:	47a0      	blx	r4
	ioport_init();

	uint32_t received_byte;
	uint8_t str[50];
	int i,j;
   	memset(str,'\0',50);
   80b42:	2300      	movs	r3, #0
   80b44:	9306      	str	r3, [sp, #24]
   80b46:	9307      	str	r3, [sp, #28]
   80b48:	9308      	str	r3, [sp, #32]
   80b4a:	9309      	str	r3, [sp, #36]	; 0x24
   80b4c:	930a      	str	r3, [sp, #40]	; 0x28
   80b4e:	930b      	str	r3, [sp, #44]	; 0x2c
   80b50:	930c      	str	r3, [sp, #48]	; 0x30
   80b52:	930d      	str	r3, [sp, #52]	; 0x34
   80b54:	930e      	str	r3, [sp, #56]	; 0x38
   80b56:	930f      	str	r3, [sp, #60]	; 0x3c
   80b58:	9310      	str	r3, [sp, #64]	; 0x40
   80b5a:	9311      	str	r3, [sp, #68]	; 0x44
   80b5c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48

//---------------------------------------------initialize pids-------------------------------------------------------------	
	
	const char PIDS[TOTAL_PIDS][PID_LENGTH]={
   80b60:	a823      	add	r0, sp, #140	; 0x8c
   80b62:	4965      	ldr	r1, [pc, #404]	; (80cf8 <main+0x1d0>)
   80b64:	224b      	movs	r2, #75	; 0x4b
   80b66:	4b65      	ldr	r3, [pc, #404]	; (80cfc <main+0x1d4>)
   80b68:	4798      	blx	r3
	    "010d",
	    "010e"
	};
	
//---------------------DECLARE HEADERS-----------------------------------------------	
	const char Headers[TOTAL_HEADERS][HEADER_LENGTH]={
   80b6a:	4b63      	ldr	r3, [pc, #396]	; (80cf8 <main+0x1d0>)
   80b6c:	f103 044c 	add.w	r4, r3, #76	; 0x4c
   80b70:	af13      	add	r7, sp, #76	; 0x4c
   80b72:	463e      	mov	r6, r7
   80b74:	6820      	ldr	r0, [r4, #0]
   80b76:	6861      	ldr	r1, [r4, #4]
   80b78:	68a2      	ldr	r2, [r4, #8]
   80b7a:	68e3      	ldr	r3, [r4, #12]
   80b7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   80b7e:	3410      	adds	r4, #16
   80b80:	4637      	mov	r7, r6
   80b82:	4b5f      	ldr	r3, [pc, #380]	; (80d00 <main+0x1d8>)
   80b84:	429c      	cmp	r4, r3
   80b86:	d1f4      	bne.n	80b72 <main+0x4a>
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80b88:	4b5e      	ldr	r3, [pc, #376]	; (80d04 <main+0x1dc>)
   80b8a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
   80b8e:	611e      	str	r6, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b90:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0


//------------------------------------USART COMMUNCATION SETTINGS--------------------------------------------------------//	
	
	
	const sam_usart_opt_t usart_console_settings = {
   80b94:	2300      	movs	r3, #0
   80b96:	9303      	str	r3, [sp, #12]
   80b98:	9304      	str	r3, [sp, #16]
   80b9a:	9305      	str	r3, [sp, #20]
   80b9c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   80ba0:	9300      	str	r3, [sp, #0]
   80ba2:	23c0      	movs	r3, #192	; 0xc0
   80ba4:	9301      	str	r3, [sp, #4]
   80ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80baa:	9302      	str	r3, [sp, #8]
   80bac:	2011      	movs	r0, #17
   80bae:	f8df a144 	ldr.w	sl, [pc, #324]	; 80cf4 <main+0x1cc>
   80bb2:	47d0      	blx	sl
		US_MR_NBSTOP_1_BIT,
		US_MR_CHMODE_NORMAL
	};
//---------------------INITIALIZE USART0-STN-------------------------------------------------------------//	
	sysclk_enable_peripheral_clock(ID_USART0);
	usart_init_rs232(USART0, &usart_console_settings,sysclk_get_main_hz());
   80bb4:	4c54      	ldr	r4, [pc, #336]	; (80d08 <main+0x1e0>)
   80bb6:	4620      	mov	r0, r4
   80bb8:	4669      	mov	r1, sp
   80bba:	4a54      	ldr	r2, [pc, #336]	; (80d0c <main+0x1e4>)
   80bbc:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80d54 <main+0x22c>
   80bc0:	47c8      	blx	r9
	usart_enable_tx(USART0);
   80bc2:	4620      	mov	r0, r4
   80bc4:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80d58 <main+0x230>
   80bc8:	47c0      	blx	r8
	usart_enable_rx(USART0);
   80bca:	4620      	mov	r0, r4
   80bcc:	4f50      	ldr	r7, [pc, #320]	; (80d10 <main+0x1e8>)
   80bce:	47b8      	blx	r7
	
//-------------------------INTIALIZE USART0 INTERRUPT-STN------------------------------------------------//	
	usart_enable_interrupt(USART0, US_IER_RXRDY);
   80bd0:	4620      	mov	r0, r4
   80bd2:	2101      	movs	r1, #1
   80bd4:	4b4f      	ldr	r3, [pc, #316]	; (80d14 <main+0x1ec>)
   80bd6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bd8:	4b4f      	ldr	r3, [pc, #316]	; (80d18 <main+0x1f0>)
   80bda:	601e      	str	r6, [r3, #0]
   80bdc:	2012      	movs	r0, #18
   80bde:	47d0      	blx	sl
	NVIC_EnableIRQ(USART0_IRQn);
	

//--------------------------INITIALIZE USART1--TERMINAL------------------------------------------------------------------	
	sysclk_enable_peripheral_clock(ID_USART1);
	usart_init_rs232(USART1, &usart_console_settings,sysclk_get_main_hz());
   80be0:	4e4e      	ldr	r6, [pc, #312]	; (80d1c <main+0x1f4>)
   80be2:	4630      	mov	r0, r6
   80be4:	4669      	mov	r1, sp
   80be6:	4a49      	ldr	r2, [pc, #292]	; (80d0c <main+0x1e4>)
   80be8:	47c8      	blx	r9
	usart_enable_tx(USART1);
   80bea:	4630      	mov	r0, r6
   80bec:	47c0      	blx	r8
	usart_enable_rx(USART1);
   80bee:	4630      	mov	r0, r6
   80bf0:	47b8      	blx	r7
	received_byte = sysclk_get_cpu_hz();
	
	//sprintf(str,"frequency: %u",received_byte);

//-------------------------------BASIC USART & STN TEST----------------------------------------------------------
	usart_write_line(USART1,"Welcome To CARiQ!!!\n");
   80bf2:	4630      	mov	r0, r6
   80bf4:	494a      	ldr	r1, [pc, #296]	; (80d20 <main+0x1f8>)
   80bf6:	4f4b      	ldr	r7, [pc, #300]	; (80d24 <main+0x1fc>)
   80bf8:	47b8      	blx	r7
	delay_ms(BLINK_INTERVAL);
   80bfa:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80d38 <main+0x210>
   80bfe:	4650      	mov	r0, sl
   80c00:	4e49      	ldr	r6, [pc, #292]	; (80d28 <main+0x200>)
   80c02:	47b0      	blx	r6
	
	usart_write_line(USART0,"ATRV");
   80c04:	4620      	mov	r0, r4
   80c06:	4949      	ldr	r1, [pc, #292]	; (80d2c <main+0x204>)
   80c08:	47b8      	blx	r7
	usart_putchar(USART0,enter);
   80c0a:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80d5c <main+0x234>
   80c0e:	4620      	mov	r0, r4
   80c10:	f899 1000 	ldrb.w	r1, [r9]
   80c14:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80d50 <main+0x228>
   80c18:	47c0      	blx	r8
	delay_ms(500);
   80c1a:	4650      	mov	r0, sl
   80c1c:	47b0      	blx	r6
    
	usart_write_line(USART0,"010c");
   80c1e:	4620      	mov	r0, r4
   80c20:	4943      	ldr	r1, [pc, #268]	; (80d30 <main+0x208>)
   80c22:	47b8      	blx	r7
    usart_putchar(USART0,enter);
   80c24:	4620      	mov	r0, r4
   80c26:	f899 1000 	ldrb.w	r1, [r9]
   80c2a:	47c0      	blx	r8
    delay_ms(1000);
   80c2c:	4841      	ldr	r0, [pc, #260]	; (80d34 <main+0x20c>)
   80c2e:	47b0      	blx	r6
   80c30:	2404      	movs	r4, #4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c32:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80d04 <main+0x1dc>
   80c36:	f44f 3900 	mov.w	r9, #131072	; 0x20000
   80c3a:	46ca      	mov	sl, r9
   80c3c:	f8c8 a034 	str.w	sl, [r8, #52]	; 0x34
    	
	for(i=0;i<4;i++)
		{
		ioport_set_pin_level(LED_PIN,IOPORT_PIN_LEVEL_LOW);
		delay_ms(BLINK_INTERVAL);
   80c40:	4f3d      	ldr	r7, [pc, #244]	; (80d38 <main+0x210>)
   80c42:	4638      	mov	r0, r7
   80c44:	4e38      	ldr	r6, [pc, #224]	; (80d28 <main+0x200>)
   80c46:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c48:	f8c8 9030 	str.w	r9, [r8, #48]	; 0x30
		ioport_set_pin_level(LED_PIN,IOPORT_PIN_LEVEL_HIGH);
		delay_ms(BLINK_INTERVAL);
   80c4c:	4638      	mov	r0, r7
   80c4e:	47b0      	blx	r6
    
	usart_write_line(USART0,"010c");
    usart_putchar(USART0,enter);
    delay_ms(1000);
    	
	for(i=0;i<4;i++)
   80c50:	3c01      	subs	r4, #1
   80c52:	d1f3      	bne.n	80c3c <main+0x114>
		ioport_set_pin_level(LED_PIN,IOPORT_PIN_LEVEL_HIGH);
		delay_ms(BLINK_INTERVAL);
			
		}
	
	usart_write_line(USART1,"\n done with basic testing!!! press any key to proceed");	
   80c54:	4c31      	ldr	r4, [pc, #196]	; (80d1c <main+0x1f4>)
   80c56:	4620      	mov	r0, r4
   80c58:	4938      	ldr	r1, [pc, #224]	; (80d3c <main+0x214>)
   80c5a:	4b32      	ldr	r3, [pc, #200]	; (80d24 <main+0x1fc>)
   80c5c:	4798      	blx	r3
	received_byte_t=usart_read(USART1,&received_byte_t);
   80c5e:	4620      	mov	r0, r4
   80c60:	4937      	ldr	r1, [pc, #220]	; (80d40 <main+0x218>)
   80c62:	4b38      	ldr	r3, [pc, #224]	; (80d44 <main+0x21c>)
   80c64:	4798      	blx	r3
	while(!received_byte_t)
   80c66:	2800      	cmp	r0, #0
   80c68:	d03d      	beq.n	80ce6 <main+0x1be>
		delay_ms(BLINK_INTERVAL);
			
		}
	
	usart_write_line(USART1,"\n done with basic testing!!! press any key to proceed");	
	received_byte_t=usart_read(USART1,&received_byte_t);
   80c6a:	4a35      	ldr	r2, [pc, #212]	; (80d40 <main+0x218>)
   80c6c:	6010      	str	r0, [r2, #0]
   80c6e:	f10d 06d7 	add.w	r6, sp, #215	; 0xd7
   80c72:	ac23      	add	r4, sp, #140	; 0x8c
	
//----------------------------------------------fire PIDS USING DEFAULT HEADER-------------------------------------------------

for(i=0;i<TOTAL_PIDS;i++)
{
	if(delim_flag=1)
   80c74:	f04f 0801 	mov.w	r8, #1
	{
		Send_cmd(PIDS[i]);
   80c78:	4f33      	ldr	r7, [pc, #204]	; (80d48 <main+0x220>)
	
//----------------------------------------------fire PIDS USING DEFAULT HEADER-------------------------------------------------

for(i=0;i<TOTAL_PIDS;i++)
{
	if(delim_flag=1)
   80c7a:	f885 8000 	strb.w	r8, [r5]
	{
		Send_cmd(PIDS[i]);
   80c7e:	4620      	mov	r0, r4
   80c80:	47b8      	blx	r7
   80c82:	3405      	adds	r4, #5
	
	
	
//----------------------------------------------fire PIDS USING DEFAULT HEADER-------------------------------------------------

for(i=0;i<TOTAL_PIDS;i++)
   80c84:	42b4      	cmp	r4, r6
   80c86:	d1f8      	bne.n	80c7a <main+0x152>
   80c88:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   80c8c:	f10d 0b8c 	add.w	fp, sp, #140	; 0x8c
//---------------------------------------------------SET HEADER AND FIRE PIDS-------------------------------------------------------------

    for( j=0;j< TOTAL_HEADERS;j++)
		{
		
		usart_write_line(USART1,"HEADER SET  : ");
   80c90:	f8df a088 	ldr.w	sl, [pc, #136]	; 80d1c <main+0x1f4>
		
		for(i=0;i<TOTAL_PIDS;i++)
		{
			if(delim_flag=1)
			{
			Send_cmd(PIDS[i]);
   80c94:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80d48 <main+0x220>
//---------------------------------------------------SET HEADER AND FIRE PIDS-------------------------------------------------------------

    for( j=0;j< TOTAL_HEADERS;j++)
		{
		
		usart_write_line(USART1,"HEADER SET  : ");
   80c98:	4650      	mov	r0, sl
   80c9a:	492c      	ldr	r1, [pc, #176]	; (80d4c <main+0x224>)
   80c9c:	4c21      	ldr	r4, [pc, #132]	; (80d24 <main+0x1fc>)
   80c9e:	47a0      	blx	r4
		usart_write_line(USART1,Headers[j]);
   80ca0:	4650      	mov	r0, sl
   80ca2:	4649      	mov	r1, r9
   80ca4:	47a0      	blx	r4
		
		
		usart_write_line(USART0,Headers[j]);
   80ca6:	4f18      	ldr	r7, [pc, #96]	; (80d08 <main+0x1e0>)
   80ca8:	4638      	mov	r0, r7
   80caa:	4649      	mov	r1, r9
   80cac:	47a0      	blx	r4
		usart_putchar(USART0,'\r');
   80cae:	4638      	mov	r0, r7
   80cb0:	210d      	movs	r1, #13
   80cb2:	4b27      	ldr	r3, [pc, #156]	; (80d50 <main+0x228>)
   80cb4:	4798      	blx	r3
		
		delay_ms(500);
   80cb6:	4820      	ldr	r0, [pc, #128]	; (80d38 <main+0x210>)
   80cb8:	4b1b      	ldr	r3, [pc, #108]	; (80d28 <main+0x200>)
   80cba:	4798      	blx	r3
   80cbc:	ac23      	add	r4, sp, #140	; 0x8c
		
		for(i=0;i<TOTAL_PIDS;i++)
		{
			if(delim_flag=1)
   80cbe:	f04f 0701 	mov.w	r7, #1
   80cc2:	702f      	strb	r7, [r5, #0]
			{
			Send_cmd(PIDS[i]);
   80cc4:	4620      	mov	r0, r4
   80cc6:	47c0      	blx	r8
   80cc8:	3405      	adds	r4, #5
		usart_write_line(USART0,Headers[j]);
		usart_putchar(USART0,'\r');
		
		delay_ms(500);
		
		for(i=0;i<TOTAL_PIDS;i++)
   80cca:	42b4      	cmp	r4, r6
   80ccc:	d1f9      	bne.n	80cc2 <main+0x19a>
   80cce:	f109 0908 	add.w	r9, r9, #8
}

	
//---------------------------------------------------SET HEADER AND FIRE PIDS-------------------------------------------------------------

    for( j=0;j< TOTAL_HEADERS;j++)
   80cd2:	45d9      	cmp	r9, fp
   80cd4:	d1e0      	bne.n	80c98 <main+0x170>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80cd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   80cda:	4b0a      	ldr	r3, [pc, #40]	; (80d04 <main+0x1dc>)
   80cdc:	635a      	str	r2, [r3, #52]	; 0x34

//------------------------------------ACTIVATE LISTENING MODE---------------------------------------------------------------
//------------------------------------GLOW LED TO INDICATE SCANNING IS DONE-----------------------------------------------

		ioport_set_pin_level(LED_PIN,IOPORT_PIN_LEVEL_LOW);
		delay_ms(BLINK_INTERVAL);
   80cde:	4816      	ldr	r0, [pc, #88]	; (80d38 <main+0x210>)
   80ce0:	4b11      	ldr	r3, [pc, #68]	; (80d28 <main+0x200>)
   80ce2:	4798      	blx	r3


//listening_mode();
     }
   80ce4:	e724      	b.n	80b30 <main+0x8>
   80ce6:	e7fe      	b.n	80ce6 <main+0x1be>
   80ce8:	2007068c 	.word	0x2007068c
   80cec:	00080149 	.word	0x00080149
   80cf0:	000804dd 	.word	0x000804dd
   80cf4:	00080485 	.word	0x00080485
   80cf8:	00081008 	.word	0x00081008
   80cfc:	00080e25 	.word	0x00080e25
   80d00:	00081094 	.word	0x00081094
   80d04:	400e1000 	.word	0x400e1000
   80d08:	40098000 	.word	0x40098000
   80d0c:	0501bd00 	.word	0x0501bd00
   80d10:	000805fd 	.word	0x000805fd
   80d14:	00080605 	.word	0x00080605
   80d18:	e000e100 	.word	0xe000e100
   80d1c:	4009c000 	.word	0x4009c000
   80d20:	00081120 	.word	0x00081120
   80d24:	00080635 	.word	0x00080635
   80d28:	20070001 	.word	0x20070001
   80d2c:	00081138 	.word	0x00081138
   80d30:	00081140 	.word	0x00081140
   80d34:	005b8d80 	.word	0x005b8d80
   80d38:	002dc6c0 	.word	0x002dc6c0
   80d3c:	00081148 	.word	0x00081148
   80d40:	20070688 	.word	0x20070688
   80d44:	00080655 	.word	0x00080655
   80d48:	00080ad1 	.word	0x00080ad1
   80d4c:	00081180 	.word	0x00081180
   80d50:	00080621 	.word	0x00080621
   80d54:	000805a1 	.word	0x000805a1
   80d58:	000805f5 	.word	0x000805f5
   80d5c:	20070140 	.word	0x20070140

00080d60 <USART0_Handler>:
//-------------------------------END OF MAIN-----------------------------------------------------------------------------------
}


void USART_SERIAL_ISR_HANDLER(void)
{
   80d60:	b510      	push	{r4, lr}
   80d62:	b082      	sub	sp, #8
	uint32_t dw_status = usart_get_status(USART0);
   80d64:	4812      	ldr	r0, [pc, #72]	; (80db0 <USART0_Handler+0x50>)
   80d66:	4b13      	ldr	r3, [pc, #76]	; (80db4 <USART0_Handler+0x54>)
   80d68:	4798      	blx	r3
	
	if (dw_status & US_CSR_RXRDY) {
   80d6a:	f010 0f01 	tst.w	r0, #1
   80d6e:	d01c      	beq.n	80daa <USART0_Handler+0x4a>
		uint32_t received_byte;
		usart_read(USART0, &received_byte);
   80d70:	480f      	ldr	r0, [pc, #60]	; (80db0 <USART0_Handler+0x50>)
   80d72:	a901      	add	r1, sp, #4
   80d74:	4b10      	ldr	r3, [pc, #64]	; (80db8 <USART0_Handler+0x58>)
   80d76:	4798      	blx	r3
		while(!received_byte)
   80d78:	9901      	ldr	r1, [sp, #4]
   80d7a:	b901      	cbnz	r1, 80d7e <USART0_Handler+0x1e>
   80d7c:	e7fe      	b.n	80d7c <USART0_Handler+0x1c>
		{
			
		}
		
		usart_write(USART1, received_byte);
   80d7e:	4c0f      	ldr	r4, [pc, #60]	; (80dbc <USART0_Handler+0x5c>)
   80d80:	4620      	mov	r0, r4
   80d82:	4b0f      	ldr	r3, [pc, #60]	; (80dc0 <USART0_Handler+0x60>)
   80d84:	4798      	blx	r3
	    usart_write_line(USART1,"ENTERED INTERRRUPT"); 
   80d86:	4620      	mov	r0, r4
   80d88:	490e      	ldr	r1, [pc, #56]	; (80dc4 <USART0_Handler+0x64>)
   80d8a:	4b0f      	ldr	r3, [pc, #60]	; (80dc8 <USART0_Handler+0x68>)
   80d8c:	4798      	blx	r3
       if(received_byte=='>')
   80d8e:	9b01      	ldr	r3, [sp, #4]
   80d90:	2b3e      	cmp	r3, #62	; 0x3e
   80d92:	d107      	bne.n	80da4 <USART0_Handler+0x44>
		{
		 delim_flag=1;
   80d94:	2201      	movs	r2, #1
   80d96:	4b0d      	ldr	r3, [pc, #52]	; (80dcc <USART0_Handler+0x6c>)
   80d98:	701a      	strb	r2, [r3, #0]
		 usart_write(USART1,"\r\n");	
   80d9a:	4620      	mov	r0, r4
   80d9c:	490c      	ldr	r1, [pc, #48]	; (80dd0 <USART0_Handler+0x70>)
   80d9e:	4b08      	ldr	r3, [pc, #32]	; (80dc0 <USART0_Handler+0x60>)
   80da0:	4798      	blx	r3
   80da2:	e002      	b.n	80daa <USART0_Handler+0x4a>
		}	
	   else
		{
		
		delim_flag=0;
   80da4:	2200      	movs	r2, #0
   80da6:	4b09      	ldr	r3, [pc, #36]	; (80dcc <USART0_Handler+0x6c>)
   80da8:	701a      	strb	r2, [r3, #0]
		}
	}
}
   80daa:	b002      	add	sp, #8
   80dac:	bd10      	pop	{r4, pc}
   80dae:	bf00      	nop
   80db0:	40098000 	.word	0x40098000
   80db4:	00080609 	.word	0x00080609
   80db8:	00080655 	.word	0x00080655
   80dbc:	4009c000 	.word	0x4009c000
   80dc0:	0008060d 	.word	0x0008060d
   80dc4:	00081190 	.word	0x00081190
   80dc8:	00080635 	.word	0x00080635
   80dcc:	2007068c 	.word	0x2007068c
   80dd0:	000811a4 	.word	0x000811a4

00080dd4 <__libc_init_array>:
   80dd4:	b570      	push	{r4, r5, r6, lr}
   80dd6:	4e0f      	ldr	r6, [pc, #60]	; (80e14 <__libc_init_array+0x40>)
   80dd8:	4d0f      	ldr	r5, [pc, #60]	; (80e18 <__libc_init_array+0x44>)
   80dda:	1b76      	subs	r6, r6, r5
   80ddc:	10b6      	asrs	r6, r6, #2
   80dde:	d007      	beq.n	80df0 <__libc_init_array+0x1c>
   80de0:	3d04      	subs	r5, #4
   80de2:	2400      	movs	r4, #0
   80de4:	3401      	adds	r4, #1
   80de6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80dea:	4798      	blx	r3
   80dec:	42a6      	cmp	r6, r4
   80dee:	d1f9      	bne.n	80de4 <__libc_init_array+0x10>
   80df0:	4e0a      	ldr	r6, [pc, #40]	; (80e1c <__libc_init_array+0x48>)
   80df2:	4d0b      	ldr	r5, [pc, #44]	; (80e20 <__libc_init_array+0x4c>)
   80df4:	f000 f9dc 	bl	811b0 <_init>
   80df8:	1b76      	subs	r6, r6, r5
   80dfa:	10b6      	asrs	r6, r6, #2
   80dfc:	d008      	beq.n	80e10 <__libc_init_array+0x3c>
   80dfe:	3d04      	subs	r5, #4
   80e00:	2400      	movs	r4, #0
   80e02:	3401      	adds	r4, #1
   80e04:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80e08:	4798      	blx	r3
   80e0a:	42a6      	cmp	r6, r4
   80e0c:	d1f9      	bne.n	80e02 <__libc_init_array+0x2e>
   80e0e:	bd70      	pop	{r4, r5, r6, pc}
   80e10:	bd70      	pop	{r4, r5, r6, pc}
   80e12:	bf00      	nop
   80e14:	000811bc 	.word	0x000811bc
   80e18:	000811bc 	.word	0x000811bc
   80e1c:	000811c4 	.word	0x000811c4
   80e20:	000811bc 	.word	0x000811bc

00080e24 <memcpy>:
   80e24:	4684      	mov	ip, r0
   80e26:	ea41 0300 	orr.w	r3, r1, r0
   80e2a:	f013 0303 	ands.w	r3, r3, #3
   80e2e:	d149      	bne.n	80ec4 <memcpy+0xa0>
   80e30:	3a40      	subs	r2, #64	; 0x40
   80e32:	d323      	bcc.n	80e7c <memcpy+0x58>
   80e34:	680b      	ldr	r3, [r1, #0]
   80e36:	6003      	str	r3, [r0, #0]
   80e38:	684b      	ldr	r3, [r1, #4]
   80e3a:	6043      	str	r3, [r0, #4]
   80e3c:	688b      	ldr	r3, [r1, #8]
   80e3e:	6083      	str	r3, [r0, #8]
   80e40:	68cb      	ldr	r3, [r1, #12]
   80e42:	60c3      	str	r3, [r0, #12]
   80e44:	690b      	ldr	r3, [r1, #16]
   80e46:	6103      	str	r3, [r0, #16]
   80e48:	694b      	ldr	r3, [r1, #20]
   80e4a:	6143      	str	r3, [r0, #20]
   80e4c:	698b      	ldr	r3, [r1, #24]
   80e4e:	6183      	str	r3, [r0, #24]
   80e50:	69cb      	ldr	r3, [r1, #28]
   80e52:	61c3      	str	r3, [r0, #28]
   80e54:	6a0b      	ldr	r3, [r1, #32]
   80e56:	6203      	str	r3, [r0, #32]
   80e58:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   80e5a:	6243      	str	r3, [r0, #36]	; 0x24
   80e5c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   80e5e:	6283      	str	r3, [r0, #40]	; 0x28
   80e60:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   80e62:	62c3      	str	r3, [r0, #44]	; 0x2c
   80e64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   80e66:	6303      	str	r3, [r0, #48]	; 0x30
   80e68:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   80e6a:	6343      	str	r3, [r0, #52]	; 0x34
   80e6c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   80e6e:	6383      	str	r3, [r0, #56]	; 0x38
   80e70:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   80e72:	63c3      	str	r3, [r0, #60]	; 0x3c
   80e74:	3040      	adds	r0, #64	; 0x40
   80e76:	3140      	adds	r1, #64	; 0x40
   80e78:	3a40      	subs	r2, #64	; 0x40
   80e7a:	d2db      	bcs.n	80e34 <memcpy+0x10>
   80e7c:	3230      	adds	r2, #48	; 0x30
   80e7e:	d30b      	bcc.n	80e98 <memcpy+0x74>
   80e80:	680b      	ldr	r3, [r1, #0]
   80e82:	6003      	str	r3, [r0, #0]
   80e84:	684b      	ldr	r3, [r1, #4]
   80e86:	6043      	str	r3, [r0, #4]
   80e88:	688b      	ldr	r3, [r1, #8]
   80e8a:	6083      	str	r3, [r0, #8]
   80e8c:	68cb      	ldr	r3, [r1, #12]
   80e8e:	60c3      	str	r3, [r0, #12]
   80e90:	3010      	adds	r0, #16
   80e92:	3110      	adds	r1, #16
   80e94:	3a10      	subs	r2, #16
   80e96:	d2f3      	bcs.n	80e80 <memcpy+0x5c>
   80e98:	320c      	adds	r2, #12
   80e9a:	d305      	bcc.n	80ea8 <memcpy+0x84>
   80e9c:	f851 3b04 	ldr.w	r3, [r1], #4
   80ea0:	f840 3b04 	str.w	r3, [r0], #4
   80ea4:	3a04      	subs	r2, #4
   80ea6:	d2f9      	bcs.n	80e9c <memcpy+0x78>
   80ea8:	3204      	adds	r2, #4
   80eaa:	d008      	beq.n	80ebe <memcpy+0x9a>
   80eac:	07d2      	lsls	r2, r2, #31
   80eae:	bf1c      	itt	ne
   80eb0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   80eb4:	f800 3b01 	strbne.w	r3, [r0], #1
   80eb8:	d301      	bcc.n	80ebe <memcpy+0x9a>
   80eba:	880b      	ldrh	r3, [r1, #0]
   80ebc:	8003      	strh	r3, [r0, #0]
   80ebe:	4660      	mov	r0, ip
   80ec0:	4770      	bx	lr
   80ec2:	bf00      	nop
   80ec4:	2a08      	cmp	r2, #8
   80ec6:	d313      	bcc.n	80ef0 <memcpy+0xcc>
   80ec8:	078b      	lsls	r3, r1, #30
   80eca:	d0b1      	beq.n	80e30 <memcpy+0xc>
   80ecc:	f010 0303 	ands.w	r3, r0, #3
   80ed0:	d0ae      	beq.n	80e30 <memcpy+0xc>
   80ed2:	f1c3 0304 	rsb	r3, r3, #4
   80ed6:	1ad2      	subs	r2, r2, r3
   80ed8:	07db      	lsls	r3, r3, #31
   80eda:	bf1c      	itt	ne
   80edc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   80ee0:	f800 3b01 	strbne.w	r3, [r0], #1
   80ee4:	d3a4      	bcc.n	80e30 <memcpy+0xc>
   80ee6:	f831 3b02 	ldrh.w	r3, [r1], #2
   80eea:	f820 3b02 	strh.w	r3, [r0], #2
   80eee:	e79f      	b.n	80e30 <memcpy+0xc>
   80ef0:	3a04      	subs	r2, #4
   80ef2:	d3d9      	bcc.n	80ea8 <memcpy+0x84>
   80ef4:	3a01      	subs	r2, #1
   80ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
   80efa:	f800 3b01 	strb.w	r3, [r0], #1
   80efe:	d2f9      	bcs.n	80ef4 <memcpy+0xd0>
   80f00:	780b      	ldrb	r3, [r1, #0]
   80f02:	7003      	strb	r3, [r0, #0]
   80f04:	784b      	ldrb	r3, [r1, #1]
   80f06:	7043      	strb	r3, [r0, #1]
   80f08:	788b      	ldrb	r3, [r1, #2]
   80f0a:	7083      	strb	r3, [r0, #2]
   80f0c:	4660      	mov	r0, ip
   80f0e:	4770      	bx	lr

00080f10 <register_fini>:
   80f10:	4b02      	ldr	r3, [pc, #8]	; (80f1c <register_fini+0xc>)
   80f12:	b113      	cbz	r3, 80f1a <register_fini+0xa>
   80f14:	4802      	ldr	r0, [pc, #8]	; (80f20 <register_fini+0x10>)
   80f16:	f000 b805 	b.w	80f24 <atexit>
   80f1a:	4770      	bx	lr
   80f1c:	00000000 	.word	0x00000000
   80f20:	00080f31 	.word	0x00080f31

00080f24 <atexit>:
   80f24:	4601      	mov	r1, r0
   80f26:	2000      	movs	r0, #0
   80f28:	4602      	mov	r2, r0
   80f2a:	4603      	mov	r3, r0
   80f2c:	f000 b818 	b.w	80f60 <__register_exitproc>

00080f30 <__libc_fini_array>:
   80f30:	b538      	push	{r3, r4, r5, lr}
   80f32:	4d09      	ldr	r5, [pc, #36]	; (80f58 <__libc_fini_array+0x28>)
   80f34:	4c09      	ldr	r4, [pc, #36]	; (80f5c <__libc_fini_array+0x2c>)
   80f36:	1b64      	subs	r4, r4, r5
   80f38:	10a4      	asrs	r4, r4, #2
   80f3a:	bf18      	it	ne
   80f3c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80f40:	d005      	beq.n	80f4e <__libc_fini_array+0x1e>
   80f42:	3c01      	subs	r4, #1
   80f44:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80f48:	4798      	blx	r3
   80f4a:	2c00      	cmp	r4, #0
   80f4c:	d1f9      	bne.n	80f42 <__libc_fini_array+0x12>
   80f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80f52:	f000 b937 	b.w	811c4 <_fini>
   80f56:	bf00      	nop
   80f58:	000811d0 	.word	0x000811d0
   80f5c:	000811d4 	.word	0x000811d4

00080f60 <__register_exitproc>:
   80f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f62:	4c27      	ldr	r4, [pc, #156]	; (81000 <__register_exitproc+0xa0>)
   80f64:	b085      	sub	sp, #20
   80f66:	6826      	ldr	r6, [r4, #0]
   80f68:	4607      	mov	r7, r0
   80f6a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80f6e:	2c00      	cmp	r4, #0
   80f70:	d040      	beq.n	80ff4 <__register_exitproc+0x94>
   80f72:	6865      	ldr	r5, [r4, #4]
   80f74:	2d1f      	cmp	r5, #31
   80f76:	dd1e      	ble.n	80fb6 <__register_exitproc+0x56>
   80f78:	4822      	ldr	r0, [pc, #136]	; (81004 <__register_exitproc+0xa4>)
   80f7a:	b918      	cbnz	r0, 80f84 <__register_exitproc+0x24>
   80f7c:	f04f 30ff 	mov.w	r0, #4294967295
   80f80:	b005      	add	sp, #20
   80f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80f84:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80f88:	9103      	str	r1, [sp, #12]
   80f8a:	9202      	str	r2, [sp, #8]
   80f8c:	9301      	str	r3, [sp, #4]
   80f8e:	f3af 8000 	nop.w
   80f92:	9903      	ldr	r1, [sp, #12]
   80f94:	4604      	mov	r4, r0
   80f96:	9a02      	ldr	r2, [sp, #8]
   80f98:	9b01      	ldr	r3, [sp, #4]
   80f9a:	2800      	cmp	r0, #0
   80f9c:	d0ee      	beq.n	80f7c <__register_exitproc+0x1c>
   80f9e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80fa2:	2000      	movs	r0, #0
   80fa4:	6025      	str	r5, [r4, #0]
   80fa6:	6060      	str	r0, [r4, #4]
   80fa8:	4605      	mov	r5, r0
   80faa:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80fae:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80fb2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80fb6:	b93f      	cbnz	r7, 80fc8 <__register_exitproc+0x68>
   80fb8:	1c6b      	adds	r3, r5, #1
   80fba:	2000      	movs	r0, #0
   80fbc:	3502      	adds	r5, #2
   80fbe:	6063      	str	r3, [r4, #4]
   80fc0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80fc4:	b005      	add	sp, #20
   80fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80fc8:	2601      	movs	r6, #1
   80fca:	40ae      	lsls	r6, r5
   80fcc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   80fd0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80fd4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80fd8:	2f02      	cmp	r7, #2
   80fda:	ea42 0206 	orr.w	r2, r2, r6
   80fde:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   80fe2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80fe6:	d1e7      	bne.n	80fb8 <__register_exitproc+0x58>
   80fe8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80fec:	431e      	orrs	r6, r3
   80fee:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   80ff2:	e7e1      	b.n	80fb8 <__register_exitproc+0x58>
   80ff4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   80ff8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80ffc:	e7b9      	b.n	80f72 <__register_exitproc+0x12>
   80ffe:	bf00      	nop
   81000:	000811ac 	.word	0x000811ac
   81004:	00000000 	.word	0x00000000
   81008:	30303130 	.word	0x30303130
   8100c:	30313000 	.word	0x30313000
   81010:	31300031 	.word	0x31300031
   81014:	30003230 	.word	0x30003230
   81018:	00333031 	.word	0x00333031
   8101c:	34303130 	.word	0x34303130
   81020:	30313000 	.word	0x30313000
   81024:	31300035 	.word	0x31300035
   81028:	30003630 	.word	0x30003630
   8102c:	00373031 	.word	0x00373031
   81030:	38303130 	.word	0x38303130
   81034:	30313000 	.word	0x30313000
   81038:	31300039 	.word	0x31300039
   8103c:	30006130 	.word	0x30006130
   81040:	00623031 	.word	0x00623031
   81044:	63303130 	.word	0x63303130
   81048:	30313000 	.word	0x30313000
   8104c:	31300064 	.word	0x31300064
   81050:	00006530 	.word	0x00006530
   81054:	48535441 	.word	0x48535441
   81058:	00304537 	.word	0x00304537
   8105c:	48535441 	.word	0x48535441
   81060:	00314537 	.word	0x00314537
   81064:	48535441 	.word	0x48535441
   81068:	00324537 	.word	0x00324537
   8106c:	48535441 	.word	0x48535441
   81070:	00334537 	.word	0x00334537
   81074:	48535441 	.word	0x48535441
   81078:	00344537 	.word	0x00344537
   8107c:	48535441 	.word	0x48535441
   81080:	00354537 	.word	0x00354537
   81084:	48535441 	.word	0x48535441
   81088:	00364537 	.word	0x00364537
   8108c:	48535441 	.word	0x48535441
   81090:	00374537 	.word	0x00374537
   81094:	444e4553 	.word	0x444e4553
   81098:	20474e49 	.word	0x20474e49
   8109c:	20444950 	.word	0x20444950
   810a0:	0000003a 	.word	0x0000003a
   810a4:	00202d2d 	.word	0x00202d2d
   810a8:	53455250 	.word	0x53455250
   810ac:	204c2053 	.word	0x204c2053
   810b0:	41204f54 	.word	0x41204f54
   810b4:	56495443 	.word	0x56495443
   810b8:	20455441 	.word	0x20455441
   810bc:	5453494c 	.word	0x5453494c
   810c0:	4e494e45 	.word	0x4e494e45
   810c4:	4f4d2047 	.word	0x4f4d2047
   810c8:	00004544 	.word	0x00004544
   810cc:	31485441 	.word	0x31485441
   810d0:	00000000 	.word	0x00000000
   810d4:	31535441 	.word	0x31535441
   810d8:	00000000 	.word	0x00000000
   810dc:	4c415441 	.word	0x4c415441
   810e0:	00000000 	.word	0x00000000
   810e4:	414d5441 	.word	0x414d5441
   810e8:	00000000 	.word	0x00000000
   810ec:	2d2d200a 	.word	0x2d2d200a
   810f0:	2d2d2d2d 	.word	0x2d2d2d2d
   810f4:	2d2d2d2d 	.word	0x2d2d2d2d
   810f8:	494c2d2d 	.word	0x494c2d2d
   810fc:	4e455453 	.word	0x4e455453
   81100:	20474e49 	.word	0x20474e49
   81104:	45444f4d 	.word	0x45444f4d
   81108:	54434120 	.word	0x54434120
   8110c:	54415649 	.word	0x54415649
   81110:	2d2d4445 	.word	0x2d2d4445
   81114:	2d2d2d2d 	.word	0x2d2d2d2d
   81118:	2d2d2d2d 	.word	0x2d2d2d2d
   8111c:	002d2d2d 	.word	0x002d2d2d
   81120:	636c6557 	.word	0x636c6557
   81124:	20656d6f 	.word	0x20656d6f
   81128:	43206f54 	.word	0x43206f54
   8112c:	51695241 	.word	0x51695241
   81130:	0a212121 	.word	0x0a212121
   81134:	00000000 	.word	0x00000000
   81138:	56525441 	.word	0x56525441
   8113c:	00000000 	.word	0x00000000
   81140:	63303130 	.word	0x63303130
   81144:	00000000 	.word	0x00000000
   81148:	6f64200a 	.word	0x6f64200a
   8114c:	7720656e 	.word	0x7720656e
   81150:	20687469 	.word	0x20687469
   81154:	69736162 	.word	0x69736162
   81158:	65742063 	.word	0x65742063
   8115c:	6e697473 	.word	0x6e697473
   81160:	21212167 	.word	0x21212167
   81164:	65727020 	.word	0x65727020
   81168:	61207373 	.word	0x61207373
   8116c:	6b20796e 	.word	0x6b20796e
   81170:	74207965 	.word	0x74207965
   81174:	7270206f 	.word	0x7270206f
   81178:	6565636f 	.word	0x6565636f
   8117c:	00000064 	.word	0x00000064
   81180:	44414548 	.word	0x44414548
   81184:	53205245 	.word	0x53205245
   81188:	20205445 	.word	0x20205445
   8118c:	0000203a 	.word	0x0000203a
   81190:	45544e45 	.word	0x45544e45
   81194:	20444552 	.word	0x20444552
   81198:	45544e49 	.word	0x45544e49
   8119c:	55525252 	.word	0x55525252
   811a0:	00005450 	.word	0x00005450
   811a4:	00000a0d 	.word	0x00000a0d
   811a8:	00000043 	.word	0x00000043

000811ac <_global_impure_ptr>:
   811ac:	20070148                                H.. 

000811b0 <_init>:
   811b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   811b2:	bf00      	nop
   811b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   811b6:	bc08      	pop	{r3}
   811b8:	469e      	mov	lr, r3
   811ba:	4770      	bx	lr

000811bc <__init_array_start>:
   811bc:	00080f11 	.word	0x00080f11

000811c0 <__frame_dummy_init_array_entry>:
   811c0:	00080119                                ....

000811c4 <_fini>:
   811c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   811c6:	bf00      	nop
   811c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   811ca:	bc08      	pop	{r3}
   811cc:	469e      	mov	lr, r3
   811ce:	4770      	bx	lr

000811d0 <__fini_array_start>:
   811d0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070138 	.word	0x20070138

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <xNextTaskUnblockTime>:
2007013c:	ffffffff                                ....

20070140 <enter>:
20070140:	0000000d 00000000                       ........

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
2007017c:	000811a8 00000000 00000000 00000000     ................
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...
